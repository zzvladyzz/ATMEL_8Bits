
Atmega16A_I2C_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000929  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  000014df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z7UART_Rxv>:
#include <stdlib.h>
#include <stdio.h>

unsigned char UART_Rx()
{	
		while ((UCSRA&(1<<RXC))==0);
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z7UART_Rxv>
		return UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
}
  88:	08 95       	ret

0000008a <_Z7UART_Txc>:
void UART_Tx(char caracter)
{
	while (!(UCSRA&(1<<UDRE)));  // Mientras no se vacie el Reg UDR no sale
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z7UART_Txc>
	UDR=caracter;
  8e:	8c b9       	out	0x0c, r24	; 12
  90:	08 95       	ret

00000092 <_Z14UART_Tx_StringPc>:
}
void UART_Tx_String(char *str)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	fc 01       	movw	r30, r24
	unsigned char j=0;
	while (str[j]!=0)
  9a:	80 81       	ld	r24, Z
  9c:	88 23       	and	r24, r24
  9e:	59 f0       	breq	.+22     	; 0xb6 <_Z14UART_Tx_StringPc+0x24>
  a0:	8f 01       	movw	r16, r30
  a2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_Tx(str[j]);
  a4:	0e 94 45 00 	call	0x8a	; 0x8a <_Z7UART_Txc>
		j++;
  a8:	cf 5f       	subi	r28, 0xFF	; 255
	UDR=caracter;
}
void UART_Tx_String(char *str)
{
	unsigned char j=0;
	while (str[j]!=0)
  aa:	f8 01       	movw	r30, r16
  ac:	ec 0f       	add	r30, r28
  ae:	f1 1d       	adc	r31, r1
  b0:	80 81       	ld	r24, Z
  b2:	81 11       	cpse	r24, r1
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <_Z14UART_Tx_StringPc+0x12>
	{
		UART_Tx(str[j]);
		j++;
	}
}
  b6:	cf 91       	pop	r28
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	char c;
    /* Inicializamos USART */
	UCSRB|=(1<<RXEN)|(1<<TXEN);   //Habilitamos RX y TX
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); //Tamaño de bits 
  c4:	80 b5       	in	r24, 0x20	; 32
  c6:	86 68       	ori	r24, 0x86	; 134
  c8:	80 bd       	out	0x20, r24	; 32
	UBRRL|=Baud_Prescale;			  //Velocidad de baudios	
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	83 63       	ori	r24, 0x33	; 51
  ce:	89 b9       	out	0x09, r24	; 9
	UBRRH|=(Baud_Prescale>>8);
  d0:	80 b5       	in	r24, 0x20	; 32
  d2:	80 bd       	out	0x20, r24	; 32
	
	DDRB=DDRB|(1<<PB2);
  d4:	ba 9a       	sbi	0x17, 2	; 23
	UART_Tx_String("\n\t Hola");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 49 00 	call	0x92	; 0x92 <_Z14UART_Tx_StringPc>
    while (1) 
    {
		c=UART_Rx();
  de:	0e 94 41 00 	call	0x82	; 0x82 <_Z7UART_Rxv>
		if(c=='e')
  e2:	85 36       	cpi	r24, 0x65	; 101
  e4:	31 f4       	brne	.+12     	; 0xf2 <main+0x34>
		{
			PORTB|=(1<<PB2);
  e6:	c2 9a       	sbi	0x18, 2	; 24
			UART_Tx_String("\n\r Led encendido");
  e8:	88 e6       	ldi	r24, 0x68	; 104
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <_Z14UART_Tx_StringPc>
  f0:	f6 cf       	rjmp	.-20     	; 0xde <main+0x20>
		}
		else if (c=='a')
  f2:	81 36       	cpi	r24, 0x61	; 97
  f4:	31 f4       	brne	.+12     	; 0x102 <main+0x44>
		{
			PORTB&=~(1<<PB2);
  f6:	c2 98       	cbi	0x18, 2	; 24
			UART_Tx_String("\n\r Led apagado");
  f8:	89 e7       	ldi	r24, 0x79	; 121
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 49 00 	call	0x92	; 0x92 <_Z14UART_Tx_StringPc>
 100:	ee cf       	rjmp	.-36     	; 0xde <main+0x20>
		}
		else {UART_Tx_String("\n\r Tecla erronea");}
 102:	88 e8       	ldi	r24, 0x88	; 136
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 49 00 	call	0x92	; 0x92 <_Z14UART_Tx_StringPc>
 10a:	e9 cf       	rjmp	.-46     	; 0xde <main+0x20>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
