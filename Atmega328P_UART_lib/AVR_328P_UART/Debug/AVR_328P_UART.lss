
AVR_328P_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000364  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e6  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ec  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000346  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <util/delay.h>
#include <string.h>
#include "header/USART_328P.h"

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	27 97       	sbiw	r28, 0x07	; 7
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	USART_init(9600,1,1,1,"none",1,0,8);
  aa:	68 94       	set
  ac:	aa 24       	eor	r10, r10
  ae:	a3 f8       	bld	r10, 3
  b0:	c1 2c       	mov	r12, r1
  b2:	ee 24       	eor	r14, r14
  b4:	e3 94       	inc	r14
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	95 e2       	ldi	r25, 0x25	; 37
  c4:	0e 94 a0 00 	call	0x140	; 0x140 <USART_init>
	char hola[]="hola\n\r";
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	e5 e0       	ldi	r30, 0x05	; 5
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	8a 95       	dec	r24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
	DDRB=0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 b9       	out	0x04, r24	; 4
	//{
		//USART_TransmitData(i);
		//_delay_ms(1000);
		//PORTB^=(1<<PORTB5);
	//}	
	USART_TransmitString(hola,strlen(hola));
  de:	8e 01       	movw	r16, r28
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_ms(1000);
	PORTB^=(1<<PORTB5);
  e4:	68 94       	set
  e6:	ff 24       	eor	r15, r15
  e8:	f5 f8       	bld	r15, 5
	//{
		//USART_TransmitData(i);
		//_delay_ms(1000);
		//PORTB^=(1<<PORTB5);
	//}	
	USART_TransmitString(hola,strlen(hola));
  ea:	f8 01       	movw	r30, r16
  ec:	01 90       	ld	r0, Z+
  ee:	00 20       	and	r0, r0
  f0:	e9 f7       	brne	.-6      	; 0xec <main+0x56>
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	bf 01       	movw	r22, r30
  f6:	60 1b       	sub	r22, r16
  f8:	71 0b       	sbc	r23, r17
  fa:	c8 01       	movw	r24, r16
  fc:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_TransmitString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x70>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x7a>
 110:	00 00       	nop
	_delay_ms(1000);
	PORTB^=(1<<PORTB5);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 25       	eor	r24, r15
 116:	85 b9       	out	0x05, r24	; 5
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	8b e7       	ldi	r24, 0x7B	; 123
 11c:	92 e9       	ldi	r25, 0x92	; 146
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x88>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x92>
 128:	00 00       	nop
 12a:	df cf       	rjmp	.-66     	; 0xea <main+0x54>

0000012c <__vector_18>:
	_delay_ms(3000);
	}
}

ISR(USART_RX_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1

 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <USART_init>:
 * Created: 4/11/2021 10:27:40 PM
 *  Author: vladi
 */ 
#include "../header/USART_328P.h"
void	USART_init(uint16_t BAUDRATE,uint8_t EN_RX,uint8_t EN_TX,uint8_t EN_INT,char PARITY[10], uint8_t STOP_BITS,uint8_t MODE_USART,uint8_t BITS)
{
 140:	af 92       	push	r10
 142:	cf 92       	push	r12
 144:	ef 92       	push	r14
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	d6 2f       	mov	r29, r22
 150:	14 2f       	mov	r17, r20
 152:	c2 2f       	mov	r28, r18
 154:	0a 2d       	mov	r16, r10
	cli();
 156:	f8 94       	cli
	
	UBRR0L=(uint8_t) ((F_CPU/BAUDRATE/16)-1);
 158:	9c 01       	movw	r18, r24
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	60 e4       	ldi	r22, 0x40	; 64
 160:	72 e4       	ldi	r23, 0x42	; 66
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 8e 01 	call	0x31c	; 0x31c <__udivmodsi4>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	82 0f       	add	r24, r18
 16e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H=(uint8_t) (((F_CPU/BAUDRATE/16)-1)>>8);
 172:	da 01       	movw	r26, r20
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	a1 09       	sbc	r26, r1
 17a:	b1 09       	sbc	r27, r1
 17c:	89 2f       	mov	r24, r25
 17e:	9a 2f       	mov	r25, r26
 180:	ab 2f       	mov	r26, r27
 182:	bb 27       	eor	r27, r27
 184:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	
	UCSR0B|=(EN_RX<<RXEN0);
 188:	e1 ec       	ldi	r30, 0xC1	; 193
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	20 81       	ld	r18, Z
 18e:	30 e1       	ldi	r19, 0x10	; 16
 190:	d3 9f       	mul	r29, r19
 192:	c0 01       	movw	r24, r0
 194:	11 24       	eor	r1, r1
 196:	d2 2f       	mov	r29, r18
 198:	d8 2b       	or	r29, r24
 19a:	d0 83       	st	Z, r29
	UCSR0B|=(EN_TX<<TXEN0);
 19c:	80 81       	ld	r24, Z
 19e:	11 0f       	add	r17, r17
 1a0:	11 0f       	add	r17, r17
 1a2:	11 0f       	add	r17, r17
 1a4:	18 2b       	or	r17, r24
 1a6:	10 83       	st	Z, r17
	UCSR0B|=(EN_INT<<RXCIE0);
 1a8:	80 81       	ld	r24, Z
 1aa:	90 e8       	ldi	r25, 0x80	; 128
 1ac:	c9 9f       	mul	r28, r25
 1ae:	e0 01       	movw	r28, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	c8 2b       	or	r28, r24
 1b4:	c0 83       	st	Z, r28
	if (STOP_BITS==1)
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	e3 12       	cpse	r14, r19
 1ba:	06 c0       	rjmp	.+12     	; 0x1c8 <USART_init+0x88>
	{
		UCSR0C&=~(1<<USBS0);								/*		Stop Bits 1		*/
 1bc:	e2 ec       	ldi	r30, 0xC2	; 194
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	80 83       	st	Z, r24
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <USART_init+0x98>
	} 
	else if (STOP_BITS==2)
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	e8 12       	cpse	r14, r24
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <USART_init+0x98>
	{
		UCSR0C|=(1<<USBS0);									/*		Stop Bits 2		*/
 1ce:	e2 ec       	ldi	r30, 0xC2	; 194
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	80 83       	st	Z, r24
	}
	
	switch (MODE_USART)
 1d8:	cc 20       	and	r12, r12
 1da:	21 f0       	breq	.+8      	; 0x1e4 <USART_init+0xa4>
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	c9 16       	cp	r12, r25
 1e0:	51 f0       	breq	.+20     	; 0x1f6 <USART_init+0xb6>
 1e2:	12 c0       	rjmp	.+36     	; 0x208 <USART_init+0xc8>
	{
		case 0 :					/*		Mode Asynchronous		*/
			UCSR0C&=~(1<<UMSEL01);
 1e4:	e2 ec       	ldi	r30, 0xC2	; 194
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8f 77       	andi	r24, 0x7F	; 127
 1ec:	80 83       	st	Z, r24
			UCSR0C&=~(1<<UMSEL00);
 1ee:	80 81       	ld	r24, Z
 1f0:	8f 7b       	andi	r24, 0xBF	; 191
 1f2:	80 83       	st	Z, r24
			break;
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <USART_init+0xd8>
		case 1 :					/*		Mode Synchronous		*/
			UCSR0C&=~(1<<UMSEL01);
 1f6:	e2 ec       	ldi	r30, 0xC2	; 194
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	80 83       	st	Z, r24
			UCSR0C|=(1<<UMSEL00);
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
			break;
 206:	08 c0       	rjmp	.+16     	; 0x218 <USART_init+0xd8>
		default :
			UCSR0C&=~(1<<UMSEL01);
 208:	e2 ec       	ldi	r30, 0xC2	; 194
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	8f 77       	andi	r24, 0x7F	; 127
 210:	80 83       	st	Z, r24
			UCSR0C&=~(1<<UMSEL00);
 212:	80 81       	ld	r24, Z
 214:	8f 7b       	andi	r24, 0xBF	; 191
 216:	80 83       	st	Z, r24
				UCSR0C|=(1<<UPM01);
				UCSR0C|=(1<<UPM00);
	}
	else
	{
				UCSR0C&=~(1<<UPM01);
 218:	e2 ec       	ldi	r30, 0xC2	; 194
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UPM00);
 222:	80 81       	ld	r24, Z
 224:	8f 7e       	andi	r24, 0xEF	; 239
 226:	80 83       	st	Z, r24
	}
	switch (BITS)
 228:	06 30       	cpi	r16, 0x06	; 6
 22a:	b9 f0       	breq	.+46     	; 0x25a <USART_init+0x11a>
 22c:	18 f4       	brcc	.+6      	; 0x234 <USART_init+0xf4>
 22e:	05 30       	cpi	r16, 0x05	; 5
 230:	31 f0       	breq	.+12     	; 0x23e <USART_init+0xfe>
 232:	3d c0       	rjmp	.+122    	; 0x2ae <USART_init+0x16e>
 234:	07 30       	cpi	r16, 0x07	; 7
 236:	f9 f0       	breq	.+62     	; 0x276 <USART_init+0x136>
 238:	08 30       	cpi	r16, 0x08	; 8
 23a:	59 f1       	breq	.+86     	; 0x292 <USART_init+0x152>
 23c:	38 c0       	rjmp	.+112    	; 0x2ae <USART_init+0x16e>
	{
		case 5 :					/*		5 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ01);
 248:	e2 ec       	ldi	r30, 0xC2	; 194
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8b 7f       	andi	r24, 0xFB	; 251
 250:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ00);
 252:	80 81       	ld	r24, Z
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	80 83       	st	Z, r24
			break;
 258:	37 c0       	rjmp	.+110    	; 0x2c8 <USART_init+0x188>
		case 6 :					/*		6 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
 25a:	e1 ec       	ldi	r30, 0xC1	; 193
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8b 7f       	andi	r24, 0xFB	; 251
 262:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ01);
 264:	e2 ec       	ldi	r30, 0xC2	; 194
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
			break;
 274:	29 c0       	rjmp	.+82     	; 0x2c8 <USART_init+0x188>
		case 7 :					/*		7 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
 276:	e1 ec       	ldi	r30, 0xC1	; 193
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	8b 7f       	andi	r24, 0xFB	; 251
 27e:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	84 60       	ori	r24, 0x04	; 4
 288:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ00);
 28a:	80 81       	ld	r24, Z
 28c:	8d 7f       	andi	r24, 0xFD	; 253
 28e:	80 83       	st	Z, r24
			break;
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <USART_init+0x188>
		case 8 :					/*		8 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
 292:	e1 ec       	ldi	r30, 0xC1	; 193
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	8b 7f       	andi	r24, 0xFB	; 251
 29a:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
 29c:	e2 ec       	ldi	r30, 0xC2	; 194
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
 2a6:	80 81       	ld	r24, Z
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	80 83       	st	Z, r24
			break;
 2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <USART_init+0x188>
		default :
				UCSR0B&=~(1<<UCSZ02);
 2ae:	e1 ec       	ldi	r30, 0xC1	; 193
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
 2b8:	e2 ec       	ldi	r30, 0xC2	; 194
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	84 60       	ori	r24, 0x04	; 4
 2c0:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	80 83       	st	Z, r24
			break;
	}
	sei();
 2c8:	78 94       	sei
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ef 90       	pop	r14
 2d4:	cf 90       	pop	r12
 2d6:	af 90       	pop	r10
 2d8:	08 95       	ret

000002da <USART_TransmitData>:

void	USART_TransmitData(unsigned char Data)
{
	while(!(UCSR0A&(1<<UDRE0)));		/*	UDRE0=1 Entonces el buffer esta vacio y al tener ! entonces se vuelve False y sale del While */
 2da:	e0 ec       	ldi	r30, 0xC0	; 192
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	90 81       	ld	r25, Z
 2e0:	95 ff       	sbrs	r25, 5
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <USART_TransmitData+0x4>
	UDR0=Data;							/*	Cargamos los datos en UDR0		*/
 2e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2e8:	08 95       	ret

000002ea <USART_TransmitString>:
}
void	USART_TransmitString(char *Data,uint8_t USART_Lenght)
{
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
		for (uint8_t USART_i=0;USART_i<USART_Lenght;USART_i++)
 2f2:	66 23       	and	r22, r22
 2f4:	71 f0       	breq	.+28     	; 0x312 <USART_TransmitString+0x28>
 2f6:	ec 01       	movw	r28, r24
 2f8:	61 50       	subi	r22, 0x01	; 1
 2fa:	06 2f       	mov	r16, r22
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	08 0f       	add	r16, r24
 304:	19 1f       	adc	r17, r25
		{
		USART_TransmitData(Data[USART_i]);
 306:	89 91       	ld	r24, Y+
 308:	0e 94 6d 01 	call	0x2da	; 0x2da <USART_TransmitData>
	while(!(UCSR0A&(1<<UDRE0)));		/*	UDRE0=1 Entonces el buffer esta vacio y al tener ! entonces se vuelve False y sale del While */
	UDR0=Data;							/*	Cargamos los datos en UDR0		*/
}
void	USART_TransmitString(char *Data,uint8_t USART_Lenght)
{
		for (uint8_t USART_i=0;USART_i<USART_Lenght;USART_i++)
 30c:	c0 17       	cp	r28, r16
 30e:	d1 07       	cpc	r29, r17
 310:	d1 f7       	brne	.-12     	; 0x306 <USART_TransmitString+0x1c>
		{
		USART_TransmitData(Data[USART_i]);
		}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <__udivmodsi4>:
 31c:	a1 e2       	ldi	r26, 0x21	; 33
 31e:	1a 2e       	mov	r1, r26
 320:	aa 1b       	sub	r26, r26
 322:	bb 1b       	sub	r27, r27
 324:	fd 01       	movw	r30, r26
 326:	0d c0       	rjmp	.+26     	; 0x342 <__udivmodsi4_ep>

00000328 <__udivmodsi4_loop>:
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	ee 1f       	adc	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	a2 17       	cp	r26, r18
 332:	b3 07       	cpc	r27, r19
 334:	e4 07       	cpc	r30, r20
 336:	f5 07       	cpc	r31, r21
 338:	20 f0       	brcs	.+8      	; 0x342 <__udivmodsi4_ep>
 33a:	a2 1b       	sub	r26, r18
 33c:	b3 0b       	sbc	r27, r19
 33e:	e4 0b       	sbc	r30, r20
 340:	f5 0b       	sbc	r31, r21

00000342 <__udivmodsi4_ep>:
 342:	66 1f       	adc	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	1a 94       	dec	r1
 34c:	69 f7       	brne	.-38     	; 0x328 <__udivmodsi4_loop>
 34e:	60 95       	com	r22
 350:	70 95       	com	r23
 352:	80 95       	com	r24
 354:	90 95       	com	r25
 356:	9b 01       	movw	r18, r22
 358:	ac 01       	movw	r20, r24
 35a:	bd 01       	movw	r22, r26
 35c:	cf 01       	movw	r24, r30
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
