
AVR_328P_ReceiveData.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002e8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098e  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e4  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000320  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

ISR(USART_RX_vect);
int main(void)
{
    /* Replace with your application code */
    DDRB=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	USART_init(9600,1,1,1,"none",0,0,8);
  9a:	68 94       	set
  9c:	aa 24       	eor	r10, r10
  9e:	a3 f8       	bld	r10, 3
  a0:	c1 2c       	mov	r12, r1
  a2:	e1 2c       	mov	r14, r1
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	95 e2       	ldi	r25, 0x25	; 37
  b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_init>
#include <string.h>
#include "header/USART_328P.h"

ISR(USART_RX_vect);
int main(void)
{
  b6:	c0 e0       	ldi	r28, 0x00	; 0
	USART_init(9600,1,1,1,"none",0,0,8);
	while (1) 
    {
	for (int i=0;i<5;i++)
	{
		USART_TransmitData(i);
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 48 01 	call	0x290	; 0x290 <USART_TransmitData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	84 e3       	ldi	r24, 0x34	; 52
  c2:	9c e0       	ldi	r25, 0x0C	; 12
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x2e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x38>
  ce:	00 00       	nop
  d0:	cf 5f       	subi	r28, 0xFF	; 255
    /* Replace with your application code */
    DDRB=0xFF;
	USART_init(9600,1,1,1,"none",0,0,8);
	while (1) 
    {
	for (int i=0;i<5;i++)
  d2:	c5 30       	cpi	r28, 0x05	; 5
  d4:	89 f7       	brne	.-30     	; 0xb8 <main+0x22>
  d6:	ef cf       	rjmp	.-34     	; 0xb6 <main+0x20>

000000d8 <__vector_18>:
		_delay_ms(500);
	}
    }
}
ISR(USART_RX_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	PORTB=UDR0;
  e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e8:	85 b9       	out	0x05, r24	; 5
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <USART_init>:
  f6:	af 92       	push	r10
  f8:	cf 92       	push	r12
  fa:	ef 92       	push	r14
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	d6 2f       	mov	r29, r22
 106:	14 2f       	mov	r17, r20
 108:	c2 2f       	mov	r28, r18
 10a:	0a 2d       	mov	r16, r10
 10c:	f8 94       	cli
 10e:	9c 01       	movw	r18, r24
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	60 e2       	ldi	r22, 0x20	; 32
 116:	71 ea       	ldi	r23, 0xA1	; 161
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__udivmodsi4>
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	82 0f       	add	r24, r18
 124:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 128:	da 01       	movw	r26, r20
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	a1 09       	sbc	r26, r1
 130:	b1 09       	sbc	r27, r1
 132:	89 2f       	mov	r24, r25
 134:	9a 2f       	mov	r25, r26
 136:	ab 2f       	mov	r26, r27
 138:	bb 27       	eor	r27, r27
 13a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 13e:	e1 ec       	ldi	r30, 0xC1	; 193
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	20 81       	ld	r18, Z
 144:	30 e1       	ldi	r19, 0x10	; 16
 146:	d3 9f       	mul	r29, r19
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	d2 2f       	mov	r29, r18
 14e:	d8 2b       	or	r29, r24
 150:	d0 83       	st	Z, r29
 152:	80 81       	ld	r24, Z
 154:	11 0f       	add	r17, r17
 156:	11 0f       	add	r17, r17
 158:	11 0f       	add	r17, r17
 15a:	18 2b       	or	r17, r24
 15c:	10 83       	st	Z, r17
 15e:	80 81       	ld	r24, Z
 160:	90 e8       	ldi	r25, 0x80	; 128
 162:	c9 9f       	mul	r28, r25
 164:	e0 01       	movw	r28, r0
 166:	11 24       	eor	r1, r1
 168:	c8 2b       	or	r28, r24
 16a:	c0 83       	st	Z, r28
 16c:	31 e0       	ldi	r19, 0x01	; 1
 16e:	e3 12       	cpse	r14, r19
 170:	06 c0       	rjmp	.+12     	; 0x17e <USART_init+0x88>
 172:	e2 ec       	ldi	r30, 0xC2	; 194
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	80 83       	st	Z, r24
 17c:	08 c0       	rjmp	.+16     	; 0x18e <USART_init+0x98>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	e8 12       	cpse	r14, r24
 182:	05 c0       	rjmp	.+10     	; 0x18e <USART_init+0x98>
 184:	e2 ec       	ldi	r30, 0xC2	; 194
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	80 83       	st	Z, r24
 18e:	cc 20       	and	r12, r12
 190:	21 f0       	breq	.+8      	; 0x19a <USART_init+0xa4>
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	c9 16       	cp	r12, r25
 196:	51 f0       	breq	.+20     	; 0x1ac <USART_init+0xb6>
 198:	12 c0       	rjmp	.+36     	; 0x1be <USART_init+0xc8>
 19a:	e2 ec       	ldi	r30, 0xC2	; 194
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	8f 77       	andi	r24, 0x7F	; 127
 1a2:	80 83       	st	Z, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	80 83       	st	Z, r24
 1aa:	11 c0       	rjmp	.+34     	; 0x1ce <USART_init+0xd8>
 1ac:	e2 ec       	ldi	r30, 0xC2	; 194
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	80 83       	st	Z, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <USART_init+0xd8>
 1be:	e2 ec       	ldi	r30, 0xC2	; 194
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 77       	andi	r24, 0x7F	; 127
 1c6:	80 83       	st	Z, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7b       	andi	r24, 0xBF	; 191
 1cc:	80 83       	st	Z, r24
 1ce:	e2 ec       	ldi	r30, 0xC2	; 194
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	80 83       	st	Z, r24
 1d8:	80 81       	ld	r24, Z
 1da:	8f 7e       	andi	r24, 0xEF	; 239
 1dc:	80 83       	st	Z, r24
 1de:	06 30       	cpi	r16, 0x06	; 6
 1e0:	b9 f0       	breq	.+46     	; 0x210 <USART_init+0x11a>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <USART_init+0xf4>
 1e4:	05 30       	cpi	r16, 0x05	; 5
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <USART_init+0xfe>
 1e8:	3d c0       	rjmp	.+122    	; 0x264 <USART_init+0x16e>
 1ea:	07 30       	cpi	r16, 0x07	; 7
 1ec:	f9 f0       	breq	.+62     	; 0x22c <USART_init+0x136>
 1ee:	08 30       	cpi	r16, 0x08	; 8
 1f0:	59 f1       	breq	.+86     	; 0x248 <USART_init+0x152>
 1f2:	38 c0       	rjmp	.+112    	; 0x264 <USART_init+0x16e>
 1f4:	e1 ec       	ldi	r30, 0xC1	; 193
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8b 7f       	andi	r24, 0xFB	; 251
 1fc:	80 83       	st	Z, r24
 1fe:	e2 ec       	ldi	r30, 0xC2	; 194
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8b 7f       	andi	r24, 0xFB	; 251
 206:	80 83       	st	Z, r24
 208:	80 81       	ld	r24, Z
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	80 83       	st	Z, r24
 20e:	37 c0       	rjmp	.+110    	; 0x27e <USART_init+0x188>
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 83       	st	Z, r24
 21a:	e2 ec       	ldi	r30, 0xC2	; 194
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	8b 7f       	andi	r24, 0xFB	; 251
 222:	80 83       	st	Z, r24
 224:	80 81       	ld	r24, Z
 226:	82 60       	ori	r24, 0x02	; 2
 228:	80 83       	st	Z, r24
 22a:	29 c0       	rjmp	.+82     	; 0x27e <USART_init+0x188>
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 83       	st	Z, r24
 236:	e2 ec       	ldi	r30, 0xC2	; 194
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	80 83       	st	Z, r24
 240:	80 81       	ld	r24, Z
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	80 83       	st	Z, r24
 246:	1b c0       	rjmp	.+54     	; 0x27e <USART_init+0x188>
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8b 7f       	andi	r24, 0xFB	; 251
 250:	80 83       	st	Z, r24
 252:	e2 ec       	ldi	r30, 0xC2	; 194
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
 262:	0d c0       	rjmp	.+26     	; 0x27e <USART_init+0x188>
 264:	e1 ec       	ldi	r30, 0xC1	; 193
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	80 83       	st	Z, r24
 26e:	e2 ec       	ldi	r30, 0xC2	; 194
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	84 60       	ori	r24, 0x04	; 4
 276:	80 83       	st	Z, r24
 278:	80 81       	ld	r24, Z
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	80 83       	st	Z, r24
 27e:	78 94       	sei
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ef 90       	pop	r14
 28a:	cf 90       	pop	r12
 28c:	af 90       	pop	r10
 28e:	08 95       	ret

00000290 <USART_TransmitData>:
 290:	e0 ec       	ldi	r30, 0xC0	; 192
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	90 81       	ld	r25, Z
 296:	95 ff       	sbrs	r25, 5
 298:	fd cf       	rjmp	.-6      	; 0x294 <USART_TransmitData+0x4>
 29a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 29e:	08 95       	ret

000002a0 <__udivmodsi4>:
 2a0:	a1 e2       	ldi	r26, 0x21	; 33
 2a2:	1a 2e       	mov	r1, r26
 2a4:	aa 1b       	sub	r26, r26
 2a6:	bb 1b       	sub	r27, r27
 2a8:	fd 01       	movw	r30, r26
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <__udivmodsi4_ep>

000002ac <__udivmodsi4_loop>:
 2ac:	aa 1f       	adc	r26, r26
 2ae:	bb 1f       	adc	r27, r27
 2b0:	ee 1f       	adc	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	a2 17       	cp	r26, r18
 2b6:	b3 07       	cpc	r27, r19
 2b8:	e4 07       	cpc	r30, r20
 2ba:	f5 07       	cpc	r31, r21
 2bc:	20 f0       	brcs	.+8      	; 0x2c6 <__udivmodsi4_ep>
 2be:	a2 1b       	sub	r26, r18
 2c0:	b3 0b       	sbc	r27, r19
 2c2:	e4 0b       	sbc	r30, r20
 2c4:	f5 0b       	sbc	r31, r21

000002c6 <__udivmodsi4_ep>:
 2c6:	66 1f       	adc	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	1a 94       	dec	r1
 2d0:	69 f7       	brne	.-38     	; 0x2ac <__udivmodsi4_loop>
 2d2:	60 95       	com	r22
 2d4:	70 95       	com	r23
 2d6:	80 95       	com	r24
 2d8:	90 95       	com	r25
 2da:	9b 01       	movw	r18, r22
 2dc:	ac 01       	movw	r20, r24
 2de:	bd 01       	movw	r22, r26
 2e0:	cf 01       	movw	r24, r30
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
