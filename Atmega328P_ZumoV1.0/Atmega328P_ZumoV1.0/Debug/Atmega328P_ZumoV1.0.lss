
Atmega328P_ZumoV1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  0000273a  000027ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000273a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  0080019a  0080019a  00002868  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a5  00000000  00000000  00002aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de9  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001baf  00000000  00000000  00006e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  000089e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095b  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d40  00000000  00000000  00009aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000b7eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_7>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	ea e3       	ldi	r30, 0x3A	; 58
      aa:	f7 e2       	ldi	r31, 0x27	; 39
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	aa 39       	cpi	r26, 0x9A	; 154
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	22 e0       	ldi	r18, 0x02	; 2
      ba:	aa e9       	ldi	r26, 0x9A	; 154
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a1 38       	cpi	r26, 0x81	; 129
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:



int main(void)
{
	ZUMO_Init();
      d4:	0e 94 c4 08 	call	0x1188	; 0x1188 <ZUMO_Init>
	pressButton();
      d8:	0e 94 ab 08 	call	0x1156	; 0x1156 <pressButton>
	OFF_Timer0;
      dc:	85 b5       	in	r24, 0x25	; 37
      de:	8a 7f       	andi	r24, 0xFA	; 250
      e0:	85 bd       	out	0x25, r24	; 37
	ON_Timer2;
      e2:	e1 eb       	ldi	r30, 0xB1	; 177
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	87 60       	ori	r24, 0x07	; 7
      ea:	80 83       	st	Z, r24
	OFF_Motors;
      ec:	e1 e8       	ldi	r30, 0x81	; 129
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
	sei();
      f6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f8:	2f ef       	ldi	r18, 0xFF	; 255
      fa:	89 e6       	ldi	r24, 0x69	; 105
      fc:	98 e1       	ldi	r25, 0x18	; 24
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <main+0x2a>
     106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x34>
     108:	00 00       	nop
	while (1) 
    {		
			_delay_ms(500);
			cli();
     10a:	f8 94       	cli
			Serial_Print_IMU();
     10c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Serial_Print_IMU>
			sei();
     110:	78 94       	sei
     112:	f2 cf       	rjmp	.-28     	; 0xf8 <main+0x24>

00000114 <__vector_14>:
    }
	
}
/*		Sensado a 100 hz 	*/
ISR(TIMER0_COMPA_vect)
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
	
}
     11e:	0f 90       	pop	r0
     120:	0f be       	out	0x3f, r0	; 63
     122:	0f 90       	pop	r0
     124:	1f 90       	pop	r1
     126:	18 95       	reti

00000128 <__vector_7>:

/*		PID	 a 	65 Hz					*/
ISR(TIMER2_COMPA_vect)
{
     128:	1f 92       	push	r1
     12a:	0f 92       	push	r0
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	0f 92       	push	r0
     130:	11 24       	eor	r1, r1
     132:	2f 93       	push	r18
     134:	3f 93       	push	r19
     136:	4f 93       	push	r20
     138:	5f 93       	push	r21
     13a:	6f 93       	push	r22
     13c:	7f 93       	push	r23
     13e:	8f 93       	push	r24
     140:	9f 93       	push	r25
     142:	af 93       	push	r26
     144:	bf 93       	push	r27
     146:	ef 93       	push	r30
     148:	ff 93       	push	r31
	cli();
     14a:	f8 94       	cli
	ZUMO_QTR_Sensors();
     14c:	0e 94 43 07 	call	0xe86	; 0xe86 <ZUMO_QTR_Sensors>
	ZUMO_Magnetometer();
     150:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ZUMO_Magnetometer>
	ZUMO_PID();
     154:	0e 94 2c 04 	call	0x858	; 0x858 <ZUMO_PID>
	sei();
     158:	78 94       	sei
}
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	5f 91       	pop	r21
     16c:	4f 91       	pop	r20
     16e:	3f 91       	pop	r19
     170:	2f 91       	pop	r18
     172:	0f 90       	pop	r0
     174:	0f be       	out	0x3f, r0	; 63
     176:	0f 90       	pop	r0
     178:	1f 90       	pop	r1
     17a:	18 95       	reti

0000017c <TIMER_Init>:
	  ZUMO.IMU.Angulo_Aceleracion_Y=(float)atan(-1*(ZUMO.IMU.C_Ax/sqrt(pow(ZUMO.IMU.C_Ay,2)+pow(ZUMO.IMU.C_Az,2))));
	  ZUMO.IMU.Angulo_Aceleracion_Y*=(180.0/PI);
	  ZUMO.IMU.roll=0.98*(ZUMO.IMU.roll+ZUMO.IMU.C_Gx*ZUMO.PID.Ts)+0.02*ZUMO.IMU.Angulo_Aceleracion_X;
	  ZUMO.IMU.pitch=0.98*(ZUMO.IMU.pitch+ZUMO.IMU.C_Gy*ZUMO.PID.Ts)+0.02*ZUMO.IMU.Angulo_Aceleracion_Y;
	  
}
     17c:	84 b5       	in	r24, 0x24	; 36
     17e:	8f 77       	andi	r24, 0x7F	; 127
     180:	84 bd       	out	0x24, r24	; 36
     182:	84 b5       	in	r24, 0x24	; 36
     184:	8f 7b       	andi	r24, 0xBF	; 191
     186:	84 bd       	out	0x24, r24	; 36
     188:	84 b5       	in	r24, 0x24	; 36
     18a:	8f 7d       	andi	r24, 0xDF	; 223
     18c:	84 bd       	out	0x24, r24	; 36
     18e:	84 b5       	in	r24, 0x24	; 36
     190:	8f 7e       	andi	r24, 0xEF	; 239
     192:	84 bd       	out	0x24, r24	; 36
     194:	84 b5       	in	r24, 0x24	; 36
     196:	8e 7f       	andi	r24, 0xFE	; 254
     198:	84 bd       	out	0x24, r24	; 36
     19a:	84 b5       	in	r24, 0x24	; 36
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	84 bd       	out	0x24, r24	; 36
     1a0:	85 b5       	in	r24, 0x25	; 37
     1a2:	87 7f       	andi	r24, 0xF7	; 247
     1a4:	85 bd       	out	0x25, r24	; 37
     1a6:	8b e9       	ldi	r24, 0x9B	; 155
     1a8:	87 bd       	out	0x27, r24	; 39
     1aa:	18 bc       	out	0x28, r1	; 40
     1ac:	85 b5       	in	r24, 0x25	; 37
     1ae:	8e 7f       	andi	r24, 0xFE	; 254
     1b0:	85 bd       	out	0x25, r24	; 37
     1b2:	85 b5       	in	r24, 0x25	; 37
     1b4:	8d 7f       	andi	r24, 0xFD	; 253
     1b6:	85 bd       	out	0x25, r24	; 37
     1b8:	85 b5       	in	r24, 0x25	; 37
     1ba:	8b 7f       	andi	r24, 0xFB	; 251
     1bc:	85 bd       	out	0x25, r24	; 37
     1be:	ee e6       	ldi	r30, 0x6E	; 110
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	82 60       	ori	r24, 0x02	; 2
     1c6:	80 83       	st	Z, r24
     1c8:	89 e2       	ldi	r24, 0x29	; 41
     1ca:	94 e0       	ldi	r25, 0x04	; 4
     1cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     1d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
     1d4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     1d8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     1dc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     1e0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     1e4:	e0 e8       	ldi	r30, 0x80	; 128
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 ea       	ldi	r24, 0xA0	; 160
     1ea:	80 83       	st	Z, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	8e 7f       	andi	r24, 0xFE	; 254
     1f0:	80 83       	st	Z, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	82 60       	ori	r24, 0x02	; 2
     1f6:	80 83       	st	Z, r24
     1f8:	e1 e8       	ldi	r30, 0x81	; 129
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	88 60       	ori	r24, 0x08	; 8
     200:	80 83       	st	Z, r24
     202:	80 81       	ld	r24, Z
     204:	80 61       	ori	r24, 0x10	; 16
     206:	80 83       	st	Z, r24
     208:	80 81       	ld	r24, Z
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	80 83       	st	Z, r24
     20e:	80 81       	ld	r24, Z
     210:	8d 7f       	andi	r24, 0xFD	; 253
     212:	80 83       	st	Z, r24
     214:	80 81       	ld	r24, Z
     216:	8b 7f       	andi	r24, 0xFB	; 251
     218:	80 83       	st	Z, r24
     21a:	e0 eb       	ldi	r30, 0xB0	; 176
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8e 7f       	andi	r24, 0xFE	; 254
     222:	80 83       	st	Z, r24
     224:	80 81       	ld	r24, Z
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 83       	st	Z, r24
     22a:	e1 eb       	ldi	r30, 0xB1	; 177
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	87 7f       	andi	r24, 0xF7	; 247
     232:	80 83       	st	Z, r24
     234:	8f ee       	ldi	r24, 0xEF	; 239
     236:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     23a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     23e:	a0 e7       	ldi	r26, 0x70	; 112
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	8c 91       	ld	r24, X
     244:	82 60       	ori	r24, 0x02	; 2
     246:	8c 93       	st	X, r24
     248:	80 81       	ld	r24, Z
     24a:	8b 7f       	andi	r24, 0xFB	; 251
     24c:	80 83       	st	Z, r24
     24e:	80 81       	ld	r24, Z
     250:	8d 7f       	andi	r24, 0xFD	; 253
     252:	80 83       	st	Z, r24
     254:	80 81       	ld	r24, Z
     256:	8e 7f       	andi	r24, 0xFE	; 254
     258:	80 83       	st	Z, r24
     25a:	08 95       	ret

0000025c <ZUMO_Motor>:
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	ac 01       	movw	r20, r24
     262:	fb 01       	movw	r30, r22
     264:	49 3e       	cpi	r20, 0xE9	; 233
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	58 07       	cpc	r21, r24
     26a:	f0 f5       	brcc	.+124    	; 0x2e8 <ZUMO_Motor+0x8c>
     26c:	69 3e       	cpi	r22, 0xE9	; 233
     26e:	73 40       	sbci	r23, 0x03	; 3
     270:	d8 f5       	brcc	.+118    	; 0x2e8 <ZUMO_Motor+0x8c>
     272:	c6 e8       	ldi	r28, 0x86	; 134
     274:	d0 e0       	ldi	r29, 0x00	; 0
     276:	28 81       	ld	r18, Y
     278:	39 81       	ldd	r19, Y+1	; 0x01
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
     27e:	36 95       	lsr	r19
     280:	27 95       	ror	r18
     282:	36 95       	lsr	r19
     284:	27 95       	ror	r18
     286:	a5 ec       	ldi	r26, 0xC5	; 197
     288:	b0 e2       	ldi	r27, 0x20	; 32
     28a:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
     28e:	92 95       	swap	r25
     290:	82 95       	swap	r24
     292:	8f 70       	andi	r24, 0x0F	; 15
     294:	89 27       	eor	r24, r25
     296:	9f 70       	andi	r25, 0x0F	; 15
     298:	89 27       	eor	r24, r25
     29a:	84 9f       	mul	r24, r20
     29c:	90 01       	movw	r18, r0
     29e:	85 9f       	mul	r24, r21
     2a0:	30 0d       	add	r19, r0
     2a2:	94 9f       	mul	r25, r20
     2a4:	30 0d       	add	r19, r0
     2a6:	11 24       	eor	r1, r1
     2a8:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2ac:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2b0:	28 81       	ld	r18, Y
     2b2:	39 81       	ldd	r19, Y+1	; 0x01
     2b4:	36 95       	lsr	r19
     2b6:	27 95       	ror	r18
     2b8:	36 95       	lsr	r19
     2ba:	27 95       	ror	r18
     2bc:	36 95       	lsr	r19
     2be:	27 95       	ror	r18
     2c0:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
     2c4:	92 95       	swap	r25
     2c6:	82 95       	swap	r24
     2c8:	8f 70       	andi	r24, 0x0F	; 15
     2ca:	89 27       	eor	r24, r25
     2cc:	9f 70       	andi	r25, 0x0F	; 15
     2ce:	89 27       	eor	r24, r25
     2d0:	8e 9f       	mul	r24, r30
     2d2:	90 01       	movw	r18, r0
     2d4:	8f 9f       	mul	r24, r31
     2d6:	30 0d       	add	r19, r0
     2d8:	9e 9f       	mul	r25, r30
     2da:	30 0d       	add	r19, r0
     2dc:	11 24       	eor	r1, r1
     2de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <ZUMO_Motor+0x9c>
     2e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2f4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <L3GD20H_Init>:
     2fe:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_Start>
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8b e6       	ldi	r24, 0x6B	; 107
     306:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     30a:	89 e3       	ldi	r24, 0x39	; 57
     30c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     316:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8b e6       	ldi	r24, 0x6B	; 107
     31e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     328:	8f e6       	ldi	r24, 0x6F	; 111
     32a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     32e:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	8b e6       	ldi	r24, 0x6B	; 107
     336:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     33a:	83 e2       	ldi	r24, 0x23	; 35
     33c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     346:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TWI_Stop>
     34a:	08 95       	ret

0000034c <LSM303D_Init>:
     34c:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_Start>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	8d e1       	ldi	r24, 0x1D	; 29
     354:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     358:	80 e2       	ldi	r24, 0x20	; 32
     35a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     35e:	87 e5       	ldi	r24, 0x57	; 87
     360:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     364:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	8d e1       	ldi	r24, 0x1D	; 29
     36c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     370:	81 e2       	ldi	r24, 0x21	; 33
     372:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     37c:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	8d e1       	ldi	r24, 0x1D	; 29
     384:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     388:	84 e2       	ldi	r24, 0x24	; 36
     38a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     38e:	84 e6       	ldi	r24, 0x64	; 100
     390:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     394:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	8d e1       	ldi	r24, 0x1D	; 29
     39c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     3a0:	85 e2       	ldi	r24, 0x25	; 37
     3a2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     3ac:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	8d e1       	ldi	r24, 0x1D	; 29
     3b4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     3b8:	86 e2       	ldi	r24, 0x26	; 38
     3ba:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     3c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TWI_Stop>
     3c8:	08 95       	ret

000003ca <ZUMO_Magnetometer>:
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_Start>
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8d e1       	ldi	r24, 0x1D	; 29
     3ea:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     3ee:	88 e8       	ldi	r24, 0x88	; 136
     3f0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <TWI_TransmitData>
     3f4:	0e 94 c4 09 	call	0x1388	; 0x1388 <TWI_RepeatStart>
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	8d e1       	ldi	r24, 0x1D	; 29
     3fc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <TWI_Adrress>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     406:	f8 2e       	mov	r15, r24
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     40e:	e8 2e       	mov	r14, r24
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     416:	18 2f       	mov	r17, r24
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     41e:	08 2f       	mov	r16, r24
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     426:	c8 2f       	mov	r28, r24
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 a6 0a 	call	0x154c	; 0x154c <TWI_ReceiveData>
     42e:	d8 2e       	mov	r13, r24
     430:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TWI_Stop>
     434:	d0 e0       	ldi	r29, 0x00	; 0
     436:	dd 29       	or	r29, r13
     438:	d0 93 04 02 	sts	0x0204, r29	; 0x800204 <ZUMO+0x66>
     43c:	c0 93 03 02 	sts	0x0203, r28	; 0x800203 <ZUMO+0x65>
     440:	6f 2d       	mov	r22, r15
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	7e 29       	or	r23, r14
     446:	07 2e       	mov	r0, r23
     448:	00 0c       	add	r0, r0
     44a:	88 0b       	sbc	r24, r24
     44c:	99 0b       	sbc	r25, r25
     44e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     452:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <ZUMO+0x8b>
     456:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <ZUMO+0x8c>
     45a:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <ZUMO+0x8d>
     45e:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <ZUMO+0x8e>
     462:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     466:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
     46e:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <ZUMO+0x62>
     472:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <ZUMO+0x61>
     476:	81 2f       	mov	r24, r17
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	bc 01       	movw	r22, r24
     47c:	70 2b       	or	r23, r16
     47e:	07 2e       	mov	r0, r23
     480:	00 0c       	add	r0, r0
     482:	88 0b       	sbc	r24, r24
     484:	99 0b       	sbc	r25, r25
     486:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     48a:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <ZUMO+0x8f>
     48e:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <ZUMO+0x90>
     492:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <ZUMO+0x91>
     496:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <ZUMO+0x92>
     49a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     49e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
     4a2:	4b 01       	movw	r8, r22
     4a4:	5c 01       	movw	r10, r24
     4a6:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <ZUMO+0x64>
     4aa:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <ZUMO+0x63>
     4ae:	b6 01       	movw	r22, r12
     4b0:	dd 0c       	add	r13, r13
     4b2:	88 0b       	sbc	r24, r24
     4b4:	99 0b       	sbc	r25, r25
     4b6:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     4ba:	2c ea       	ldi	r18, 0xAC	; 172
     4bc:	35 ec       	ldi	r19, 0xC5	; 197
     4be:	47 ea       	ldi	r20, 0xA7	; 167
     4c0:	58 e3       	ldi	r21, 0x38	; 56
     4c2:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     4c6:	6b 01       	movw	r12, r22
     4c8:	7c 01       	movw	r14, r24
     4ca:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <ZUMO+0x73>
     4ce:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <ZUMO+0x74>
     4d2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <ZUMO+0x75>
     4d6:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <ZUMO+0x76>
     4da:	b4 01       	movw	r22, r8
     4dc:	99 0c       	add	r9, r9
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     4e6:	2c ea       	ldi	r18, 0xAC	; 172
     4e8:	35 ec       	ldi	r19, 0xC5	; 197
     4ea:	47 ea       	ldi	r20, 0xA7	; 167
     4ec:	58 e3       	ldi	r21, 0x38	; 56
     4ee:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     4f2:	4b 01       	movw	r8, r22
     4f4:	5c 01       	movw	r10, r24
     4f6:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <ZUMO+0x77>
     4fa:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <ZUMO+0x78>
     4fe:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ZUMO+0x79>
     502:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ZUMO+0x7a>
     506:	be 01       	movw	r22, r28
     508:	dd 0f       	add	r29, r29
     50a:	88 0b       	sbc	r24, r24
     50c:	99 0b       	sbc	r25, r25
     50e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     512:	2c ea       	ldi	r18, 0xAC	; 172
     514:	35 ec       	ldi	r19, 0xC5	; 197
     516:	47 ea       	ldi	r20, 0xA7	; 167
     518:	58 e3       	ldi	r21, 0x38	; 56
     51a:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     51e:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <ZUMO+0x7b>
     522:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <ZUMO+0x7c>
     526:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <ZUMO+0x7d>
     52a:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <ZUMO+0x7e>
     52e:	a7 01       	movw	r20, r14
     530:	96 01       	movw	r18, r12
     532:	c5 01       	movw	r24, r10
     534:	b4 01       	movw	r22, r8
     536:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <atan2>
     53a:	2d e1       	ldi	r18, 0x1D	; 29
     53c:	3f e2       	ldi	r19, 0x2F	; 47
     53e:	45 e6       	ldi	r20, 0x65	; 101
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	a9 01       	movw	r20, r18
     550:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     554:	88 23       	and	r24, r24
     556:	4c f0       	brlt	.+18     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     558:	c0 92 df 01 	sts	0x01DF, r12	; 0x8001df <ZUMO+0x41>
     55c:	d0 92 e0 01 	sts	0x01E0, r13	; 0x8001e0 <ZUMO+0x42>
     560:	e0 92 e1 01 	sts	0x01E1, r14	; 0x8001e1 <ZUMO+0x43>
     564:	f0 92 e2 01 	sts	0x01E2, r15	; 0x8001e2 <ZUMO+0x44>
     568:	10 c0       	rjmp	.+32     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	44 eb       	ldi	r20, 0xB4	; 180
     570:	53 e4       	ldi	r21, 0x43	; 67
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     57a:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <ZUMO+0x41>
     57e:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <ZUMO+0x42>
     582:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <ZUMO+0x43>
     586:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <ZUMO+0x44>
     58a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <ZUMO+0x40>
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	09 f0       	breq	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     592:	55 c0       	rjmp	.+170    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     594:	80 90 be 01 	lds	r8, 0x01BE	; 0x8001be <ZUMO+0x20>
     598:	90 90 bf 01 	lds	r9, 0x01BF	; 0x8001bf <ZUMO+0x21>
     59c:	a0 90 c0 01 	lds	r10, 0x01C0	; 0x8001c0 <ZUMO+0x22>
     5a0:	b0 90 c1 01 	lds	r11, 0x01C1	; 0x8001c1 <ZUMO+0x23>
     5a4:	cf ed       	ldi	r28, 0xDF	; 223
     5a6:	d1 e0       	ldi	r29, 0x01	; 1
     5a8:	28 81       	ld	r18, Y
     5aa:	39 81       	ldd	r19, Y+1	; 0x01
     5ac:	4a 81       	ldd	r20, Y+2	; 0x02
     5ae:	5b 81       	ldd	r21, Y+3	; 0x03
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     5b8:	6b 01       	movw	r12, r22
     5ba:	7c 01       	movw	r14, r24
     5bc:	68 83       	st	Y, r22
     5be:	79 83       	std	Y+1, r23	; 0x01
     5c0:	8a 83       	std	Y+2, r24	; 0x02
     5c2:	9b 83       	std	Y+3, r25	; 0x03
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	c5 01       	movw	r24, r10
     5cc:	b4 01       	movw	r22, r8
     5ce:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     5d2:	88 23       	and	r24, r24
     5d4:	dc f0       	brlt	.+54     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	44 eb       	ldi	r20, 0xB4	; 180
     5dc:	53 e4       	ldi	r21, 0x43	; 67
     5de:	c7 01       	movw	r24, r14
     5e0:	b6 01       	movw	r22, r12
     5e2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     5e6:	18 16       	cp	r1, r24
     5e8:	54 f5       	brge	.+84     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	44 eb       	ldi	r20, 0xB4	; 180
     5f0:	53 e4       	ldi	r21, 0x43	; 67
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     5fa:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <ZUMO+0x41>
     5fe:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <ZUMO+0x42>
     602:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <ZUMO+0x43>
     606:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <ZUMO+0x44>
     60a:	19 c0       	rjmp	.+50     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     61a:	88 23       	and	r24, r24
     61c:	84 f4       	brge	.+32     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	44 eb       	ldi	r20, 0xB4	; 180
     624:	53 e4       	ldi	r21, 0x43	; 67
     626:	c7 01       	movw	r24, r14
     628:	b6 01       	movw	r22, r12
     62a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     62e:	60 93 df 01 	sts	0x01DF, r22	; 0x8001df <ZUMO+0x41>
     632:	70 93 e0 01 	sts	0x01E0, r23	; 0x8001e0 <ZUMO+0x42>
     636:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <ZUMO+0x43>
     63a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <ZUMO+0x44>
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	bf 90       	pop	r11
     650:	af 90       	pop	r10
     652:	9f 90       	pop	r9
     654:	8f 90       	pop	r8
     656:	08 95       	ret

00000658 <ZUMO_PID_Init>:
     658:	4f 92       	push	r4
     65a:	5f 92       	push	r5
     65c:	6f 92       	push	r6
     65e:	7f 92       	push	r7
     660:	af 92       	push	r10
     662:	bf 92       	push	r11
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	28 97       	sbiw	r28, 0x08	; 8
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	2b 01       	movw	r4, r22
     686:	3c 01       	movw	r6, r24
     688:	2d 83       	std	Y+5, r18	; 0x05
     68a:	3e 83       	std	Y+6, r19	; 0x06
     68c:	4f 83       	std	Y+7, r20	; 0x07
     68e:	58 87       	std	Y+8, r21	; 0x08
     690:	c8 01       	movw	r24, r16
     692:	b7 01       	movw	r22, r14
     694:	40 92 a2 01 	sts	0x01A2, r4	; 0x8001a2 <ZUMO+0x4>
     698:	50 92 a3 01 	sts	0x01A3, r5	; 0x8001a3 <ZUMO+0x5>
     69c:	60 92 a4 01 	sts	0x01A4, r6	; 0x8001a4 <ZUMO+0x6>
     6a0:	70 92 a5 01 	sts	0x01A5, r7	; 0x8001a5 <ZUMO+0x7>
     6a4:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <ZUMO+0x8>
     6a8:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <ZUMO+0x9>
     6ac:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <ZUMO+0xa>
     6b0:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <ZUMO+0xb>
     6b4:	e0 92 aa 01 	sts	0x01AA, r14	; 0x8001aa <ZUMO+0xc>
     6b8:	f0 92 ab 01 	sts	0x01AB, r15	; 0x8001ab <ZUMO+0xd>
     6bc:	00 93 ac 01 	sts	0x01AC, r16	; 0x8001ac <ZUMO+0xe>
     6c0:	10 93 ad 01 	sts	0x01AD, r17	; 0x8001ad <ZUMO+0xf>
     6c4:	a6 01       	movw	r20, r12
     6c6:	95 01       	movw	r18, r10
     6c8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__divsf3>
     6cc:	69 83       	std	Y+1, r22	; 0x01
     6ce:	7a 83       	std	Y+2, r23	; 0x02
     6d0:	8b 83       	std	Y+3, r24	; 0x03
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	a6 01       	movw	r20, r12
     6d6:	95 01       	movw	r18, r10
     6d8:	6d 81       	ldd	r22, Y+5	; 0x05
     6da:	7e 81       	ldd	r23, Y+6	; 0x06
     6dc:	8f 81       	ldd	r24, Y+7	; 0x07
     6de:	98 85       	ldd	r25, Y+8	; 0x08
     6e0:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     6e4:	a3 01       	movw	r20, r6
     6e6:	92 01       	movw	r18, r4
     6e8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     6ec:	29 81       	ldd	r18, Y+1	; 0x01
     6ee:	3a 81       	ldd	r19, Y+2	; 0x02
     6f0:	4b 81       	ldd	r20, Y+3	; 0x03
     6f2:	5c 81       	ldd	r21, Y+4	; 0x04
     6f4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     6f8:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <ZUMO+0x10>
     6fc:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <ZUMO+0x11>
     700:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <ZUMO+0x12>
     704:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <ZUMO+0x13>
     708:	77 fa       	bst	r7, 7
     70a:	70 94       	com	r7
     70c:	77 f8       	bld	r7, 7
     70e:	70 94       	com	r7
     710:	29 81       	ldd	r18, Y+1	; 0x01
     712:	3a 81       	ldd	r19, Y+2	; 0x02
     714:	4b 81       	ldd	r20, Y+3	; 0x03
     716:	5c 81       	ldd	r21, Y+4	; 0x04
     718:	ca 01       	movw	r24, r20
     71a:	b9 01       	movw	r22, r18
     71c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	c3 01       	movw	r24, r6
     726:	b2 01       	movw	r22, r4
     728:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     72c:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <ZUMO+0x14>
     730:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <ZUMO+0x15>
     734:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <ZUMO+0x16>
     738:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <ZUMO+0x17>
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	3a 81       	ldd	r19, Y+2	; 0x02
     740:	4b 81       	ldd	r20, Y+3	; 0x03
     742:	5c 81       	ldd	r21, Y+4	; 0x04
     744:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <ZUMO+0x18>
     748:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <ZUMO+0x19>
     74c:	40 93 b8 01 	sts	0x01B8, r20	; 0x8001b8 <ZUMO+0x1a>
     750:	50 93 b9 01 	sts	0x01B9, r21	; 0x8001b9 <ZUMO+0x1b>
     754:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <ZUMO+0x2c>
     758:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <ZUMO+0x2d>
     75c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <ZUMO+0x2e>
     760:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ZUMO+0x2f>
     764:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <ZUMO+0x30>
     768:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <ZUMO+0x31>
     76c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <ZUMO+0x32>
     770:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <ZUMO+0x33>
     774:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <ZUMO+0x34>
     778:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <ZUMO+0x35>
     77c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <ZUMO+0x36>
     780:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <ZUMO+0x37>
     784:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <ZUMO+0x24>
     788:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <ZUMO+0x25>
     78c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <ZUMO+0x26>
     790:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <ZUMO+0x27>
     794:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <ZUMO+0x28>
     798:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <ZUMO+0x29>
     79c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <ZUMO+0x2a>
     7a0:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <ZUMO+0x2b>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a6 e9       	ldi	r26, 0x96	; 150
     7aa:	b3 e4       	ldi	r27, 0x43	; 67
     7ac:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <ZUMO+0x1c>
     7b0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <ZUMO+0x1d>
     7b4:	a0 93 bc 01 	sts	0x01BC, r26	; 0x8001bc <ZUMO+0x1e>
     7b8:	b0 93 bd 01 	sts	0x01BD, r27	; 0x8001bd <ZUMO+0x1f>
     7bc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <ZUMO+0x20>
     7c0:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <ZUMO+0x21>
     7c4:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <ZUMO+0x22>
     7c8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ZUMO+0x23>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a4 e3       	ldi	r26, 0x34	; 52
     7d2:	b3 e4       	ldi	r27, 0x43	; 67
     7d4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <ZUMO+0x38>
     7d8:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <ZUMO+0x39>
     7dc:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <ZUMO+0x3a>
     7e0:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <ZUMO+0x3b>
     7e4:	0e ed       	ldi	r16, 0xDE	; 222
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	d8 01       	movw	r26, r16
     7ea:	1c 92       	st	X, r1
     7ec:	ee e9       	ldi	r30, 0x9E	; 158
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	a0 82       	st	Z, r10
     7f2:	b1 82       	std	Z+1, r11	; 0x01
     7f4:	c2 82       	std	Z+2, r12	; 0x02
     7f6:	d3 82       	std	Z+3, r13	; 0x03
     7f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ZUMO_Magnetometer>
     7fc:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <ZUMO+0x41>
     800:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <ZUMO+0x42>
     804:	40 91 e1 01 	lds	r20, 0x01E1	; 0x8001e1 <ZUMO+0x43>
     808:	50 91 e2 01 	lds	r21, 0x01E2	; 0x8001e2 <ZUMO+0x44>
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	84 e3       	ldi	r24, 0x34	; 52
     812:	93 e4       	ldi	r25, 0x43	; 67
     814:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     818:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <ZUMO+0x20>
     81c:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <ZUMO+0x21>
     820:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <ZUMO+0x22>
     824:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <ZUMO+0x23>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	d8 01       	movw	r26, r16
     82c:	8c 93       	st	X, r24
     82e:	28 96       	adiw	r28, 0x08	; 8
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	5f 90       	pop	r5
     854:	4f 90       	pop	r4
     856:	08 95       	ret

00000858 <ZUMO_PID>:
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ce e9       	ldi	r28, 0x9E	; 158
     876:	d1 e0       	ldi	r29, 0x01	; 1
     878:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <ZUMO+0x41>
     87c:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <ZUMO+0x42>
     880:	40 91 e1 01 	lds	r20, 0x01E1	; 0x8001e1 <ZUMO+0x43>
     884:	50 91 e2 01 	lds	r21, 0x01E2	; 0x8001e2 <ZUMO+0x44>
     888:	68 ad       	ldd	r22, Y+56	; 0x38
     88a:	79 ad       	ldd	r23, Y+57	; 0x39
     88c:	8a ad       	ldd	r24, Y+58	; 0x3a
     88e:	9b ad       	ldd	r25, Y+59	; 0x3b
     890:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
     898:	6c a7       	std	Y+44, r22	; 0x2c
     89a:	7d a7       	std	Y+45, r23	; 0x2d
     89c:	8e a7       	std	Y+46, r24	; 0x2e
     89e:	9f a7       	std	Y+47, r25	; 0x2f
     8a0:	28 89       	ldd	r18, Y+16	; 0x10
     8a2:	39 89       	ldd	r19, Y+17	; 0x11
     8a4:	4a 89       	ldd	r20, Y+18	; 0x12
     8a6:	5b 89       	ldd	r21, Y+19	; 0x13
     8a8:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     8ac:	28 a5       	ldd	r18, Y+40	; 0x28
     8ae:	39 a5       	ldd	r19, Y+41	; 0x29
     8b0:	4a a5       	ldd	r20, Y+42	; 0x2a
     8b2:	5b a5       	ldd	r21, Y+43	; 0x2b
     8b4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     8b8:	4b 01       	movw	r8, r22
     8ba:	5c 01       	movw	r10, r24
     8bc:	28 a9       	ldd	r18, Y+48	; 0x30
     8be:	39 a9       	ldd	r19, Y+49	; 0x31
     8c0:	4a a9       	ldd	r20, Y+50	; 0x32
     8c2:	5b a9       	ldd	r21, Y+51	; 0x33
     8c4:	6c 89       	ldd	r22, Y+20	; 0x14
     8c6:	7d 89       	ldd	r23, Y+21	; 0x15
     8c8:	8e 89       	ldd	r24, Y+22	; 0x16
     8ca:	9f 89       	ldd	r25, Y+23	; 0x17
     8cc:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	c5 01       	movw	r24, r10
     8d6:	b4 01       	movw	r22, r8
     8d8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
     8e0:	2c a9       	ldd	r18, Y+52	; 0x34
     8e2:	3d a9       	ldd	r19, Y+53	; 0x35
     8e4:	4e a9       	ldd	r20, Y+54	; 0x36
     8e6:	5f a9       	ldd	r21, Y+55	; 0x37
     8e8:	68 8d       	ldd	r22, Y+24	; 0x18
     8ea:	79 8d       	ldd	r23, Y+25	; 0x19
     8ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8f0:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	c5 01       	movw	r24, r10
     8fa:	b4 01       	movw	r22, r8
     8fc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     900:	2b 01       	movw	r4, r22
     902:	3c 01       	movw	r6, r24
     904:	6c a3       	std	Y+36, r22	; 0x24
     906:	7d a3       	std	Y+37, r23	; 0x25
     908:	8e a3       	std	Y+38, r24	; 0x26
     90a:	9f a3       	std	Y+39, r25	; 0x27
     90c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     90e:	9d 8c       	ldd	r9, Y+29	; 0x1d
     910:	ae 8c       	ldd	r10, Y+30	; 0x1e
     912:	bf 8c       	ldd	r11, Y+31	; 0x1f
     914:	a5 01       	movw	r20, r10
     916:	94 01       	movw	r18, r8
     918:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     91c:	18 16       	cp	r1, r24
     91e:	4c f4       	brge	.+18     	; 0x932 <__stack+0x33>
     920:	80 92 c2 01 	sts	0x01C2, r8	; 0x8001c2 <ZUMO+0x24>
     924:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <ZUMO+0x25>
     928:	a0 92 c4 01 	sts	0x01C4, r10	; 0x8001c4 <ZUMO+0x26>
     92c:	b0 92 c5 01 	sts	0x01C5, r11	; 0x8001c5 <ZUMO+0x27>
     930:	14 c0       	rjmp	.+40     	; 0x95a <__stack+0x5b>
     932:	b7 fa       	bst	r11, 7
     934:	b0 94       	com	r11
     936:	b7 f8       	bld	r11, 7
     938:	b0 94       	com	r11
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     946:	88 23       	and	r24, r24
     948:	44 f4       	brge	.+16     	; 0x95a <__stack+0x5b>
     94a:	80 92 c2 01 	sts	0x01C2, r8	; 0x8001c2 <ZUMO+0x24>
     94e:	90 92 c3 01 	sts	0x01C3, r9	; 0x8001c3 <ZUMO+0x25>
     952:	a0 92 c4 01 	sts	0x01C4, r10	; 0x8001c4 <ZUMO+0x26>
     956:	b0 92 c5 01 	sts	0x01C5, r11	; 0x8001c5 <ZUMO+0x27>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     968:	88 23       	and	r24, r24
     96a:	6c f0       	brlt	.+26     	; 0x986 <__stack+0x87>
     96c:	5f 9a       	sbi	0x0b, 7	; 11
     96e:	28 98       	cbi	0x05, 0	; 5
     970:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <ZUMO+0x24>
     974:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <ZUMO+0x25>
     978:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ZUMO+0x26>
     97c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <ZUMO+0x27>
     980:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
     984:	1b c0       	rjmp	.+54     	; 0x9bc <__stack+0xbd>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	a9 01       	movw	r20, r18
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	84 f4       	brge	.+32     	; 0x9b8 <__stack+0xb9>
     998:	28 9a       	sbi	0x05, 0	; 5
     99a:	5f 98       	cbi	0x0b, 7	; 11
     99c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <ZUMO+0x24>
     9a0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <ZUMO+0x25>
     9a4:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <ZUMO+0x26>
     9a8:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <ZUMO+0x27>
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	90 58       	subi	r25, 0x80	; 128
     9b2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	cb 01       	movw	r24, r22
     9be:	80 5b       	subi	r24, 0xB0	; 176
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	bc 01       	movw	r22, r24
     9c4:	0e 94 2e 01 	call	0x25c	; 0x25c <ZUMO_Motor>
     9c8:	ee e9       	ldi	r30, 0x9E	; 158
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	84 a1       	ldd	r24, Z+36	; 0x24
     9ce:	95 a1       	ldd	r25, Z+37	; 0x25
     9d0:	a6 a1       	ldd	r26, Z+38	; 0x26
     9d2:	b7 a1       	ldd	r27, Z+39	; 0x27
     9d4:	80 a7       	std	Z+40, r24	; 0x28
     9d6:	91 a7       	std	Z+41, r25	; 0x29
     9d8:	a2 a7       	std	Z+42, r26	; 0x2a
     9da:	b3 a7       	std	Z+43, r27	; 0x2b
     9dc:	80 a9       	ldd	r24, Z+48	; 0x30
     9de:	91 a9       	ldd	r25, Z+49	; 0x31
     9e0:	a2 a9       	ldd	r26, Z+50	; 0x32
     9e2:	b3 a9       	ldd	r27, Z+51	; 0x33
     9e4:	84 ab       	std	Z+52, r24	; 0x34
     9e6:	95 ab       	std	Z+53, r25	; 0x35
     9e8:	a6 ab       	std	Z+54, r26	; 0x36
     9ea:	b7 ab       	std	Z+55, r27	; 0x37
     9ec:	84 a5       	ldd	r24, Z+44	; 0x2c
     9ee:	95 a5       	ldd	r25, Z+45	; 0x2d
     9f0:	a6 a5       	ldd	r26, Z+46	; 0x2e
     9f2:	b7 a5       	ldd	r27, Z+47	; 0x2f
     9f4:	80 ab       	std	Z+48, r24	; 0x30
     9f6:	91 ab       	std	Z+49, r25	; 0x31
     9f8:	a2 ab       	std	Z+50, r26	; 0x32
     9fa:	b3 ab       	std	Z+51, r27	; 0x33
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	08 95       	ret

00000a1a <ZUMO_Magnetometer_Calibrate>:
void ZUMO_Magnetometer_Calibrate()
{
     a1a:	2f 92       	push	r2
     a1c:	3f 92       	push	r3
     a1e:	4f 92       	push	r4
     a20:	5f 92       	push	r5
     a22:	6f 92       	push	r6
     a24:	7f 92       	push	r7
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	OFF_Motors;
     a3c:	c1 e8       	ldi	r28, 0x81	; 129
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	88 81       	ld	r24, Y
     a42:	8e 7f       	andi	r24, 0xFE	; 254
     a44:	88 83       	st	Y, r24
	ForWard_L;
     a46:	28 98       	cbi	0x05, 0	; 5
	BackWard_R;
     a48:	5f 9a       	sbi	0x0b, 7	; 11
	ZUMO_Motor(200,200);
     a4a:	68 ec       	ldi	r22, 0xC8	; 200
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	88 ec       	ldi	r24, 0xC8	; 200
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 2e 01 	call	0x25c	; 0x25c <ZUMO_Motor>
	ZUMO_Magnetometer();
     a56:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ZUMO_Magnetometer>
	ZUMO.IMU.Min_Mx=ZUMO.IMU.M_x;
     a5a:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <ZUMO+0x61>
     a5e:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <ZUMO+0x62>
     a62:	07 2e       	mov	r0, r23
     a64:	00 0c       	add	r0, r0
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     a6e:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <ZUMO+0x93>
     a72:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <ZUMO+0x94>
     a76:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ZUMO+0x95>
     a7a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ZUMO+0x96>
	ZUMO.IMU.Max_Mx=ZUMO.IMU.M_x;
     a7e:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <ZUMO+0x97>
     a82:	70 93 36 02 	sts	0x0236, r23	; 0x800236 <ZUMO+0x98>
     a86:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <ZUMO+0x99>
     a8a:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <ZUMO+0x9a>
	ZUMO.IMU.Min_My=ZUMO.IMU.M_y;
     a8e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <ZUMO+0x63>
     a92:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <ZUMO+0x64>
     a96:	07 2e       	mov	r0, r23
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     aa2:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <ZUMO+0x9b>
     aa6:	70 93 3a 02 	sts	0x023A, r23	; 0x80023a <ZUMO+0x9c>
     aaa:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <ZUMO+0x9d>
     aae:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <ZUMO+0x9e>
	ZUMO.IMU.Max_My=ZUMO.IMU.M_y;
     ab2:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <ZUMO+0x9f>
     ab6:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <ZUMO+0xa0>
     aba:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <ZUMO+0xa1>
     abe:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <ZUMO+0xa2>
	ON_Motors;
     ac2:	88 81       	ld	r24, Y
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	88 83       	st	Y, r24
     ac8:	0f 2e       	mov	r0, r31
     aca:	f4 e6       	ldi	r31, 0x64	; 100
     acc:	9f 2e       	mov	r9, r31
     ace:	f0 2d       	mov	r31, r0
	for(uint8_t i=0;i<100;i++)
	{
		ZUMO_Magnetometer();
		if(ZUMO.IMU.M_x>=ZUMO.IMU.Max_Mx)
     ad0:	0f 2e       	mov	r0, r31
     ad2:	ff ef       	ldi	r31, 0xFF	; 255
     ad4:	cf 2e       	mov	r12, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	df 2e       	mov	r13, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	05 e3       	ldi	r16, 0x35	; 53
     ade:	12 e0       	ldi	r17, 0x02	; 2
		{
			ZUMO.IMU.Max_Mx=ZUMO.IMU.M_x;
		}
		else if (ZUMO.IMU.M_x<ZUMO.IMU.Min_Mx)
     ae0:	0f 2e       	mov	r0, r31
     ae2:	f1 e3       	ldi	r31, 0x31	; 49
     ae4:	af 2e       	mov	r10, r31
     ae6:	f2 e0       	ldi	r31, 0x02	; 2
     ae8:	bf 2e       	mov	r11, r31
     aea:	f0 2d       	mov	r31, r0
		{
			ZUMO.IMU.Min_Mx=ZUMO.IMU.M_x;
		}
			
		if(ZUMO.IMU.M_y>=ZUMO.IMU.Max_My)
     aec:	0f 2e       	mov	r0, r31
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	ef 2e       	mov	r14, r31
     af2:	f2 e0       	ldi	r31, 0x02	; 2
     af4:	ff 2e       	mov	r15, r31
     af6:	f0 2d       	mov	r31, r0
     af8:	cd e3       	ldi	r28, 0x3D	; 61
     afa:	d2 e0       	ldi	r29, 0x02	; 2
		{
			ZUMO.IMU.Max_My=ZUMO.IMU.M_y;
		}
		else if (ZUMO.IMU.M_y<ZUMO.IMU.Min_My)
     afc:	0f 2e       	mov	r0, r31
     afe:	f9 e3       	ldi	r31, 0x39	; 57
     b00:	2f 2e       	mov	r2, r31
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	3f 2e       	mov	r3, r31
     b06:	f0 2d       	mov	r31, r0
	ZUMO.IMU.Min_My=ZUMO.IMU.M_y;
	ZUMO.IMU.Max_My=ZUMO.IMU.M_y;
	ON_Motors;
	for(uint8_t i=0;i<100;i++)
	{
		ZUMO_Magnetometer();
     b08:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ZUMO_Magnetometer>
		if(ZUMO.IMU.M_x>=ZUMO.IMU.Max_Mx)
     b0c:	f6 01       	movw	r30, r12
     b0e:	60 81       	ld	r22, Z
     b10:	71 81       	ldd	r23, Z+1	; 0x01
     b12:	07 2e       	mov	r0, r23
     b14:	00 0c       	add	r0, r0
     b16:	88 0b       	sbc	r24, r24
     b18:	99 0b       	sbc	r25, r25
     b1a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     b1e:	2b 01       	movw	r4, r22
     b20:	3c 01       	movw	r6, r24
     b22:	f8 01       	movw	r30, r16
     b24:	20 81       	ld	r18, Z
     b26:	31 81       	ldd	r19, Z+1	; 0x01
     b28:	42 81       	ldd	r20, Z+2	; 0x02
     b2a:	53 81       	ldd	r21, Z+3	; 0x03
     b2c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     b30:	88 23       	and	r24, r24
     b32:	34 f0       	brlt	.+12     	; 0xb40 <ZUMO_Magnetometer_Calibrate+0x126>
		{
			ZUMO.IMU.Max_Mx=ZUMO.IMU.M_x;
     b34:	f8 01       	movw	r30, r16
     b36:	40 82       	st	Z, r4
     b38:	51 82       	std	Z+1, r5	; 0x01
     b3a:	62 82       	std	Z+2, r6	; 0x02
     b3c:	73 82       	std	Z+3, r7	; 0x03
     b3e:	10 c0       	rjmp	.+32     	; 0xb60 <ZUMO_Magnetometer_Calibrate+0x146>
		}
		else if (ZUMO.IMU.M_x<ZUMO.IMU.Min_Mx)
     b40:	f5 01       	movw	r30, r10
     b42:	20 81       	ld	r18, Z
     b44:	31 81       	ldd	r19, Z+1	; 0x01
     b46:	42 81       	ldd	r20, Z+2	; 0x02
     b48:	53 81       	ldd	r21, Z+3	; 0x03
     b4a:	c3 01       	movw	r24, r6
     b4c:	b2 01       	movw	r22, r4
     b4e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     b52:	88 23       	and	r24, r24
     b54:	2c f4       	brge	.+10     	; 0xb60 <ZUMO_Magnetometer_Calibrate+0x146>
		{
			ZUMO.IMU.Min_Mx=ZUMO.IMU.M_x;
     b56:	f5 01       	movw	r30, r10
     b58:	40 82       	st	Z, r4
     b5a:	51 82       	std	Z+1, r5	; 0x01
     b5c:	62 82       	std	Z+2, r6	; 0x02
     b5e:	73 82       	std	Z+3, r7	; 0x03
		}
			
		if(ZUMO.IMU.M_y>=ZUMO.IMU.Max_My)
     b60:	f7 01       	movw	r30, r14
     b62:	60 81       	ld	r22, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	07 2e       	mov	r0, r23
     b68:	00 0c       	add	r0, r0
     b6a:	88 0b       	sbc	r24, r24
     b6c:	99 0b       	sbc	r25, r25
     b6e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     b72:	2b 01       	movw	r4, r22
     b74:	3c 01       	movw	r6, r24
     b76:	28 81       	ld	r18, Y
     b78:	39 81       	ldd	r19, Y+1	; 0x01
     b7a:	4a 81       	ldd	r20, Y+2	; 0x02
     b7c:	5b 81       	ldd	r21, Y+3	; 0x03
     b7e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__gesf2>
     b82:	88 23       	and	r24, r24
     b84:	2c f0       	brlt	.+10     	; 0xb90 <ZUMO_Magnetometer_Calibrate+0x176>
		{
			ZUMO.IMU.Max_My=ZUMO.IMU.M_y;
     b86:	48 82       	st	Y, r4
     b88:	59 82       	std	Y+1, r5	; 0x01
     b8a:	6a 82       	std	Y+2, r6	; 0x02
     b8c:	7b 82       	std	Y+3, r7	; 0x03
     b8e:	10 c0       	rjmp	.+32     	; 0xbb0 <ZUMO_Magnetometer_Calibrate+0x196>
		}
		else if (ZUMO.IMU.M_y<ZUMO.IMU.Min_My)
     b90:	f1 01       	movw	r30, r2
     b92:	20 81       	ld	r18, Z
     b94:	31 81       	ldd	r19, Z+1	; 0x01
     b96:	42 81       	ldd	r20, Z+2	; 0x02
     b98:	53 81       	ldd	r21, Z+3	; 0x03
     b9a:	c3 01       	movw	r24, r6
     b9c:	b2 01       	movw	r22, r4
     b9e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <ZUMO_Magnetometer_Calibrate+0x196>
		{
			ZUMO.IMU.Min_My=ZUMO.IMU.M_y;
     ba6:	f1 01       	movw	r30, r2
     ba8:	40 82       	st	Z, r4
     baa:	51 82       	std	Z+1, r5	; 0x01
     bac:	62 82       	std	Z+2, r6	; 0x02
     bae:	73 82       	std	Z+3, r7	; 0x03
     bb0:	ff ef       	ldi	r31, 0xFF	; 255
     bb2:	21 ee       	ldi	r18, 0xE1	; 225
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	f1 50       	subi	r31, 0x01	; 1
     bb8:	20 40       	sbci	r18, 0x00	; 0
     bba:	80 40       	sbci	r24, 0x00	; 0
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <ZUMO_Magnetometer_Calibrate+0x19c>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <ZUMO_Magnetometer_Calibrate+0x1a6>
     bc0:	00 00       	nop
     bc2:	9a 94       	dec	r9
	ZUMO.IMU.Min_Mx=ZUMO.IMU.M_x;
	ZUMO.IMU.Max_Mx=ZUMO.IMU.M_x;
	ZUMO.IMU.Min_My=ZUMO.IMU.M_y;
	ZUMO.IMU.Max_My=ZUMO.IMU.M_y;
	ON_Motors;
	for(uint8_t i=0;i<100;i++)
     bc4:	91 10       	cpse	r9, r1
     bc6:	a0 cf       	rjmp	.-192    	; 0xb08 <ZUMO_Magnetometer_Calibrate+0xee>
		{
			ZUMO.IMU.Min_My=ZUMO.IMU.M_y;
		}
		_delay_ms(100);
	}
	ZUMO.IMU.Alpha	=(ZUMO.IMU.Max_Mx+ZUMO.IMU.Min_Mx)/2;
     bc8:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <ZUMO+0x93>
     bcc:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <ZUMO+0x94>
     bd0:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <ZUMO+0x95>
     bd4:	50 91 34 02 	lds	r21, 0x0234	; 0x800234 <ZUMO+0x96>
     bd8:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <ZUMO+0x97>
     bdc:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <ZUMO+0x98>
     be0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <ZUMO+0x99>
     be4:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <ZUMO+0x9a>
     be8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     bf8:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <ZUMO+0x8b>
     bfc:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <ZUMO+0x8c>
     c00:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ZUMO+0x8d>
     c04:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <ZUMO+0x8e>
	ZUMO.IMU.Beta	=(ZUMO.IMU.Max_My+ZUMO.IMU.Min_My)/2;
     c08:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <ZUMO+0x9b>
     c0c:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <ZUMO+0x9c>
     c10:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <ZUMO+0x9d>
     c14:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <ZUMO+0x9e>
     c18:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <ZUMO+0x9f>
     c1c:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <ZUMO+0xa0>
     c20:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <ZUMO+0xa1>
     c24:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <ZUMO+0xa2>
     c28:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__addsf3>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
     c38:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <ZUMO+0x8f>
     c3c:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <ZUMO+0x90>
     c40:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <ZUMO+0x91>
     c44:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <ZUMO+0x92>
	OFF_Motors;	
     c48:	e1 e8       	ldi	r30, 0x81	; 129
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8e 7f       	andi	r24, 0xFE	; 254
     c50:	80 83       	st	Z, r24
	ZUMO_Motor(0,0);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 2e 01 	call	0x25c	; 0x25c <ZUMO_Motor>
	ForWard_L;
     c5e:	28 98       	cbi	0x05, 0	; 5
	ForWard_R;
     c60:	5f 98       	cbi	0x0b, 7	; 11
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	7f 90       	pop	r7
     c7a:	6f 90       	pop	r6
     c7c:	5f 90       	pop	r5
     c7e:	4f 90       	pop	r4
     c80:	3f 90       	pop	r3
     c82:	2f 90       	pop	r2
     c84:	08 95       	ret

00000c86 <ZUMO_QTR_Calibrate>:
void ZUMO_QTR_Calibrate(uint8_t Sample)
{
     c86:	2f 92       	push	r2
     c88:	3f 92       	push	r3
     c8a:	4f 92       	push	r4
     c8c:	5f 92       	push	r5
     c8e:	6f 92       	push	r6
     c90:	7f 92       	push	r7
     c92:	8f 92       	push	r8
     c94:	9f 92       	push	r9
     c96:	af 92       	push	r10
     c98:	bf 92       	push	r11
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	48 2e       	mov	r4, r24
	uint8_t True=0;
	uint8_t Pa,Pb,Pc,Pd,Pe,Pf;
	for (uint8_t s=0;s<Sample;s++)
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <ZUMO_QTR_Calibrate+0x2c>
     cb0:	c4 c0       	rjmp	.+392    	; 0xe3a <ZUMO_QTR_Calibrate+0x1b4>
     cb2:	81 2c       	mov	r8, r1
     cb4:	31 2c       	mov	r3, r1
	{
	//////////////////////////
	ON_QTR;
	ZUMO.QTR.Counter=0;
     cb6:	e3 e7       	ldi	r30, 0x73	; 115
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
	Pa=0;
	Pb=0;
	Pc=0;
	Pd=0;
	Pe=0;
	Pf=0;
     cba:	51 2c       	mov	r5, r1
	{
		ZUMO.QTR.Counter++;
		
		if ((!(PIND&(1<<PIND4)))&&(Pa==0))
		{
			ZUMO.QTR.Dump[0]=ZUMO.QTR.Counter;
     cbc:	65 e6       	ldi	r22, 0x65	; 101
     cbe:	72 e0       	ldi	r23, 0x02	; 2
			Pa=1;
		}
		if ((!(PINC&(1<<PINC3)))&&(Pb==0))
		{
			ZUMO.QTR.Dump[1]=ZUMO.QTR.Counter;
     cc0:	47 e6       	ldi	r20, 0x67	; 103
     cc2:	52 e0       	ldi	r21, 0x02	; 2
			Pb=1;
		}
		if ((!(PINB&(1<<PINB3)))&&(Pc==0))
		{
			ZUMO.QTR.Dump[2]=ZUMO.QTR.Counter;
     cc4:	29 e6       	ldi	r18, 0x69	; 105
     cc6:	32 e0       	ldi	r19, 0x02	; 2
			Pc=1;
		}
		if ((!(PINC&(1<<PINC0)))&&(Pd==0))
		{
			ZUMO.QTR.Dump[3]=ZUMO.QTR.Counter;
     cc8:	8b e6       	ldi	r24, 0x6B	; 107
     cca:	92 e0       	ldi	r25, 0x02	; 2
			Pd=1;
		}
		if ((!(PINC&(1<<PINC2)))&&(Pe==0))
		{
			ZUMO.QTR.Dump[4]=ZUMO.QTR.Counter;
     ccc:	cd e6       	ldi	r28, 0x6D	; 109
     cce:	d2 e0       	ldi	r29, 0x02	; 2
		ZUMO.QTR.Counter++;
		
		if ((!(PIND&(1<<PIND4)))&&(Pa==0))
		{
			ZUMO.QTR.Dump[0]=ZUMO.QTR.Counter;
			Pa=1;
     cd0:	99 24       	eor	r9, r9
     cd2:	93 94       	inc	r9
     cd4:	0f 2e       	mov	r0, r31
     cd6:	f9 e5       	ldi	r31, 0x59	; 89
     cd8:	af 2e       	mov	r10, r31
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	bf 2e       	mov	r11, r31
     cde:	f0 2d       	mov	r31, r0
	uint8_t True=0;
	uint8_t Pa,Pb,Pc,Pd,Pe,Pf;
	for (uint8_t s=0;s<Sample;s++)
	{
	//////////////////////////
	ON_QTR;
     ce0:	5a 9a       	sbi	0x0b, 2	; 11
	ZUMO.QTR.Counter=0;
     ce2:	11 82       	std	Z+1, r1	; 0x01
     ce4:	10 82       	st	Z, r1
	Pc=0;
	Pd=0;
	Pe=0;
	Pf=0;

	DDRD	|=	(1<<DDD4)|(1<<DDD5);
     ce6:	1a b1       	in	r17, 0x0a	; 10
     ce8:	10 63       	ori	r17, 0x30	; 48
     cea:	1a b9       	out	0x0a, r17	; 10
	DDRC	|=	(1<<DDC3)|(1<<DDC0)|(1<<DDC2);
     cec:	17 b1       	in	r17, 0x07	; 7
     cee:	1d 60       	ori	r17, 0x0D	; 13
     cf0:	17 b9       	out	0x07, r17	; 7
	DDRB	|=	(1<<DDB3);
     cf2:	23 9a       	sbi	0x04, 3	; 4
	
	PORTD	|=	(1<<PORTD4)|(1<<PORTD5);
     cf4:	1b b1       	in	r17, 0x0b	; 11
     cf6:	10 63       	ori	r17, 0x30	; 48
     cf8:	1b b9       	out	0x0b, r17	; 11
	PORTC	|=	(1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2);
     cfa:	18 b1       	in	r17, 0x08	; 8
     cfc:	1d 60       	ori	r17, 0x0D	; 13
     cfe:	18 b9       	out	0x08, r17	; 8
	PORTB	|=	(1<<PORTB3);
     d00:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d02:	15 e3       	ldi	r17, 0x35	; 53
     d04:	1a 95       	dec	r17
     d06:	f1 f7       	brne	.-4      	; 0xd04 <ZUMO_QTR_Calibrate+0x7e>
     d08:	00 00       	nop
	
	_delay_us(10);
	
	DDRD	&=~	((1<<DDD4)|(1<<DDD5));
     d0a:	1a b1       	in	r17, 0x0a	; 10
     d0c:	1f 7c       	andi	r17, 0xCF	; 207
     d0e:	1a b9       	out	0x0a, r17	; 10
	DDRC	&=~	((1<<DDC3)|(1<<DDC0)|(1<<DDC2));
     d10:	17 b1       	in	r17, 0x07	; 7
     d12:	12 7f       	andi	r17, 0xF2	; 242
     d14:	17 b9       	out	0x07, r17	; 7
	DDRB	&=~	(1<<DDB3);
     d16:	23 98       	cbi	0x04, 3	; 4
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
     d18:	1b b1       	in	r17, 0x0b	; 11
     d1a:	1f 7c       	andi	r17, 0xCF	; 207
     d1c:	1b b9       	out	0x0b, r17	; 11
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
     d1e:	18 b1       	in	r17, 0x08	; 8
     d20:	12 7f       	andi	r17, 0xF2	; 242
     d22:	18 b9       	out	0x08, r17	; 8
	PORTB	&=~	(1<<PORTB3);
     d24:	2b 98       	cbi	0x05, 3	; 5
	Pa=0;
	Pb=0;
	Pc=0;
	Pd=0;
	Pe=0;
	Pf=0;
     d26:	65 2c       	mov	r6, r5
	ZUMO.QTR.Counter=0;
	Pa=0;
	Pb=0;
	Pc=0;
	Pd=0;
	Pe=0;
     d28:	75 2c       	mov	r7, r5
	ON_QTR;
	ZUMO.QTR.Counter=0;
	Pa=0;
	Pb=0;
	Pc=0;
	Pd=0;
     d2a:	c5 2c       	mov	r12, r5
	//////////////////////////
	ON_QTR;
	ZUMO.QTR.Counter=0;
	Pa=0;
	Pb=0;
	Pc=0;
     d2c:	d5 2c       	mov	r13, r5
	{
	//////////////////////////
	ON_QTR;
	ZUMO.QTR.Counter=0;
	Pa=0;
	Pb=0;
     d2e:	e5 2c       	mov	r14, r5
	for (uint8_t s=0;s<Sample;s++)
	{
	//////////////////////////
	ON_QTR;
	ZUMO.QTR.Counter=0;
	Pa=0;
     d30:	f5 2c       	mov	r15, r5
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pa==0 || Pb==0 || Pc==0 || Pd==0 || Pe==0 || Pf==0 )
     d32:	2c c0       	rjmp	.+88     	; 0xd8c <ZUMO_QTR_Calibrate+0x106>
	{
		ZUMO.QTR.Counter++;
		
		if ((!(PIND&(1<<PIND4)))&&(Pa==0))
		{
			ZUMO.QTR.Dump[0]=ZUMO.QTR.Counter;
     d34:	db 01       	movw	r26, r22
     d36:	0d 93       	st	X+, r16
     d38:	1c 93       	st	X, r17
			Pa=1;
     d3a:	f9 2c       	mov	r15, r9
		}
		if ((!(PINC&(1<<PINC3)))&&(Pb==0))
     d3c:	33 99       	sbic	0x06, 3	; 6
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <ZUMO_QTR_Calibrate+0xc6>
     d40:	e1 10       	cpse	r14, r1
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <ZUMO_QTR_Calibrate+0xc6>
		{
			ZUMO.QTR.Dump[1]=ZUMO.QTR.Counter;
     d44:	da 01       	movw	r26, r20
     d46:	0d 93       	st	X+, r16
     d48:	1c 93       	st	X, r17
			Pb=1;
     d4a:	e9 2c       	mov	r14, r9
		}
		if ((!(PINB&(1<<PINB3)))&&(Pc==0))
     d4c:	1b 99       	sbic	0x03, 3	; 3
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <ZUMO_QTR_Calibrate+0xd6>
     d50:	d1 10       	cpse	r13, r1
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <ZUMO_QTR_Calibrate+0xd6>
		{
			ZUMO.QTR.Dump[2]=ZUMO.QTR.Counter;
     d54:	d9 01       	movw	r26, r18
     d56:	0d 93       	st	X+, r16
     d58:	1c 93       	st	X, r17
			Pc=1;
     d5a:	d9 2c       	mov	r13, r9
		}
		if ((!(PINC&(1<<PINC0)))&&(Pd==0))
     d5c:	30 99       	sbic	0x06, 0	; 6
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <ZUMO_QTR_Calibrate+0xe6>
     d60:	c1 10       	cpse	r12, r1
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <ZUMO_QTR_Calibrate+0xe6>
		{
			ZUMO.QTR.Dump[3]=ZUMO.QTR.Counter;
     d64:	dc 01       	movw	r26, r24
     d66:	0d 93       	st	X+, r16
     d68:	1c 93       	st	X, r17
			Pd=1;
     d6a:	c9 2c       	mov	r12, r9
		}
		if ((!(PINC&(1<<PINC2)))&&(Pe==0))
     d6c:	32 99       	sbic	0x06, 2	; 6
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <ZUMO_QTR_Calibrate+0xf4>
     d70:	71 10       	cpse	r7, r1
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <ZUMO_QTR_Calibrate+0xf4>
		{
			ZUMO.QTR.Dump[4]=ZUMO.QTR.Counter;
     d74:	19 83       	std	Y+1, r17	; 0x01
     d76:	08 83       	st	Y, r16
			Pe=1;
     d78:	79 2c       	mov	r7, r9
		}
		if ((!(PIND&(1<<PIND5)))&&(Pf==0))
     d7a:	4d 99       	sbic	0x09, 5	; 9
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <ZUMO_QTR_Calibrate+0x106>
     d7e:	61 10       	cpse	r6, r1
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <ZUMO_QTR_Calibrate+0x106>
		{
			ZUMO.QTR.Dump[5]=ZUMO.QTR.Counter;
     d82:	af e6       	ldi	r26, 0x6F	; 111
     d84:	b2 e0       	ldi	r27, 0x02	; 2
     d86:	0d 93       	st	X+, r16
     d88:	1c 93       	st	X, r17
			Pf=1;
     d8a:	69 2c       	mov	r6, r9
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pa==0 || Pb==0 || Pc==0 || Pd==0 || Pe==0 || Pf==0 )
     d8c:	ff 20       	and	r15, r15
     d8e:	09 f4       	brne	.+2      	; 0xd92 <ZUMO_QTR_Calibrate+0x10c>
     d90:	5e c0       	rjmp	.+188    	; 0xe4e <ZUMO_QTR_Calibrate+0x1c8>
     d92:	ee 20       	and	r14, r14
     d94:	09 f4       	brne	.+2      	; 0xd98 <ZUMO_QTR_Calibrate+0x112>
     d96:	53 c0       	rjmp	.+166    	; 0xe3e <ZUMO_QTR_Calibrate+0x1b8>
     d98:	dd 20       	and	r13, r13
     d9a:	09 f4       	brne	.+2      	; 0xd9e <ZUMO_QTR_Calibrate+0x118>
     d9c:	50 c0       	rjmp	.+160    	; 0xe3e <ZUMO_QTR_Calibrate+0x1b8>
     d9e:	cc 20       	and	r12, r12
     da0:	09 f4       	brne	.+2      	; 0xda4 <ZUMO_QTR_Calibrate+0x11e>
     da2:	4d c0       	rjmp	.+154    	; 0xe3e <ZUMO_QTR_Calibrate+0x1b8>
     da4:	77 20       	and	r7, r7
     da6:	09 f4       	brne	.+2      	; 0xdaa <ZUMO_QTR_Calibrate+0x124>
     da8:	4a c0       	rjmp	.+148    	; 0xe3e <ZUMO_QTR_Calibrate+0x1b8>
     daa:	66 20       	and	r6, r6
     dac:	09 f4       	brne	.+2      	; 0xdb0 <ZUMO_QTR_Calibrate+0x12a>
     dae:	47 c0       	rjmp	.+142    	; 0xe3e <ZUMO_QTR_Calibrate+0x1b8>
			ZUMO.QTR.Dump[5]=ZUMO.QTR.Counter;
			Pf=1;
		}
	}
	
	OFF_QTR;
     db0:	5a 98       	cbi	0x0b, 2	; 11
	//////////////////////////
	if (True==1)
     db2:	b1 e0       	ldi	r27, 0x01	; 1
     db4:	3b 12       	cpse	r3, r27
     db6:	22 c0       	rjmp	.+68     	; 0xdfc <ZUMO_QTR_Calibrate+0x176>
     db8:	0d e4       	ldi	r16, 0x4D	; 77
     dba:	12 e0       	ldi	r17, 0x02	; 2
		{
			for (uint8_t j=0;j<6;j++)
			{
				if (ZUMO.QTR.Dump[j] < ZUMO.QTR.Sensors_Min[j])
     dbc:	d8 01       	movw	r26, r16
     dbe:	58 96       	adiw	r26, 0x18	; 24
     dc0:	ed 90       	ld	r14, X+
     dc2:	fc 90       	ld	r15, X
     dc4:	59 97       	sbiw	r26, 0x19	; 25
     dc6:	1c 96       	adiw	r26, 0x0c	; 12
     dc8:	cd 90       	ld	r12, X+
     dca:	dc 90       	ld	r13, X
     dcc:	1d 97       	sbiw	r26, 0x0d	; 13
     dce:	ec 14       	cp	r14, r12
     dd0:	fd 04       	cpc	r15, r13
     dd2:	28 f4       	brcc	.+10     	; 0xdde <ZUMO_QTR_Calibrate+0x158>
					{
						ZUMO.QTR.Sensors_Min[j]=ZUMO.QTR.Dump[j];
     dd4:	1d 96       	adiw	r26, 0x0d	; 13
     dd6:	fc 92       	st	X, r15
     dd8:	ee 92       	st	-X, r14
     dda:	1c 97       	sbiw	r26, 0x0c	; 12
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <ZUMO_QTR_Calibrate+0x16a>
					}
				else if (ZUMO.QTR.Dump[j] >= ZUMO.QTR.Sensors_Max[j])
     dde:	d8 01       	movw	r26, r16
     de0:	cd 90       	ld	r12, X+
     de2:	dc 90       	ld	r13, X
     de4:	ec 14       	cp	r14, r12
     de6:	fd 04       	cpc	r15, r13
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <ZUMO_QTR_Calibrate+0x16a>
					{
						ZUMO.QTR.Sensors_Max[j]=ZUMO.QTR.Dump[j];
     dea:	d8 01       	movw	r26, r16
     dec:	ed 92       	st	X+, r14
     dee:	fc 92       	st	X, r15
     df0:	0e 5f       	subi	r16, 0xFE	; 254
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
	
	OFF_QTR;
	//////////////////////////
	if (True==1)
		{
			for (uint8_t j=0;j<6;j++)
     df4:	a0 16       	cp	r10, r16
     df6:	b1 06       	cpc	r11, r17
     df8:	09 f7       	brne	.-62     	; 0xdbc <ZUMO_QTR_Calibrate+0x136>
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <ZUMO_QTR_Calibrate+0x198>
     dfc:	0d e4       	ldi	r16, 0x4D	; 77
     dfe:	12 e0       	ldi	r17, 0x02	; 2
	else
		{
			True=1;
			for (uint8_t j=0;j<6;j++)
			{
				ZUMO.QTR.Sensors_Min[j]=ZUMO.QTR.Dump[j];
     e00:	d8 01       	movw	r26, r16
     e02:	58 96       	adiw	r26, 0x18	; 24
     e04:	ed 90       	ld	r14, X+
     e06:	fc 90       	ld	r15, X
     e08:	59 97       	sbiw	r26, 0x19	; 25
     e0a:	1d 96       	adiw	r26, 0x0d	; 13
     e0c:	fc 92       	st	X, r15
     e0e:	ee 92       	st	-X, r14
     e10:	1c 97       	sbiw	r26, 0x0c	; 12
				ZUMO.QTR.Sensors_Max[j]=ZUMO.QTR.Dump[j];
     e12:	ed 92       	st	X+, r14
     e14:	fd 92       	st	X+, r15
     e16:	8d 01       	movw	r16, r26
			}
		}
	else
		{
			True=1;
			for (uint8_t j=0;j<6;j++)
     e18:	aa 16       	cp	r10, r26
     e1a:	bb 06       	cpc	r11, r27
     e1c:	89 f7       	brne	.-30     	; 0xe00 <ZUMO_QTR_Calibrate+0x17a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1e:	bf ef       	ldi	r27, 0xFF	; 255
     e20:	13 ec       	ldi	r17, 0xC3	; 195
     e22:	a9 e0       	ldi	r26, 0x09	; 9
     e24:	b1 50       	subi	r27, 0x01	; 1
     e26:	10 40       	sbci	r17, 0x00	; 0
     e28:	a0 40       	sbci	r26, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <ZUMO_QTR_Calibrate+0x19e>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <ZUMO_QTR_Calibrate+0x1a8>
     e2e:	00 00       	nop
}
void ZUMO_QTR_Calibrate(uint8_t Sample)
{
	uint8_t True=0;
	uint8_t Pa,Pb,Pc,Pd,Pe,Pf;
	for (uint8_t s=0;s<Sample;s++)
     e30:	83 94       	inc	r8
     e32:	33 24       	eor	r3, r3
     e34:	33 94       	inc	r3
     e36:	48 10       	cpse	r4, r8
     e38:	53 cf       	rjmp	.-346    	; 0xce0 <ZUMO_QTR_Calibrate+0x5a>
				ZUMO.QTR.Sensors_Max[j]=ZUMO.QTR.Dump[j];
			}
		}
		_delay_ms(200);
	}
	OFF_QTR;
     e3a:	5a 98       	cbi	0x0b, 2	; 11
	
}
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <ZUMO_QTR_Calibrate+0x1da>
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pa==0 || Pb==0 || Pc==0 || Pd==0 || Pe==0 || Pf==0 )
	{
		ZUMO.QTR.Counter++;
     e3e:	00 81       	ld	r16, Z
     e40:	11 81       	ldd	r17, Z+1	; 0x01
     e42:	0f 5f       	subi	r16, 0xFF	; 255
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	11 83       	std	Z+1, r17	; 0x01
     e48:	00 83       	st	Z, r16
		
		if ((!(PIND&(1<<PIND4)))&&(Pa==0))
     e4a:	29 b0       	in	r2, 0x09	; 9
     e4c:	77 cf       	rjmp	.-274    	; 0xd3c <ZUMO_QTR_Calibrate+0xb6>
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pa==0 || Pb==0 || Pc==0 || Pd==0 || Pe==0 || Pf==0 )
	{
		ZUMO.QTR.Counter++;
     e4e:	00 81       	ld	r16, Z
     e50:	11 81       	ldd	r17, Z+1	; 0x01
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	11 83       	std	Z+1, r17	; 0x01
     e58:	00 83       	st	Z, r16
		
		if ((!(PIND&(1<<PIND4)))&&(Pa==0))
     e5a:	4c 99       	sbic	0x09, 4	; 9
     e5c:	6f cf       	rjmp	.-290    	; 0xd3c <ZUMO_QTR_Calibrate+0xb6>
     e5e:	6a cf       	rjmp	.-300    	; 0xd34 <ZUMO_QTR_Calibrate+0xae>
		}
		_delay_ms(200);
	}
	OFF_QTR;
	
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	6f 90       	pop	r6
     e7c:	5f 90       	pop	r5
     e7e:	4f 90       	pop	r4
     e80:	3f 90       	pop	r3
     e82:	2f 90       	pop	r2
     e84:	08 95       	ret

00000e86 <ZUMO_QTR_Sensors>:
void ZUMO_QTR_Sensors()
{
     e86:	4f 92       	push	r4
     e88:	5f 92       	push	r5
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <ZUMO_QTR_Sensors+0x22>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <ZUMO_QTR_Sensors+0x24>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <ZUMO_QTR_Sensors+0x26>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	/*    Codigo Mejorado	*/	
	ON_QTR;
     eb0:	5a 9a       	sbi	0x0b, 2	; 11
	ZUMO.QTR.Counter=0;
     eb2:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ZUMO+0xd6>
     eb6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ZUMO+0xd5>
	uint8_t Pos2=0;
	uint8_t Pos3=0;
	uint8_t Pos4=0;
	uint8_t Pos5=0;

	DDRD	|=	(1<<DDD4)|(1<<DDD5);
     eba:	8a b1       	in	r24, 0x0a	; 10
     ebc:	80 63       	ori	r24, 0x30	; 48
     ebe:	8a b9       	out	0x0a, r24	; 10
	DDRC	|=	(1<<DDC3)|(1<<DDC0)|(1<<DDC2);
     ec0:	87 b1       	in	r24, 0x07	; 7
     ec2:	8d 60       	ori	r24, 0x0D	; 13
     ec4:	87 b9       	out	0x07, r24	; 7
	DDRB	|=	(1<<DDB3);
     ec6:	23 9a       	sbi	0x04, 3	; 4
	
	PORTD	|=	(1<<PORTD4)|(1<<PORTD5);
     ec8:	8b b1       	in	r24, 0x0b	; 11
     eca:	80 63       	ori	r24, 0x30	; 48
     ecc:	8b b9       	out	0x0b, r24	; 11
	PORTC	|=	(1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2);
     ece:	88 b1       	in	r24, 0x08	; 8
     ed0:	8d 60       	ori	r24, 0x0D	; 13
     ed2:	88 b9       	out	0x08, r24	; 8
	PORTB	|=	(1<<PORTB3);
     ed4:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ed6:	85 e3       	ldi	r24, 0x35	; 53
     ed8:	8a 95       	dec	r24
     eda:	f1 f7       	brne	.-4      	; 0xed8 <ZUMO_QTR_Sensors+0x52>
     edc:	00 00       	nop
	
	_delay_us(10);
	
	DDRD	&=~	((1<<DDD4)|(1<<DDD5));
     ede:	8a b1       	in	r24, 0x0a	; 10
     ee0:	8f 7c       	andi	r24, 0xCF	; 207
     ee2:	8a b9       	out	0x0a, r24	; 10
	DDRC	&=~	((1<<DDC3)|(1<<DDC0)|(1<<DDC2));
     ee4:	87 b1       	in	r24, 0x07	; 7
     ee6:	82 7f       	andi	r24, 0xF2	; 242
     ee8:	87 b9       	out	0x07, r24	; 7
	DDRB	&=~	(1<<DDB3);
     eea:	23 98       	cbi	0x04, 3	; 4
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
     eec:	8b b1       	in	r24, 0x0b	; 11
     eee:	8f 7c       	andi	r24, 0xCF	; 207
     ef0:	8b b9       	out	0x0b, r24	; 11
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
     ef2:	88 b1       	in	r24, 0x08	; 8
     ef4:	82 7f       	andi	r24, 0xF2	; 242
     ef6:	88 b9       	out	0x08, r24	; 8
	PORTB	&=~	(1<<PORTB3);
     ef8:	2b 98       	cbi	0x05, 3	; 5
	uint8_t Pos0=0;
	uint8_t Pos1=0;
	uint8_t Pos2=0;
	uint8_t Pos3=0;
	uint8_t Pos4=0;
	uint8_t Pos5=0;
     efa:	91 2c       	mov	r9, r1
	ZUMO.QTR.Counter=0;
	uint8_t Pos0=0;
	uint8_t Pos1=0;
	uint8_t Pos2=0;
	uint8_t Pos3=0;
	uint8_t Pos4=0;
     efc:	a1 2c       	mov	r10, r1
	ON_QTR;
	ZUMO.QTR.Counter=0;
	uint8_t Pos0=0;
	uint8_t Pos1=0;
	uint8_t Pos2=0;
	uint8_t Pos3=0;
     efe:	b1 2c       	mov	r11, r1
	/*    Codigo Mejorado	*/	
	ON_QTR;
	ZUMO.QTR.Counter=0;
	uint8_t Pos0=0;
	uint8_t Pos1=0;
	uint8_t Pos2=0;
     f00:	c1 2c       	mov	r12, r1
{
	/*    Codigo Mejorado	*/	
	ON_QTR;
	ZUMO.QTR.Counter=0;
	uint8_t Pos0=0;
	uint8_t Pos1=0;
     f02:	d1 2c       	mov	r13, r1
void ZUMO_QTR_Sensors()
{
	/*    Codigo Mejorado	*/	
	ON_QTR;
	ZUMO.QTR.Counter=0;
	uint8_t Pos0=0;
     f04:	e1 2c       	mov	r14, r1
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pos0==0 || Pos1==0 || Pos2==0 || Pos3==0 || Pos4==0 || Pos5==0 )
	{
		ZUMO.QTR.Counter++;
     f06:	e3 e7       	ldi	r30, 0x73	; 115
     f08:	f2 e0       	ldi	r31, 0x02	; 2
		
		if ((!(PIND&(1<<PIND4)))&&(Pos0==0))
		{
			ZUMO.QTR.Sensors[0]=ZUMO.QTR.Counter;
     f0a:	01 e4       	ldi	r16, 0x41	; 65
     f0c:	12 e0       	ldi	r17, 0x02	; 2
			Pos0=1;
     f0e:	ff 24       	eor	r15, r15
     f10:	f3 94       	inc	r15
		}
		if ((!(PINC&(1<<PINC3)))&&(Pos1==0))
		{
			ZUMO.QTR.Sensors[1]=ZUMO.QTR.Counter;
     f12:	63 e4       	ldi	r22, 0x43	; 67
     f14:	72 e0       	ldi	r23, 0x02	; 2
			Pos1=1;
		}
		if ((!(PINB&(1<<PINB3)))&&(Pos2==0))
		{
			ZUMO.QTR.Sensors[2]=ZUMO.QTR.Counter;
     f16:	45 e4       	ldi	r20, 0x45	; 69
     f18:	52 e0       	ldi	r21, 0x02	; 2
			Pos2=1;
		}
		if ((!(PINC&(1<<PINC0)))&&(Pos3==0))
		{
			ZUMO.QTR.Sensors[3]=ZUMO.QTR.Counter;
     f1a:	27 e4       	ldi	r18, 0x47	; 71
     f1c:	32 e0       	ldi	r19, 0x02	; 2
			Pos3=1;
		}
		if ((!(PINC&(1<<PINC2)))&&(Pos4==0))
		{
			ZUMO.QTR.Sensors[4]=ZUMO.QTR.Counter;
     f1e:	0f 2e       	mov	r0, r31
     f20:	f9 e4       	ldi	r31, 0x49	; 73
     f22:	6f 2e       	mov	r6, r31
     f24:	f2 e0       	ldi	r31, 0x02	; 2
     f26:	7f 2e       	mov	r7, r31
     f28:	f0 2d       	mov	r31, r0
			Pos4=1;
		}
		if ((!(PIND&(1<<PIND5)))&&(Pos5==0))
		{
			ZUMO.QTR.Sensors[5]=ZUMO.QTR.Counter;
     f2a:	0f 2e       	mov	r0, r31
     f2c:	fb e4       	ldi	r31, 0x4B	; 75
     f2e:	4f 2e       	mov	r4, r31
     f30:	f2 e0       	ldi	r31, 0x02	; 2
     f32:	5f 2e       	mov	r5, r31
     f34:	f0 2d       	mov	r31, r0
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pos0==0 || Pos1==0 || Pos2==0 || Pos3==0 || Pos4==0 || Pos5==0 )
     f36:	2c c0       	rjmp	.+88     	; 0xf90 <ZUMO_QTR_Sensors+0x10a>
	{
		ZUMO.QTR.Counter++;
		
		if ((!(PIND&(1<<PIND4)))&&(Pos0==0))
		{
			ZUMO.QTR.Sensors[0]=ZUMO.QTR.Counter;
     f38:	d8 01       	movw	r26, r16
     f3a:	8d 93       	st	X+, r24
     f3c:	9c 93       	st	X, r25
			Pos0=1;
     f3e:	ef 2c       	mov	r14, r15
		}
		if ((!(PINC&(1<<PINC3)))&&(Pos1==0))
     f40:	33 99       	sbic	0x06, 3	; 6
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <ZUMO_QTR_Sensors+0xca>
     f44:	d1 10       	cpse	r13, r1
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <ZUMO_QTR_Sensors+0xca>
		{
			ZUMO.QTR.Sensors[1]=ZUMO.QTR.Counter;
     f48:	db 01       	movw	r26, r22
     f4a:	8d 93       	st	X+, r24
     f4c:	9c 93       	st	X, r25
			Pos1=1;
     f4e:	df 2c       	mov	r13, r15
		}
		if ((!(PINB&(1<<PINB3)))&&(Pos2==0))
     f50:	1b 99       	sbic	0x03, 3	; 3
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <ZUMO_QTR_Sensors+0xda>
     f54:	c1 10       	cpse	r12, r1
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <ZUMO_QTR_Sensors+0xda>
		{
			ZUMO.QTR.Sensors[2]=ZUMO.QTR.Counter;
     f58:	da 01       	movw	r26, r20
     f5a:	8d 93       	st	X+, r24
     f5c:	9c 93       	st	X, r25
			Pos2=1;
     f5e:	cf 2c       	mov	r12, r15
		}
		if ((!(PINC&(1<<PINC0)))&&(Pos3==0))
     f60:	30 99       	sbic	0x06, 0	; 6
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <ZUMO_QTR_Sensors+0xea>
     f64:	b1 10       	cpse	r11, r1
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <ZUMO_QTR_Sensors+0xea>
		{
			ZUMO.QTR.Sensors[3]=ZUMO.QTR.Counter;
     f68:	d9 01       	movw	r26, r18
     f6a:	8d 93       	st	X+, r24
     f6c:	9c 93       	st	X, r25
			Pos3=1;
     f6e:	bf 2c       	mov	r11, r15
		}
		if ((!(PINC&(1<<PINC2)))&&(Pos4==0))
     f70:	32 99       	sbic	0x06, 2	; 6
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <ZUMO_QTR_Sensors+0xfa>
     f74:	a1 10       	cpse	r10, r1
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <ZUMO_QTR_Sensors+0xfa>
		{
			ZUMO.QTR.Sensors[4]=ZUMO.QTR.Counter;
     f78:	d3 01       	movw	r26, r6
     f7a:	8d 93       	st	X+, r24
     f7c:	9c 93       	st	X, r25
			Pos4=1;
     f7e:	af 2c       	mov	r10, r15
		}
		if ((!(PIND&(1<<PIND5)))&&(Pos5==0))
     f80:	4d 99       	sbic	0x09, 5	; 9
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <ZUMO_QTR_Sensors+0x10a>
     f84:	91 10       	cpse	r9, r1
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <ZUMO_QTR_Sensors+0x10a>
		{
			ZUMO.QTR.Sensors[5]=ZUMO.QTR.Counter;
     f88:	d2 01       	movw	r26, r4
     f8a:	8d 93       	st	X+, r24
     f8c:	9c 93       	st	X, r25
			Pos5=1;
     f8e:	9f 2c       	mov	r9, r15
	
	PORTD	&=~	((1<<PORTD4)|(1<<PORTD5));
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pos0==0 || Pos1==0 || Pos2==0 || Pos3==0 || Pos4==0 || Pos5==0 )
     f90:	ee 20       	and	r14, r14
     f92:	09 f4       	brne	.+2      	; 0xf96 <ZUMO_QTR_Sensors+0x110>
     f94:	ba c0       	rjmp	.+372    	; 0x110a <ZUMO_QTR_Sensors+0x284>
     f96:	dd 20       	and	r13, r13
     f98:	09 f4       	brne	.+2      	; 0xf9c <ZUMO_QTR_Sensors+0x116>
     f9a:	bf c0       	rjmp	.+382    	; 0x111a <ZUMO_QTR_Sensors+0x294>
     f9c:	cc 20       	and	r12, r12
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <ZUMO_QTR_Sensors+0x11c>
     fa0:	bc c0       	rjmp	.+376    	; 0x111a <ZUMO_QTR_Sensors+0x294>
     fa2:	bb 20       	and	r11, r11
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <ZUMO_QTR_Sensors+0x122>
     fa6:	b9 c0       	rjmp	.+370    	; 0x111a <ZUMO_QTR_Sensors+0x294>
     fa8:	aa 20       	and	r10, r10
     faa:	09 f4       	brne	.+2      	; 0xfae <ZUMO_QTR_Sensors+0x128>
     fac:	b6 c0       	rjmp	.+364    	; 0x111a <ZUMO_QTR_Sensors+0x294>
     fae:	99 20       	and	r9, r9
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <ZUMO_QTR_Sensors+0x12e>
     fb2:	b3 c0       	rjmp	.+358    	; 0x111a <ZUMO_QTR_Sensors+0x294>
		{
			ZUMO.QTR.Sensors[5]=ZUMO.QTR.Counter;
			Pos5=1;
		}
	}
	OFF_QTR;
     fb4:	5a 98       	cbi	0x0b, 2	; 11
     fb6:	e1 e4       	ldi	r30, 0x41	; 65
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	fe 83       	std	Y+6, r31	; 0x06
     fbc:	ed 83       	std	Y+5, r30	; 0x05
     fbe:	4d e4       	ldi	r20, 0x4D	; 77
     fc0:	52 e0       	ldi	r21, 0x02	; 2
     fc2:	df 01       	movw	r26, r30
	//////////////////////////
    
	for (uint8_t i=0;i<6;i++)
	{
		if (ZUMO.QTR.Sensors[i]<ZUMO.QTR.Sensors_Min[i])
     fc4:	80 8d       	ldd	r24, Z+24	; 0x18
     fc6:	91 8d       	ldd	r25, Z+25	; 0x19
     fc8:	20 81       	ld	r18, Z
     fca:	31 81       	ldd	r19, Z+1	; 0x01
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <ZUMO_QTR_Sensors+0x152>
		{
			ZUMO.QTR.Sensors[i]=ZUMO.QTR.Sensors_Min[i]+1;
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
		}
		if (ZUMO.QTR.Sensors[i]>ZUMO.QTR.Sensors_Max[i])
     fd8:	1c 96       	adiw	r26, 0x0c	; 12
     fda:	8d 91       	ld	r24, X+
     fdc:	9c 91       	ld	r25, X
     fde:	1d 97       	sbiw	r26, 0x0d	; 13
     fe0:	2d 91       	ld	r18, X+
     fe2:	3c 91       	ld	r19, X
     fe4:	11 97       	sbiw	r26, 0x01	; 1
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	18 f4       	brcc	.+6      	; 0xff2 <ZUMO_QTR_Sensors+0x16c>
		{
			ZUMO.QTR.Sensors[i]=ZUMO.QTR.Sensors_Max[i]-1;
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	8d 93       	st	X+, r24
     ff0:	9c 93       	st	X, r25
     ff2:	32 96       	adiw	r30, 0x02	; 2
		}
	}
	OFF_QTR;
	//////////////////////////
    
	for (uint8_t i=0;i<6;i++)
     ff4:	e4 17       	cp	r30, r20
     ff6:	f5 07       	cpc	r31, r21
     ff8:	21 f7       	brne	.-56     	; 0xfc2 <ZUMO_QTR_Sensors+0x13c>
			ZUMO.QTR.Sensors[i]=ZUMO.QTR.Sensors_Max[i]-1;
		}
	}
	
	uint32_t Pos=0;
	ZUMO.QTR.S_C=0;
     ffa:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <ZUMO+0xdf>
     ffe:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <ZUMO+0xe0>
    1002:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <ZUMO+0xe1>
    1006:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <ZUMO+0xe2>
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	c1 2c       	mov	r12, r1
    1010:	d1 2c       	mov	r13, r1
    1012:	76 01       	movw	r14, r12
		{
			ZUMO.QTR.Sensors[i]=ZUMO.QTR.Sensors_Max[i]-1;
		}
	}
	
	uint32_t Pos=0;
    1014:	41 2c       	mov	r4, r1
    1016:	51 2c       	mov	r5, r1
    1018:	32 01       	movw	r6, r4
	ZUMO.QTR.S_C=0;
	for (uint8_t val=0;val<6;val++)
	{
		ZUMO.QTR.S_A=(float)(ZUMO.QTR.Sensors_Max[val]-ZUMO.QTR.Sensors_Min[val]);
    101a:	ad 81       	ldd	r26, Y+5	; 0x05
    101c:	be 81       	ldd	r27, Y+6	; 0x06
    101e:	58 96       	adiw	r26, 0x18	; 24
    1020:	ad 90       	ld	r10, X+
    1022:	bc 90       	ld	r11, X
    1024:	59 97       	sbiw	r26, 0x19	; 25
		ZUMO.QTR.S_A=1000/ZUMO.QTR.S_A;
    1026:	1c 96       	adiw	r26, 0x0c	; 12
    1028:	6d 91       	ld	r22, X+
    102a:	7c 91       	ld	r23, X
    102c:	1d 97       	sbiw	r26, 0x0d	; 13
    102e:	6a 19       	sub	r22, r10
    1030:	7b 09       	sbc	r23, r11
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__floatunsisf>
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	8a e7       	ldi	r24, 0x7A	; 122
    1044:	94 e4       	ldi	r25, 0x44	; 68
    1046:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__divsf3>
    104a:	69 83       	std	Y+1, r22	; 0x01
    104c:	7a 83       	std	Y+2, r23	; 0x02
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	9c 83       	std	Y+4, r25	; 0x04
		
		ZUMO.QTR.S_B=(float)(ZUMO.QTR.Sensors[val]-ZUMO.QTR.Sensors_Min[val]);
    1052:	ed 81       	ldd	r30, Y+5	; 0x05
    1054:	fe 81       	ldd	r31, Y+6	; 0x06
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	6a 19       	sub	r22, r10
    105c:	7b 09       	sbc	r23, r11
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__floatunsisf>
    1066:	4b 01       	movw	r8, r22
    1068:	5c 01       	movw	r10, r24
		ZUMO.QTR.Sensors[val]=(int)(ZUMO.QTR.S_A*ZUMO.QTR.S_B);
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	69 81       	ldd	r22, Y+1	; 0x01
    1070:	7a 81       	ldd	r23, Y+2	; 0x02
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
    107a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
    107e:	ad 81       	ldd	r26, Y+5	; 0x05
    1080:	be 81       	ldd	r27, Y+6	; 0x06
    1082:	6d 93       	st	X+, r22
    1084:	7d 93       	st	X+, r23
    1086:	be 83       	std	Y+6, r27	; 0x06
    1088:	ad 83       	std	Y+5, r26	; 0x05
		Pos=Pos+val*ZUMO.QTR.Sensors[val];
    108a:	06 9f       	mul	r16, r22
    108c:	90 01       	movw	r18, r0
    108e:	07 9f       	mul	r16, r23
    1090:	30 0d       	add	r19, r0
    1092:	16 9f       	mul	r17, r22
    1094:	30 0d       	add	r19, r0
    1096:	11 24       	eor	r1, r1
    1098:	42 0e       	add	r4, r18
    109a:	53 1e       	adc	r5, r19
    109c:	61 1c       	adc	r6, r1
    109e:	71 1c       	adc	r7, r1
		ZUMO.QTR.S_C=ZUMO.QTR.S_C+ZUMO.QTR.Sensors[val];
    10a0:	c6 0e       	add	r12, r22
    10a2:	d7 1e       	adc	r13, r23
    10a4:	e1 1c       	adc	r14, r1
    10a6:	f1 1c       	adc	r15, r1
    10a8:	0f 5f       	subi	r16, 0xFF	; 255
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	
	uint32_t Pos=0;
	ZUMO.QTR.S_C=0;
	for (uint8_t val=0;val<6;val++)
    10ac:	06 30       	cpi	r16, 0x06	; 6
    10ae:	11 05       	cpc	r17, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <ZUMO_QTR_Sensors+0x22e>
    10b2:	b3 cf       	rjmp	.-154    	; 0x101a <ZUMO_QTR_Sensors+0x194>
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	ab 81       	ldd	r26, Y+3	; 0x03
    10ba:	bc 81       	ldd	r27, Y+4	; 0x04
    10bc:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <ZUMO+0xd7>
    10c0:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <ZUMO+0xd8>
    10c4:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <ZUMO+0xd9>
    10c8:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <ZUMO+0xda>
    10cc:	80 92 79 02 	sts	0x0279, r8	; 0x800279 <ZUMO+0xdb>
    10d0:	90 92 7a 02 	sts	0x027A, r9	; 0x80027a <ZUMO+0xdc>
    10d4:	a0 92 7b 02 	sts	0x027B, r10	; 0x80027b <ZUMO+0xdd>
    10d8:	b0 92 7c 02 	sts	0x027C, r11	; 0x80027c <ZUMO+0xde>
    10dc:	c0 92 7d 02 	sts	0x027D, r12	; 0x80027d <ZUMO+0xdf>
    10e0:	d0 92 7e 02 	sts	0x027E, r13	; 0x80027e <ZUMO+0xe0>
    10e4:	e0 92 7f 02 	sts	0x027F, r14	; 0x80027f <ZUMO+0xe1>
    10e8:	f0 92 80 02 	sts	0x0280, r15	; 0x800280 <ZUMO+0xe2>
		ZUMO.QTR.S_B=(float)(ZUMO.QTR.Sensors[val]-ZUMO.QTR.Sensors_Min[val]);
		ZUMO.QTR.Sensors[val]=(int)(ZUMO.QTR.S_A*ZUMO.QTR.S_B);
		Pos=Pos+val*ZUMO.QTR.Sensors[val];
		ZUMO.QTR.S_C=ZUMO.QTR.S_C+ZUMO.QTR.Sensors[val];
	}
	Pos=(1000*Pos)/(ZUMO.QTR.S_C);
    10ec:	a8 ee       	ldi	r26, 0xE8	; 232
    10ee:	b3 e0       	ldi	r27, 0x03	; 3
    10f0:	a3 01       	movw	r20, r6
    10f2:	92 01       	movw	r18, r4
    10f4:	0e 94 a6 10 	call	0x214c	; 0x214c <__muluhisi3>
	ZUMO.QTR.Position=(int16_t)(Pos);
    10f8:	a7 01       	movw	r20, r14
    10fa:	96 01       	movw	r18, r12
    10fc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>
    1100:	30 93 72 02 	sts	0x0272, r19	; 0x800272 <ZUMO+0xd4>
    1104:	20 93 71 02 	sts	0x0271, r18	; 0x800271 <ZUMO+0xd3>
}
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <ZUMO_QTR_Sensors+0x2a2>
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pos0==0 || Pos1==0 || Pos2==0 || Pos3==0 || Pos4==0 || Pos5==0 )
	{
		ZUMO.QTR.Counter++;
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
		
		if ((!(PIND&(1<<PIND4)))&&(Pos0==0))
    1114:	4c 99       	sbic	0x09, 4	; 9
    1116:	14 cf       	rjmp	.-472    	; 0xf40 <ZUMO_QTR_Sensors+0xba>
    1118:	0f cf       	rjmp	.-482    	; 0xf38 <ZUMO_QTR_Sensors+0xb2>
	PORTC	&=~	((1<<PORTC3)|(1<<PORTC0)|(1<<PORTC2));
	PORTB	&=~	(1<<PORTB3);
	
	while (Pos0==0 || Pos1==0 || Pos2==0 || Pos3==0 || Pos4==0 || Pos5==0 )
	{
		ZUMO.QTR.Counter++;
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
		
		if ((!(PIND&(1<<PIND4)))&&(Pos0==0))
    1124:	89 b0       	in	r8, 0x09	; 9
    1126:	0c cf       	rjmp	.-488    	; 0xf40 <ZUMO_QTR_Sensors+0xba>
		Pos=Pos+val*ZUMO.QTR.Sensors[val];
		ZUMO.QTR.S_C=ZUMO.QTR.S_C+ZUMO.QTR.Sensors[val];
	}
	Pos=(1000*Pos)/(ZUMO.QTR.S_C);
	ZUMO.QTR.Position=(int16_t)(Pos);
}
    1128:	26 96       	adiw	r28, 0x06	; 6
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	7f 90       	pop	r7
    114e:	6f 90       	pop	r6
    1150:	5f 90       	pop	r5
    1152:	4f 90       	pop	r4
    1154:	08 95       	ret

00001156 <pressButton>:
void pressButton()
{
	ON_Led;
    1156:	2d 9a       	sbi	0x05, 5	; 5
	//while(Button)
	while(USART_ReceiveData()!='s')
    1158:	11 c0       	rjmp	.+34     	; 0x117c <pressButton+0x26>
	{
		OFF_Led;
    115a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	81 ee       	ldi	r24, 0xE1	; 225
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	80 40       	sbci	r24, 0x00	; 0
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <pressButton+0xc>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <pressButton+0x16>
    116c:	00 00       	nop
		_delay_ms(100);
		ON_Led;
    116e:	2d 9a       	sbi	0x05, 5	; 5
    1170:	8f e3       	ldi	r24, 0x3F	; 63
    1172:	9c e9       	ldi	r25, 0x9C	; 156
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <pressButton+0x1e>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <pressButton+0x24>
    117a:	00 00       	nop
}
void pressButton()
{
	ON_Led;
	//while(Button)
	while(USART_ReceiveData()!='s')
    117c:	0e 94 3e 0c 	call	0x187c	; 0x187c <USART_ReceiveData>
    1180:	83 37       	cpi	r24, 0x73	; 115
    1182:	59 f7       	brne	.-42     	; 0x115a <pressButton+0x4>
		OFF_Led;
		_delay_ms(100);
		ON_Led;
		_delay_ms(10);
	}
	OFF_Led;
    1184:	2d 98       	cbi	0x05, 5	; 5
    1186:	08 95       	ret

00001188 <ZUMO_Init>:
/*		A5		-->		PC5(SCL)				-->	SCL					*/
//////////////////////////////////////////////////////////////////////////
////		0=input
////		1=output
void ZUMO_Init()
{
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
	/*		Configurar pin ZUMO		*/
	DDRD=0x00;
    1198:	1a b8       	out	0x0a, r1	; 10
	DDRB=0x00;
    119a:	14 b8       	out	0x04, r1	; 4
	DDRC=0x00;
    119c:	17 b8       	out	0x07, r1	; 7
	
	DDRD=(1<<DDD1)|(1<<DDD2)|(1<<DDD3)|(1<<DDD6)|(1<<DDD7);
    119e:	8e ec       	ldi	r24, 0xCE	; 206
    11a0:	8a b9       	out	0x0a, r24	; 10
	DDRB=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB5);
    11a2:	87 e2       	ldi	r24, 0x27	; 39
    11a4:	84 b9       	out	0x04, r24	; 4
	DDRC&=~((1<<DDC0)|(1<<DDC2)|(1<<DDC3));
    11a6:	87 b1       	in	r24, 0x07	; 7
    11a8:	82 7f       	andi	r24, 0xF2	; 242
    11aa:	87 b9       	out	0x07, r24	; 7
	
	
	PORTB|=(1<<PORTB4);
    11ac:	2c 9a       	sbi	0x05, 4	; 5
	PORTC&=~((1<<PORTC0)|(1<<PORTC2)|(1<<PORTC3));
    11ae:	88 b1       	in	r24, 0x08	; 8
    11b0:	82 7f       	andi	r24, 0xF2	; 242
    11b2:	88 b9       	out	0x08, r24	; 8
	PORTD&=~((1<<PORTD4)|(1<<PORTD5));
    11b4:	8b b1       	in	r24, 0x0b	; 11
    11b6:	8f 7c       	andi	r24, 0xCF	; 207
    11b8:	8b b9       	out	0x0b, r24	; 11
    11ba:	e1 e4       	ldi	r30, 0x41	; 65
    11bc:	f2 e0       	ldi	r31, 0x02	; 2
    11be:	8d e4       	ldi	r24, 0x4D	; 77
    11c0:	92 e0       	ldi	r25, 0x02	; 2
	
	
	/*		Inicializamos Variables del proyecto		*/
	for (int a=0;a<6;a++)
	{
		ZUMO.QTR.Sensors[a]		=	0;
    11c2:	11 92       	st	Z+, r1
    11c4:	11 92       	st	Z+, r1
		ZUMO.QTR.Sensors_Min[a]	=	0;
    11c6:	17 8a       	std	Z+23, r1	; 0x17
    11c8:	16 8a       	std	Z+22, r1	; 0x16
		ZUMO.QTR.Sensors_Max[a]	=	0;
    11ca:	13 86       	std	Z+11, r1	; 0x0b
    11cc:	12 86       	std	Z+10, r1	; 0x0a
		ZUMO.QTR.Dump[a]		=	0;
    11ce:	13 a2       	std	Z+35, r1	; 0x23
    11d0:	12 a2       	std	Z+34, r1	; 0x22
	PORTC&=~((1<<PORTC0)|(1<<PORTC2)|(1<<PORTC3));
	PORTD&=~((1<<PORTD4)|(1<<PORTD5));
	
	
	/*		Inicializamos Variables del proyecto		*/
	for (int a=0;a<6;a++)
    11d2:	e8 17       	cp	r30, r24
    11d4:	f9 07       	cpc	r31, r25
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <ZUMO_Init+0x3a>
		ZUMO.QTR.Sensors[a]		=	0;
		ZUMO.QTR.Sensors_Min[a]	=	0;
		ZUMO.QTR.Sensors_Max[a]	=	0;
		ZUMO.QTR.Dump[a]		=	0;
	}
	ZUMO.QTR.Counter=0;
    11d8:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ZUMO+0xd6>
    11dc:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ZUMO+0xd5>
	
	ZUMO.IMU.Alpha	=    0.00F;
    11e0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <ZUMO+0x8b>
    11e4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <ZUMO+0x8c>
    11e8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ZUMO+0x8d>
    11ec:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <ZUMO+0x8e>
	ZUMO.IMU.Beta	=    0.00F;
    11f0:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <ZUMO+0x8f>
    11f4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <ZUMO+0x90>
    11f8:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <ZUMO+0x91>
    11fc:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <ZUMO+0x92>
	ZUMO.IMU.Min_Mx	=    0.00F;
    1200:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <ZUMO+0x93>
    1204:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <ZUMO+0x94>
    1208:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ZUMO+0x95>
    120c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <ZUMO+0x96>
	ZUMO.IMU.Max_Mx	=    0.00F;
    1210:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <ZUMO+0x97>
    1214:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <ZUMO+0x98>
    1218:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <ZUMO+0x99>
    121c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <ZUMO+0x9a>
	ZUMO.IMU.Min_My	=    0.00F;
    1220:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <ZUMO+0x9b>
    1224:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <ZUMO+0x9c>
    1228:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <ZUMO+0x9d>
    122c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <ZUMO+0x9e>
	ZUMO.IMU.Max_My	=    0.00F;
    1230:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <ZUMO+0x9f>
    1234:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <ZUMO+0xa0>
    1238:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <ZUMO+0xa1>
    123c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <ZUMO+0xa2>
	
	ZUMO.QTR.Position=0;
    1240:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ZUMO+0xd4>
    1244:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <ZUMO+0xd3>
	
	/*		Inicializamos perifericos		*/
	cli();
    1248:	f8 94       	cli
	USART_Init(9600,1,1,0,"none",1,0,8);
    124a:	68 94       	set
    124c:	aa 24       	eor	r10, r10
    124e:	a3 f8       	bld	r10, 3
    1250:	c1 2c       	mov	r12, r1
    1252:	ee 24       	eor	r14, r14
    1254:	e3 94       	inc	r14
    1256:	00 e0       	ldi	r16, 0x00	; 0
    1258:	11 e0       	ldi	r17, 0x01	; 1
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	80 e8       	ldi	r24, 0x80	; 128
    1262:	95 e2       	ldi	r25, 0x25	; 37
    1264:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <USART_Init>
	TWI_Config(0x00,1,0,0);
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 86 09 	call	0x130c	; 0x130c <TWI_Config>
	L3GD20H_Init();
    1274:	0e 94 7f 01 	call	0x2fe	; 0x2fe <L3GD20H_Init>
	LSM303D_Init();
    1278:	0e 94 a6 01 	call	0x34c	; 0x34c <LSM303D_Init>
	TIMER_Init();
    127c:	0e 94 be 00 	call	0x17c	; 0x17c <TIMER_Init>
	
	/*		Inicializamos Variables				*/
	OFF_Led;
    1280:	2d 98       	cbi	0x05, 5	; 5
	OFF_QTR;
    1282:	5a 98       	cbi	0x0b, 2	; 11
	OFF_Motors;
    1284:	e1 e8       	ldi	r30, 0x81	; 129
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8e 7f       	andi	r24, 0xFE	; 254
    128c:	80 83       	st	Z, r24
	OFF_Timer0;
    128e:	85 b5       	in	r24, 0x25	; 37
    1290:	8a 7f       	andi	r24, 0xFA	; 250
    1292:	85 bd       	out	0x25, r24	; 37
	OFF_Timer2;
    1294:	e1 eb       	ldi	r30, 0xB1	; 177
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	88 7f       	andi	r24, 0xF8	; 248
    129c:	80 83       	st	Z, r24
	ForWard_L;
    129e:	28 98       	cbi	0x05, 0	; 5
	ForWard_R;
    12a0:	5f 98       	cbi	0x0b, 7	; 11
	ZUMO_Motor(0,0);
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 2e 01 	call	0x25c	; 0x25c <ZUMO_Motor>
	
	pressButton();
    12ae:	0e 94 ab 08 	call	0x1156	; 0x1156 <pressButton>
	ZUMO_QTR_Calibrate(50);
    12b2:	82 e3       	ldi	r24, 0x32	; 50
    12b4:	0e 94 43 06 	call	0xc86	; 0xc86 <ZUMO_QTR_Calibrate>
	pressButton();
    12b8:	0e 94 ab 08 	call	0x1156	; 0x1156 <pressButton>
	ZUMO_Magnetometer_Calibrate();
    12bc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <ZUMO_Magnetometer_Calibrate>
	pressButton();
    12c0:	0e 94 ab 08 	call	0x1156	; 0x1156 <pressButton>
	ZUMO_PID_Init(25.0000,5.2500,0.0900,0.01536);
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f2 e8       	ldi	r31, 0x82	; 130
    12c8:	af 2e       	mov	r10, r31
    12ca:	f8 ea       	ldi	r31, 0xA8	; 168
    12cc:	bf 2e       	mov	r11, r31
    12ce:	fb e7       	ldi	r31, 0x7B	; 123
    12d0:	cf 2e       	mov	r12, r31
    12d2:	fc e3       	ldi	r31, 0x3C	; 60
    12d4:	df 2e       	mov	r13, r31
    12d6:	f0 2d       	mov	r31, r0
    12d8:	1c ee       	ldi	r17, 0xEC	; 236
    12da:	e1 2e       	mov	r14, r17
    12dc:	11 e5       	ldi	r17, 0x51	; 81
    12de:	f1 2e       	mov	r15, r17
    12e0:	08 eb       	ldi	r16, 0xB8	; 184
    12e2:	1d e3       	ldi	r17, 0x3D	; 61
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	48 ea       	ldi	r20, 0xA8	; 168
    12ea:	50 e4       	ldi	r21, 0x40	; 64
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	91 e4       	ldi	r25, 0x41	; 65
    12f4:	0e 94 2c 03 	call	0x658	; 0x658 <ZUMO_PID_Init>
	
	sei();
    12f8:	78 94       	sei
}
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	08 95       	ret

0000130c <TWI_Config>:
/*			S_M=1	Maestro				*/
/*			GCall=1	Habilita la llamada general pero se coloca casi siempre en 0					*/
/*			IntSlave=1	Habilita la interrupcion cuando es configurado en modo esclavo				*/
void	TWI_Config(uint8_t SlaveAddress,uint8_t S_M,uint8_t GCall,uint8_t IntSlave)
{
	TWI_Status_Master=0;
    130c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
	TWI_Status_Slave=0;
    1310:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <TWI_Status_Slave>
	TWI_Control_Slave=0;
    1314:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
	if (S_M==0)
    1318:	61 11       	cpse	r22, r1
    131a:	16 c0       	rjmp	.+44     	; 0x1348 <TWI_Config+0x3c>
	{
		TWI_Master_OR_Slave=0;
    131c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <TWI_Master_OR_Slave>
		if (IntSlave==0)							/*		Esclavo sin habilitacion de la interrupcion		*/
    1320:	21 11       	cpse	r18, r1
    1322:	08 c0       	rjmp	.+16     	; 0x1334 <TWI_Config+0x28>
		{
			TWAR=(SlaveAddress<<1) | GCall;
    1324:	88 0f       	add	r24, r24
    1326:	48 2b       	or	r20, r24
    1328:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
			TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
    132c:	84 ec       	ldi	r24, 0xC4	; 196
    132e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1332:	08 95       	ret
		}
		else if (IntSlave==1)						/*		Esclavo conn habilitacion de la interrupcion		*/
    1334:	21 30       	cpi	r18, 0x01	; 1
    1336:	a1 f4       	brne	.+40     	; 0x1360 <TWI_Config+0x54>
		{
			TWAR=(SlaveAddress<<1) | GCall;
    1338:	88 0f       	add	r24, r24
    133a:	48 2b       	or	r20, r24
    133c:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
			TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE)|(1<<TWINT);			/*		Envio de ACK si se registra una comunicacion		*/
    1340:	85 ec       	ldi	r24, 0xC5	; 197
    1342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1346:	08 95       	ret
		}
	}
	else if(S_M==1)									/*		Maestro sin habilitacion de la interrupcion		*/
    1348:	61 30       	cpi	r22, 0x01	; 1
    134a:	51 f4       	brne	.+20     	; 0x1360 <TWI_Config+0x54>
	{												/*		La interrupcion no se habilito para este caso debido a que las aplicaciones no lo requeriran		*/
		TWI_Master_OR_Slave=1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <TWI_Master_OR_Slave>
		TWBR=BITRATE;
    1352:	88 e4       	ldi	r24, 0x48	; 72
    1354:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
		switch(PrescalerValue)
		{
			case 1:
					TWSR|=0x00;
    1358:	e9 eb       	ldi	r30, 0xB9	; 185
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	80 83       	st	Z, r24
    1360:	08 95       	ret

00001362 <TWI_Start>:

/*		Inicia el START		*/
void	TWI_Start()
{
	uint8_t Condition;
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1362:	84 ea       	ldi	r24, 0xA4	; 164
    1364:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
    1368:	ec eb       	ldi	r30, 0xBC	; 188
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	88 23       	and	r24, r24
    1370:	ec f7       	brge	.-6      	; 0x136c <TWI_Start+0xa>
	Condition=TWSR&0xF8;
    1372:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if(Condition==0x08)
    1376:	88 7f       	andi	r24, 0xF8	; 248
    1378:	88 30       	cpi	r24, 0x08	; 8
    137a:	19 f4       	brne	.+6      	; 0x1382 <TWI_Start+0x20>
	{
		TWI_Status_Master	=	8;				/*  8 si el START fue exitoso	*/
    137c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
		return ;
    1380:	08 95       	ret
	}
	TWI_Status_Master	=	0;					/*  0 si fallo el START		*/
    1382:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
    1386:	08 95       	ret

00001388 <TWI_RepeatStart>:
}
/*		Repetir el START		*/
void	TWI_RepeatStart()
{
	if (TWI_Status_Master== 18 || TWI_Status_Master== 20 || TWI_Status_Master== 28 || TWI_Status_Master== 30 || TWI_Status_Master== 48 || TWI_Status_Master== 58)
    1388:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TWI_Status_Master>
    138c:	82 31       	cpi	r24, 0x12	; 18
    138e:	51 f0       	breq	.+20     	; 0x13a4 <TWI_RepeatStart+0x1c>
    1390:	98 2f       	mov	r25, r24
    1392:	97 7f       	andi	r25, 0xF7	; 247
    1394:	94 31       	cpi	r25, 0x14	; 20
    1396:	31 f0       	breq	.+12     	; 0x13a4 <TWI_RepeatStart+0x1c>
    1398:	8e 31       	cpi	r24, 0x1E	; 30
    139a:	21 f0       	breq	.+8      	; 0x13a4 <TWI_RepeatStart+0x1c>
    139c:	80 33       	cpi	r24, 0x30	; 48
    139e:	11 f0       	breq	.+4      	; 0x13a4 <TWI_RepeatStart+0x1c>
    13a0:	8a 33       	cpi	r24, 0x3A	; 58
    13a2:	99 f4       	brne	.+38     	; 0x13ca <TWI_RepeatStart+0x42>
	{
		uint8_t Condition;
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    13a4:	84 ea       	ldi	r24, 0xA4	; 164
    13a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
    13aa:	ec eb       	ldi	r30, 0xBC	; 188
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	ec f7       	brge	.-6      	; 0x13ae <TWI_RepeatStart+0x26>
		Condition=TWSR&0xF8;
    13b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
		if(Condition==0x10)
    13b8:	88 7f       	andi	r24, 0xF8	; 248
    13ba:	80 31       	cpi	r24, 0x10	; 16
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <TWI_RepeatStart+0x3e>
		{
			TWI_Status_Master	=	10;				//  1 si el REPEATSTART fue exitoso
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
			return ;
    13c4:	08 95       	ret
		}
		TWI_Status_Master	=	0;					//  0 si el REPEATSTART fallo
    13c6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
    13ca:	08 95       	ret

000013cc <TWI_Stop>:
	}
}
/*		Detener la comunicacion		*/
void	TWI_Stop()
{
	if (TWI_Status_Master== 20 || TWI_Status_Master== 28 || TWI_Status_Master== 30 || TWI_Status_Master== 48 || TWI_Status_Master== 58)
    13cc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <TWI_Status_Master>
    13d0:	98 2f       	mov	r25, r24
    13d2:	97 7f       	andi	r25, 0xF7	; 247
    13d4:	94 31       	cpi	r25, 0x14	; 20
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <TWI_Stop+0x18>
    13d8:	8e 31       	cpi	r24, 0x1E	; 30
    13da:	21 f0       	breq	.+8      	; 0x13e4 <TWI_Stop+0x18>
    13dc:	80 33       	cpi	r24, 0x30	; 48
    13de:	11 f0       	breq	.+4      	; 0x13e4 <TWI_Stop+0x18>
    13e0:	8a 33       	cpi	r24, 0x3A	; 58
    13e2:	51 f4       	brne	.+20     	; 0x13f8 <TWI_Stop+0x2c>
	{
		TWI_Status_Master=0;
    13e4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    13e8:	84 e9       	ldi	r24, 0x94	; 148
    13ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(TWCR&(1<<TWSTO));
    13ee:	ec eb       	ldi	r30, 0xBC	; 188
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	84 fd       	sbrc	r24, 4
    13f6:	fd cf       	rjmp	.-6      	; 0x13f2 <TWI_Stop+0x26>
    13f8:	08 95       	ret

000013fa <TWI_Adrress>:
	}
}
/*		Comunicarse con un esclavo		*/
void	TWI_Adrress(uint8_t Data_Adrress, uint8_t W_R)
{
	if (TWI_Status_Master	==	8 || TWI_Status_Master== 10)
    13fa:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <TWI_Status_Master>
    13fe:	9d 7f       	andi	r25, 0xFD	; 253
    1400:	98 30       	cpi	r25, 0x08	; 8
    1402:	a9 f5       	brne	.+106    	; 0x146e <TWI_Adrress+0x74>
	{
		uint8_t Status;
		TWDR=(Data_Adrress<<1)|(W_R);
    1404:	88 0f       	add	r24, r24
    1406:	86 2b       	or	r24, r22
    1408:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR=(1<<TWINT)|(1<<TWEN);
    140c:	84 e8       	ldi	r24, 0x84	; 132
    140e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
    1412:	ec eb       	ldi	r30, 0xBC	; 188
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	88 23       	and	r24, r24
    141a:	ec f7       	brge	.-6      	; 0x1416 <TWI_Adrress+0x1c>
		Status=TWSR&0xF8;
    141c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1420:	88 7f       	andi	r24, 0xF8	; 248
		if (W_R==0)
    1422:	61 11       	cpse	r22, r1
    1424:	14 c0       	rjmp	.+40     	; 0x144e <TWI_Adrress+0x54>
		{
			switch (Status)
    1426:	80 32       	cpi	r24, 0x20	; 32
    1428:	41 f0       	breq	.+16     	; 0x143a <TWI_Adrress+0x40>
    142a:	88 33       	cpi	r24, 0x38	; 56
    142c:	51 f0       	breq	.+20     	; 0x1442 <TWI_Adrress+0x48>
    142e:	88 31       	cpi	r24, 0x18	; 24
    1430:	59 f4       	brne	.+22     	; 0x1448 <TWI_Adrress+0x4e>
			{
				case 0x18:				// Send SLA+W and Receiver ACK		w=0
						TWI_Status_Master = 18;	// 18 to indicate ACK received
    1432:	82 e1       	ldi	r24, 0x12	; 18
    1434:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
						return ;
    1438:	08 95       	ret
					break;
				case 0x20:				// Send SLA+W and Receiver NACK		w=0
						TWI_Status_Master = 20;	// 20 to indicate NACK received
    143a:	84 e1       	ldi	r24, 0x14	; 20
    143c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
						return ;
    1440:	08 95       	ret
					break;
				case 0x38:
						TWI_Status_Master = 0;	// 0 to indicate W=Arbitration lost in SLA+W or data bytes
    1442:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
						return ;
    1446:	08 95       	ret
					break;
				default :
						TWI_Status_Master = 0;	// 0 to indicate SLA+W/R failed
    1448:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
						return ;
    144c:	08 95       	ret
					break;
			}	
		} 
		else if(W_R==1)
    144e:	61 30       	cpi	r22, 0x01	; 1
    1450:	71 f4       	brne	.+28     	; 0x146e <TWI_Adrress+0x74>
		{
			switch (Status)
    1452:	80 34       	cpi	r24, 0x40	; 64
    1454:	29 f0       	breq	.+10     	; 0x1460 <TWI_Adrress+0x66>
    1456:	88 34       	cpi	r24, 0x48	; 72
    1458:	39 f0       	breq	.+14     	; 0x1468 <TWI_Adrress+0x6e>
				case 0x48:				// Send SLA+R and Receiver NACK		r=1
						TWI_Status_Master = 48;	// Return 48 to indicate NACK received
						return ;
					break;
				case 0x38:
						TWI_Status_Master = 0;	// Return 0 to indicate R=Arbitration lost in SLA+R or NOT ACK bit
    145a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
    145e:	08 95       	ret
		else if(W_R==1)
		{
			switch (Status)
			{
				case 0x40:				// Send SLA+R and Receiver ACK		r=1
						TWI_Status_Master = 40;	// Return 40 to indicate ACK received
    1460:	88 e2       	ldi	r24, 0x28	; 40
    1462:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
						return ;
    1466:	08 95       	ret
					break;
				case 0x48:				// Send SLA+R and Receiver NACK		r=1
						TWI_Status_Master = 48;	// Return 48 to indicate NACK received
    1468:	80 e3       	ldi	r24, 0x30	; 48
    146a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
    146e:	08 95       	ret

00001470 <TWI_Listen>:
return 0;
}
/*		Verificar si existe una llamada desde un maestro		*/
void	TWI_Listen()
{
	while(TWI_Control_Slave==0)
    1470:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    1474:	81 11       	cpse	r24, r1
    1476:	1e c0       	rjmp	.+60     	; 0x14b4 <TWI_Listen+0x44>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
    1478:	84 ec       	ldi	r24, 0xC4	; 196
    147a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
    147e:	ec eb       	ldi	r30, 0xBC	; 188
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	88 23       	and	r24, r24
    1486:	ec f7       	brge	.-6      	; 0x1482 <TWI_Listen+0x12>
		TWI_Status_Slave=TWSR&0xF8;
    1488:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    148c:	98 2f       	mov	r25, r24
    148e:	98 7f       	andi	r25, 0xF8	; 248
    1490:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <TWI_Status_Slave>
		if (TWI_Status_Slave==0x60 || TWI_Status_Slave==0x68 ||TWI_Status_Slave==0x70 ||TWI_Status_Slave==0x78)
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	80 36       	cpi	r24, 0x60	; 96
    1498:	11 f0       	breq	.+4      	; 0x149e <TWI_Listen+0x2e>
    149a:	80 37       	cpi	r24, 0x70	; 112
    149c:	21 f4       	brne	.+8      	; 0x14a6 <TWI_Listen+0x36>
		{
			TWI_Control_Slave=1;		/*		Se recibio SLA+W y se devolvio ACK		*/
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
			return ;
    14a4:	08 95       	ret
		}
		if (TWI_Status_Slave==0xA8 || TWI_Status_Slave==0xB0 )
    14a6:	98 3a       	cpi	r25, 0xA8	; 168
    14a8:	11 f0       	breq	.+4      	; 0x14ae <TWI_Listen+0x3e>
    14aa:	90 3b       	cpi	r25, 0xB0	; 176
    14ac:	19 f4       	brne	.+6      	; 0x14b4 <TWI_Listen+0x44>
		{
			TWI_Control_Slave=2;		/*		Se recibio SLA+R y se devolvio NACK		*/
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
    14b4:	08 95       	ret

000014b6 <TWI_TransmitData>:
		}
	}
}
/*		Enviar datos siendo MT o ST		*/
void	TWI_TransmitData(uint8_t Data)		
{
    14b6:	cf 93       	push	r28
	if (TWI_Master_OR_Slave==1)
    14b8:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <TWI_Master_OR_Slave>
    14bc:	91 30       	cpi	r25, 0x01	; 1
    14be:	11 f5       	brne	.+68     	; 0x1504 <TWI_TransmitData+0x4e>
	{
		if (TWI_Status_Master == 18 || TWI_Status_Master == 28)
    14c0:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <TWI_Status_Master>
    14c4:	92 31       	cpi	r25, 0x12	; 18
    14c6:	11 f0       	breq	.+4      	; 0x14cc <TWI_TransmitData+0x16>
    14c8:	9c 31       	cpi	r25, 0x1C	; 28
    14ca:	f1 f5       	brne	.+124    	; 0x1548 <TWI_TransmitData+0x92>
		{
			uint8_t Status;
			TWDR=Data;
    14cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			TWCR=(1<<TWINT)|(1<<TWEN);
    14d0:	84 e8       	ldi	r24, 0x84	; 132
    14d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
    14d6:	ec eb       	ldi	r30, 0xBC	; 188
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	88 23       	and	r24, r24
    14de:	ec f7       	brge	.-6      	; 0x14da <TWI_TransmitData+0x24>
			Status=TWSR&0xF8;
    14e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    14e4:	88 7f       	andi	r24, 0xF8	; 248
			if (Status==0x28)			// Send Data and Receiver ACK and can i keep sending data
    14e6:	88 32       	cpi	r24, 0x28	; 40
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <TWI_TransmitData+0x3c>
			{
				TWI_Status_Master	=	28;		// 2 to indicate ACK received
    14ea:	8c e1       	ldi	r24, 0x1C	; 28
    14ec:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
				return ;
    14f0:	2b c0       	rjmp	.+86     	; 0x1548 <TWI_TransmitData+0x92>
			}
			else if (Status==0x30)			// Send Data and Receiver NACK 
    14f2:	80 33       	cpi	r24, 0x30	; 48
    14f4:	21 f4       	brne	.+8      	; 0x14fe <TWI_TransmitData+0x48>
			{
				TWI_Status_Master	=	30;		// 30 to indicate NACK received
    14f6:	8e e1       	ldi	r24, 0x1E	; 30
    14f8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
				return ;
    14fc:	25 c0       	rjmp	.+74     	; 0x1548 <TWI_TransmitData+0x92>
				TWI_Status_Master	=	0;		// 0 to indicate why other master continue
				return ;
			}
			else
			{
				TWI_Status_Master	=	0;
    14fe:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
    1502:	22 c0       	rjmp	.+68     	; 0x1548 <TWI_TransmitData+0x92>
				return;	
			}
		}
	}
	else if (TWI_Master_OR_Slave==0)
    1504:	91 11       	cpse	r25, r1
    1506:	20 c0       	rjmp	.+64     	; 0x1548 <TWI_TransmitData+0x92>
    1508:	c8 2f       	mov	r28, r24
	{
		TWI_Listen();
    150a:	0e 94 38 0a 	call	0x1470	; 0x1470 <TWI_Listen>
		if (TWI_Control_Slave==2)
    150e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	c9 f4       	brne	.+50     	; 0x1548 <TWI_TransmitData+0x92>
		{
			TWDR=Data;
    1516:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    151a:	84 ec       	ldi	r24, 0xC4	; 196
    151c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
    1520:	ec eb       	ldi	r30, 0xBC	; 188
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	88 23       	and	r24, r24
    1528:	ec f7       	brge	.-6      	; 0x1524 <TWI_TransmitData+0x6e>
			TWI_Status_Slave=TWSR&0xF8;
    152a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    152e:	88 7f       	andi	r24, 0xF8	; 248
    1530:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <TWI_Status_Slave>
			if (TWI_Status_Slave==0xB8 )
    1534:	88 3b       	cpi	r24, 0xB8	; 184
    1536:	21 f4       	brne	.+8      	; 0x1540 <TWI_TransmitData+0x8a>
			{
				TWI_Control_Slave=2;
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
				return ;
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <TWI_TransmitData+0x92>
			}
			else if (TWI_Status_Slave==0xC0)
    1540:	80 3c       	cpi	r24, 0xC0	; 192
    1542:	11 f4       	brne	.+4      	; 0x1548 <TWI_TransmitData+0x92>
			{
				TWI_Control_Slave=0;
    1544:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
			}
			return ;
		}
		return ;
	}
}
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <TWI_ReceiveData>:
/*		Recibir datos siendo MR o Sr y enviando ACK para continuar la recepcion o NACK para detener el envio de datos		*/
uint8_t TWI_ReceiveData(uint8_t ACK_NACK)	/// Master Receive MR
{
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
		/*		Recibir Datos desde el Esclavo		*/
	if (TWI_Master_OR_Slave==1)
    1550:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <TWI_Master_OR_Slave>
    1554:	c1 30       	cpi	r28, 0x01	; 1
    1556:	09 f0       	breq	.+2      	; 0x155a <TWI_ReceiveData+0xe>
    1558:	69 c0       	rjmp	.+210    	; 0x162c <TWI_ReceiveData+0xe0>
	{
		if (TWI_Status_Master== 40 || TWI_Status_Master== 50)
    155a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <TWI_Status_Master>
    155e:	98 32       	cpi	r25, 0x28	; 40
    1560:	11 f0       	breq	.+4      	; 0x1566 <TWI_ReceiveData+0x1a>
    1562:	92 33       	cpi	r25, 0x32	; 50
    1564:	79 f5       	brne	.+94     	; 0x15c4 <TWI_ReceiveData+0x78>
		{
			uint8_t Status;
			if (ACK_NACK==1)
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	31 f4       	brne	.+12     	; 0x1576 <TWI_ReceiveData+0x2a>
			{
				TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    156a:	84 ec       	ldi	r24, 0xC4	; 196
    156c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			}
			else if (ACK_NACK==0)
			{
				TWCR=(1<<TWINT)|(1<<TWEN);
			}
			while(!(TWCR&(1<<TWINT)));
    1570:	ec eb       	ldi	r30, 0xBC	; 188
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <TWI_ReceiveData+0x36>
			uint8_t Status;
			if (ACK_NACK==1)
			{
				TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
			}
			else if (ACK_NACK==0)
    1576:	81 11       	cpse	r24, r1
    1578:	fb cf       	rjmp	.-10     	; 0x1570 <TWI_ReceiveData+0x24>
			{
				TWCR=(1<<TWINT)|(1<<TWEN);
    157a:	84 e8       	ldi	r24, 0x84	; 132
    157c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1580:	f7 cf       	rjmp	.-18     	; 0x1570 <TWI_ReceiveData+0x24>
			}
			while(!(TWCR&(1<<TWINT)));
    1582:	80 81       	ld	r24, Z
    1584:	88 23       	and	r24, r24
    1586:	ec f7       	brge	.-6      	; 0x1582 <TWI_ReceiveData+0x36>
			Status=TWSR&0xF8;
    1588:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
			switch (Status)
    158c:	88 7f       	andi	r24, 0xF8	; 248
    158e:	80 35       	cpi	r24, 0x50	; 80
    1590:	29 f0       	breq	.+10     	; 0x159c <TWI_ReceiveData+0x50>
    1592:	88 35       	cpi	r24, 0x58	; 88
    1594:	49 f0       	breq	.+18     	; 0x15a8 <TWI_ReceiveData+0x5c>
    1596:	88 33       	cpi	r24, 0x38	; 56
    1598:	89 f4       	brne	.+34     	; 0x15bc <TWI_ReceiveData+0x70>
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <TWI_ReceiveData+0x68>
			{
				case 0x50:			// Data byte has been received; ACK has been returned
						TWI_Status_Master = 50;
    159c:	82 e3       	ldi	r24, 0x32	; 50
    159e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
						return TWDR;	// Return 0 for indicate continue Receive Data from Slave
    15a2:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    15a6:	7a c0       	rjmp	.+244    	; 0x169c <TWI_ReceiveData+0x150>
					break;
				case 0x58:			// Data byte has been received; NACK has been returned
						TWI_Status_Master = 58;
    15a8:	8a e3       	ldi	r24, 0x3A	; 58
    15aa:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <TWI_Status_Master>
						return TWDR;	// Return 1 for indicate Stop or RepeatStop
    15ae:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    15b2:	74 c0       	rjmp	.+232    	; 0x169c <TWI_ReceiveData+0x150>
					break;
				case 0x38:
						TWI_Status_Master = 0;
    15b4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
						return 0;	// Return 3 to indicate arbitration lost in SLA+R or data bytes
    15b8:	c0 e0       	ldi	r28, 0x00	; 0
    15ba:	70 c0       	rjmp	.+224    	; 0x169c <TWI_ReceiveData+0x150>
					break;
				default :
						TWI_Status_Master = 0;
    15bc:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <TWI_Status_Master>
						return 0;	// Return 6 for indicate data failure
    15c0:	c0 e0       	ldi	r28, 0x00	; 0
    15c2:	6c c0       	rjmp	.+216    	; 0x169c <TWI_ReceiveData+0x150>
					break;
			}
		}
		if (TWI_Status_Slave==0xFF)
    15c4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <TWI_Status_Slave>
    15c8:	9f 3f       	cpi	r25, 0xFF	; 255
    15ca:	09 f0       	breq	.+2      	; 0x15ce <TWI_ReceiveData+0x82>
    15cc:	64 c0       	rjmp	.+200    	; 0x1696 <TWI_ReceiveData+0x14a>
		{
			TWCR=(ACK_NACK<<TWEA)|(1<<TWEN)|(1<<TWINT);
    15ce:	20 e4       	ldi	r18, 0x40	; 64
    15d0:	82 9f       	mul	r24, r18
    15d2:	c0 01       	movw	r24, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	84 68       	ori	r24, 0x84	; 132
    15d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
    15dc:	ec eb       	ldi	r30, 0xBC	; 188
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 23       	and	r24, r24
    15e4:	ec f7       	brge	.-6      	; 0x15e0 <TWI_ReceiveData+0x94>
			TWI_Status_Slave=TWSR&0xF8;
    15e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
			if (TWI_Status_Slave==0x80 || TWI_Status_Slave==0x90 )
    15ea:	98 2f       	mov	r25, r24
    15ec:	98 7e       	andi	r25, 0xE8	; 232
    15ee:	90 38       	cpi	r25, 0x80	; 128
    15f0:	31 f4       	brne	.+12     	; 0x15fe <TWI_ReceiveData+0xb2>
			{
				TWI_Status_Slave=0xFF;
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <TWI_Status_Slave>
				return TWDR;
    15f8:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    15fc:	4f c0       	rjmp	.+158    	; 0x169c <TWI_ReceiveData+0x150>
			}
			else if (TWI_Status_Slave==0x88 || TWI_Status_Slave==0x98 )
    15fe:	98 38       	cpi	r25, 0x88	; 136
    1600:	29 f4       	brne	.+10     	; 0x160c <TWI_ReceiveData+0xc0>
			{
				TWI_Status_Slave=0x00;
    1602:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <TWI_Status_Slave>
				return TWDR;
    1606:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    160a:	48 c0       	rjmp	.+144    	; 0x169c <TWI_ReceiveData+0x150>
		}
		if (TWI_Status_Slave==0xFF)
		{
			TWCR=(ACK_NACK<<TWEA)|(1<<TWEN)|(1<<TWINT);
			while(!(TWCR&(1<<TWINT)));
			TWI_Status_Slave=TWSR&0xF8;
    160c:	88 7f       	andi	r24, 0xF8	; 248
			else if (TWI_Status_Slave==0x88 || TWI_Status_Slave==0x98 )
			{
				TWI_Status_Slave=0x00;
				return TWDR;
			}
			else if (TWI_Status_Slave==0xA0 )
    160e:	80 3a       	cpi	r24, 0xA0	; 160
    1610:	21 f0       	breq	.+8      	; 0x161a <TWI_ReceiveData+0xce>
		}
		if (TWI_Status_Slave==0xFF)
		{
			TWCR=(ACK_NACK<<TWEA)|(1<<TWEN)|(1<<TWINT);
			while(!(TWCR&(1<<TWINT)));
			TWI_Status_Slave=TWSR&0xF8;
    1612:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <TWI_Status_Slave>
			else if (TWI_Status_Slave==0xA0 )
			{
				TWI_Status_Slave=0x00;
				TWCR|=(1<<TWINT);
			}
			return 0;
    1616:	c0 e0       	ldi	r28, 0x00	; 0
    1618:	41 c0       	rjmp	.+130    	; 0x169c <TWI_ReceiveData+0x150>
				TWI_Status_Slave=0x00;
				return TWDR;
			}
			else if (TWI_Status_Slave==0xA0 )
			{
				TWI_Status_Slave=0x00;
    161a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <TWI_Status_Slave>
				TWCR|=(1<<TWINT);
    161e:	ec eb       	ldi	r30, 0xBC	; 188
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 68       	ori	r24, 0x80	; 128
    1626:	80 83       	st	Z, r24
			}
			return 0;
    1628:	c0 e0       	ldi	r28, 0x00	; 0
    162a:	38 c0       	rjmp	.+112    	; 0x169c <TWI_ReceiveData+0x150>
		}
	}
	/*		Recepcion de datos desde el Maestro		*/
	else if (TWI_Master_OR_Slave==0)
    162c:	c1 11       	cpse	r28, r1
    162e:	35 c0       	rjmp	.+106    	; 0x169a <TWI_ReceiveData+0x14e>
    1630:	d8 2f       	mov	r29, r24
	{
		TWI_Listen();
    1632:	0e 94 38 0a 	call	0x1470	; 0x1470 <TWI_Listen>
		if (TWI_Control_Slave==1)
    1636:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	79 f5       	brne	.+94     	; 0x169c <TWI_ReceiveData+0x150>
		{
			TWCR=(ACK_NACK<<TWEA)|(1<<TWEN)|(1<<TWINT);
    163e:	20 e4       	ldi	r18, 0x40	; 64
    1640:	d2 9f       	mul	r29, r18
    1642:	c0 01       	movw	r24, r0
    1644:	11 24       	eor	r1, r1
    1646:	84 68       	ori	r24, 0x84	; 132
    1648:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
    164c:	ec eb       	ldi	r30, 0xBC	; 188
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 23       	and	r24, r24
    1654:	ec f7       	brge	.-6      	; 0x1650 <TWI_ReceiveData+0x104>
			TWI_Status_Slave=TWSR&0xF8;
    1656:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    165a:	98 2f       	mov	r25, r24
    165c:	98 7f       	andi	r25, 0xF8	; 248
    165e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <TWI_Status_Slave>
			if (TWI_Status_Slave==0x80 || TWI_Status_Slave==0x90 )
    1662:	88 7e       	andi	r24, 0xE8	; 232
    1664:	80 38       	cpi	r24, 0x80	; 128
    1666:	31 f4       	brne	.+12     	; 0x1674 <TWI_ReceiveData+0x128>
			{
				TWI_Control_Slave=1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
				return TWDR;
    166e:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <TWI_ReceiveData+0x150>
			}
			else if (TWI_Status_Slave==0x88 || TWI_Status_Slave==0x98 )
    1674:	88 38       	cpi	r24, 0x88	; 136
    1676:	29 f4       	brne	.+10     	; 0x1682 <TWI_ReceiveData+0x136>
			{
				TWI_Control_Slave=0;
    1678:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
				return TWDR;
    167c:	c0 91 bb 00 	lds	r28, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1680:	0d c0       	rjmp	.+26     	; 0x169c <TWI_ReceiveData+0x150>
			}
			else if (TWI_Status_Slave==0xA0 )
    1682:	90 3a       	cpi	r25, 0xA0	; 160
    1684:	59 f4       	brne	.+22     	; 0x169c <TWI_ReceiveData+0x150>
			{
				TWI_Control_Slave=0;
    1686:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
				TWCR|=(1<<TWINT);
    168a:	ec eb       	ldi	r30, 0xBC	; 188
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 68       	ori	r24, 0x80	; 128
    1692:	80 83       	st	Z, r24
    1694:	03 c0       	rjmp	.+6      	; 0x169c <TWI_ReceiveData+0x150>
			return 0;
		}
		
		return 0;
	}
return 0;
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	01 c0       	rjmp	.+2      	; 0x169c <TWI_ReceiveData+0x150>
    169a:	c0 e0       	ldi	r28, 0x00	; 0
}
    169c:	8c 2f       	mov	r24, r28
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <USART_Init>:
 */ 
#include "../header/USART_328P.h"


void	USART_Init(uint16_t BAUDRATE,uint8_t EN_RX,uint8_t EN_TX,uint8_t EN_INT,char PARITY[10], uint8_t STOP_BITS,uint8_t MODE_USART,uint8_t BITS)
{
    16a4:	af 92       	push	r10
    16a6:	cf 92       	push	r12
    16a8:	ef 92       	push	r14
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	d6 2f       	mov	r29, r22
    16b4:	14 2f       	mov	r17, r20
    16b6:	c2 2f       	mov	r28, r18
    16b8:	0a 2d       	mov	r16, r10

	UBRR0L=(uint8_t) ((F_CPU/BAUDRATE/16)-1);
    16ba:	9c 01       	movw	r18, r24
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	60 e4       	ldi	r22, 0x40	; 64
    16c2:	72 e4       	ldi	r23, 0x42	; 66
    16c4:	8f e0       	ldi	r24, 0x0F	; 15
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodsi4>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	82 0f       	add	r24, r18
    16d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H=(uint8_t) (((F_CPU/BAUDRATE/16)-1)>>8);
    16d4:	da 01       	movw	r26, r20
    16d6:	c9 01       	movw	r24, r18
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	a1 09       	sbc	r26, r1
    16dc:	b1 09       	sbc	r27, r1
    16de:	89 2f       	mov	r24, r25
    16e0:	9a 2f       	mov	r25, r26
    16e2:	ab 2f       	mov	r26, r27
    16e4:	bb 27       	eor	r27, r27
    16e6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UCSR0B|=(EN_RX<<RXEN0);
    16ea:	e1 ec       	ldi	r30, 0xC1	; 193
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	20 81       	ld	r18, Z
    16f0:	30 e1       	ldi	r19, 0x10	; 16
    16f2:	d3 9f       	mul	r29, r19
    16f4:	c0 01       	movw	r24, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	d2 2f       	mov	r29, r18
    16fa:	d8 2b       	or	r29, r24
    16fc:	d0 83       	st	Z, r29
	UCSR0B|=(EN_TX<<TXEN0);
    16fe:	80 81       	ld	r24, Z
    1700:	11 0f       	add	r17, r17
    1702:	11 0f       	add	r17, r17
    1704:	11 0f       	add	r17, r17
    1706:	18 2b       	or	r17, r24
    1708:	10 83       	st	Z, r17
	UCSR0B|=(EN_INT<<RXCIE0);
    170a:	80 81       	ld	r24, Z
    170c:	90 e8       	ldi	r25, 0x80	; 128
    170e:	c9 9f       	mul	r28, r25
    1710:	e0 01       	movw	r28, r0
    1712:	11 24       	eor	r1, r1
    1714:	c8 2b       	or	r28, r24
    1716:	c0 83       	st	Z, r28
	if (STOP_BITS==1)
    1718:	31 e0       	ldi	r19, 0x01	; 1
    171a:	e3 12       	cpse	r14, r19
    171c:	06 c0       	rjmp	.+12     	; 0x172a <USART_Init+0x86>
	{
		UCSR0C&=~(1<<USBS0);								/*		Stop Bits 1		*/
    171e:	e2 ec       	ldi	r30, 0xC2	; 194
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	87 7f       	andi	r24, 0xF7	; 247
    1726:	80 83       	st	Z, r24
    1728:	08 c0       	rjmp	.+16     	; 0x173a <USART_Init+0x96>
	} 
	else if (STOP_BITS==2)
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	e8 12       	cpse	r14, r24
    172e:	05 c0       	rjmp	.+10     	; 0x173a <USART_Init+0x96>
	{
		UCSR0C|=(1<<USBS0);									/*		Stop Bits 2		*/
    1730:	e2 ec       	ldi	r30, 0xC2	; 194
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 60       	ori	r24, 0x08	; 8
    1738:	80 83       	st	Z, r24
	}
	switch (MODE_USART)
    173a:	cc 20       	and	r12, r12
    173c:	21 f0       	breq	.+8      	; 0x1746 <USART_Init+0xa2>
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	c9 16       	cp	r12, r25
    1742:	51 f0       	breq	.+20     	; 0x1758 <USART_Init+0xb4>
    1744:	12 c0       	rjmp	.+36     	; 0x176a <USART_Init+0xc6>
	{
		case 0 :					/*		Mode Asynchronous		*/
			UCSR0C&=~(1<<UMSEL01);
    1746:	e2 ec       	ldi	r30, 0xC2	; 194
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	80 83       	st	Z, r24
			UCSR0C&=~(1<<UMSEL00);
    1750:	80 81       	ld	r24, Z
    1752:	8f 7b       	andi	r24, 0xBF	; 191
    1754:	80 83       	st	Z, r24
			break;
    1756:	11 c0       	rjmp	.+34     	; 0x177a <USART_Init+0xd6>
		case 1 :					/*		Mode Synchronous		*/
			UCSR0C&=~(1<<UMSEL01);
    1758:	e2 ec       	ldi	r30, 0xC2	; 194
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 77       	andi	r24, 0x7F	; 127
    1760:	80 83       	st	Z, r24
			UCSR0C|=(1<<UMSEL00);
    1762:	80 81       	ld	r24, Z
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	80 83       	st	Z, r24
			break;
    1768:	08 c0       	rjmp	.+16     	; 0x177a <USART_Init+0xd6>
		default :
			UCSR0C&=~(1<<UMSEL01);
    176a:	e2 ec       	ldi	r30, 0xC2	; 194
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8f 77       	andi	r24, 0x7F	; 127
    1772:	80 83       	st	Z, r24
			UCSR0C&=~(1<<UMSEL00);
    1774:	80 81       	ld	r24, Z
    1776:	8f 7b       	andi	r24, 0xBF	; 191
    1778:	80 83       	st	Z, r24
				UCSR0C|=(1<<UPM01);
				UCSR0C|=(1<<UPM00);
	}
	else
	{
				UCSR0C&=~(1<<UPM01);
    177a:	e2 ec       	ldi	r30, 0xC2	; 194
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 7d       	andi	r24, 0xDF	; 223
    1782:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UPM00);
    1784:	80 81       	ld	r24, Z
    1786:	8f 7e       	andi	r24, 0xEF	; 239
    1788:	80 83       	st	Z, r24
	}
	switch (BITS)
    178a:	06 30       	cpi	r16, 0x06	; 6
    178c:	b9 f0       	breq	.+46     	; 0x17bc <USART_Init+0x118>
    178e:	18 f4       	brcc	.+6      	; 0x1796 <USART_Init+0xf2>
    1790:	05 30       	cpi	r16, 0x05	; 5
    1792:	31 f0       	breq	.+12     	; 0x17a0 <USART_Init+0xfc>
    1794:	3d c0       	rjmp	.+122    	; 0x1810 <USART_Init+0x16c>
    1796:	07 30       	cpi	r16, 0x07	; 7
    1798:	f9 f0       	breq	.+62     	; 0x17d8 <USART_Init+0x134>
    179a:	08 30       	cpi	r16, 0x08	; 8
    179c:	59 f1       	breq	.+86     	; 0x17f4 <USART_Init+0x150>
    179e:	38 c0       	rjmp	.+112    	; 0x1810 <USART_Init+0x16c>
	{
		case 5 :					/*		5 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
    17a0:	e1 ec       	ldi	r30, 0xC1	; 193
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8b 7f       	andi	r24, 0xFB	; 251
    17a8:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ01);
    17aa:	e2 ec       	ldi	r30, 0xC2	; 194
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8b 7f       	andi	r24, 0xFB	; 251
    17b2:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ00);
    17b4:	80 81       	ld	r24, Z
    17b6:	8d 7f       	andi	r24, 0xFD	; 253
    17b8:	80 83       	st	Z, r24
			break;
    17ba:	37 c0       	rjmp	.+110    	; 0x182a <USART_Init+0x186>
		case 6 :					/*		6 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
    17bc:	e1 ec       	ldi	r30, 0xC1	; 193
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8b 7f       	andi	r24, 0xFB	; 251
    17c4:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ01);
    17c6:	e2 ec       	ldi	r30, 0xC2	; 194
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8b 7f       	andi	r24, 0xFB	; 251
    17ce:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
    17d0:	80 81       	ld	r24, Z
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	80 83       	st	Z, r24
			break;
    17d6:	29 c0       	rjmp	.+82     	; 0x182a <USART_Init+0x186>
		case 7 :					/*		7 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
    17d8:	e1 ec       	ldi	r30, 0xC1	; 193
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
    17e2:	e2 ec       	ldi	r30, 0xC2	; 194
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	80 83       	st	Z, r24
				UCSR0C&=~(1<<UCSZ00);
    17ec:	80 81       	ld	r24, Z
    17ee:	8d 7f       	andi	r24, 0xFD	; 253
    17f0:	80 83       	st	Z, r24
			break;
    17f2:	1b c0       	rjmp	.+54     	; 0x182a <USART_Init+0x186>
		case 8 :					/*		8 Bits		*/
				UCSR0B&=~(1<<UCSZ02);
    17f4:	e1 ec       	ldi	r30, 0xC1	; 193
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	8b 7f       	andi	r24, 0xFB	; 251
    17fc:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
    17fe:	e2 ec       	ldi	r30, 0xC2	; 194
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	84 60       	ori	r24, 0x04	; 4
    1806:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
    1808:	80 81       	ld	r24, Z
    180a:	82 60       	ori	r24, 0x02	; 2
    180c:	80 83       	st	Z, r24
			break;
    180e:	0d c0       	rjmp	.+26     	; 0x182a <USART_Init+0x186>
		default :
				UCSR0B&=~(1<<UCSZ02);
    1810:	e1 ec       	ldi	r30, 0xC1	; 193
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8b 7f       	andi	r24, 0xFB	; 251
    1818:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ01);
    181a:	e2 ec       	ldi	r30, 0xC2	; 194
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	80 83       	st	Z, r24
				UCSR0C|=(1<<UCSZ00);
    1824:	80 81       	ld	r24, Z
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	80 83       	st	Z, r24
			break;
	}
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ef 90       	pop	r14
    1834:	cf 90       	pop	r12
    1836:	af 90       	pop	r10
    1838:	08 95       	ret

0000183a <USART_TransmitData>:

void	USART_TransmitData(unsigned char Data)
{
	while(!(UCSR0A&(1<<UDRE0)));		/*	UDRE0=1 Entonces el buffer esta vacio y al tener ! entonces se vuelve False y sale del While */
    183a:	e0 ec       	ldi	r30, 0xC0	; 192
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	90 81       	ld	r25, Z
    1840:	95 ff       	sbrs	r25, 5
    1842:	fd cf       	rjmp	.-6      	; 0x183e <USART_TransmitData+0x4>
	UDR0=Data;							/*	Cargamos los datos en UDR0		*/
    1844:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1848:	08 95       	ret

0000184a <USART_TransmitString>:
}
void	USART_TransmitString(char *Data,uint8_t USART_Lenght)
{
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
		for (uint8_t USART_i=0;USART_i<USART_Lenght;USART_i++)
    1852:	66 23       	and	r22, r22
    1854:	71 f0       	breq	.+28     	; 0x1872 <USART_TransmitString+0x28>
    1856:	ec 01       	movw	r28, r24
    1858:	61 50       	subi	r22, 0x01	; 1
    185a:	06 2f       	mov	r16, r22
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	0f 5f       	subi	r16, 0xFF	; 255
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	08 0f       	add	r16, r24
    1864:	19 1f       	adc	r17, r25
		{
		USART_TransmitData(Data[USART_i]);
    1866:	89 91       	ld	r24, Y+
    1868:	0e 94 1d 0c 	call	0x183a	; 0x183a <USART_TransmitData>
	while(!(UCSR0A&(1<<UDRE0)));		/*	UDRE0=1 Entonces el buffer esta vacio y al tener ! entonces se vuelve False y sale del While */
	UDR0=Data;							/*	Cargamos los datos en UDR0		*/
}
void	USART_TransmitString(char *Data,uint8_t USART_Lenght)
{
		for (uint8_t USART_i=0;USART_i<USART_Lenght;USART_i++)
    186c:	c0 17       	cp	r28, r16
    186e:	d1 07       	cpc	r29, r17
    1870:	d1 f7       	brne	.-12     	; 0x1866 <USART_TransmitString+0x1c>
		{
		USART_TransmitData(Data[USART_i]);
		}
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <USART_ReceiveData>:
uint8_t USART_ReceiveData()
{
	while(!(UCSR0A&(1<<RXC0)));
    187c:	e0 ec       	ldi	r30, 0xC0	; 192
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 23       	and	r24, r24
    1884:	ec f7       	brge	.-6      	; 0x1880 <USART_ReceiveData+0x4>
	return UDR0;
    1886:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    188a:	08 95       	ret

0000188c <Float_to_Str>:
	char h[]=" beta ";
	USART_TransmitString(h,strlen(h)); Float_to_Str(Send,ZUMO.IMU.Beta); USART_TransmitString(Send,strlen(Send));

	sprintf(Send,"%s","\n\r");
	USART_TransmitString(Send,strlen(Send));	
}
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	c8 2f       	mov	r28, r24
    18a2:	d9 2f       	mov	r29, r25
    18a4:	4a 01       	movw	r8, r20
    18a6:	5b 01       	movw	r10, r22
    18a8:	cb 01       	movw	r24, r22
    18aa:	ba 01       	movw	r22, r20
    18ac:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <floor>
    18b0:	6b 01       	movw	r12, r22
    18b2:	7c 01       	movw	r14, r24
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	c5 01       	movw	r24, r10
    18ba:	b4 01       	movw	r22, r8
    18bc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e4       	ldi	r19, 0x40	; 64
    18c4:	4c e1       	ldi	r20, 0x1C	; 28
    18c6:	56 e4       	ldi	r21, 0x46	; 70
    18c8:	0e 94 04 10 	call	0x2008	; 0x2008 <__mulsf3>
    18cc:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
    18d0:	7f 93       	push	r23
    18d2:	6f 93       	push	r22
    18d4:	c7 01       	movw	r24, r14
    18d6:	b6 01       	movw	r22, r12
    18d8:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fixsfsi>
    18dc:	7f 93       	push	r23
    18de:	6f 93       	push	r22
    18e0:	88 e0       	ldi	r24, 0x08	; 8
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
    18f0:	8d b7       	in	r24, 0x3d	; 61
    18f2:	9e b7       	in	r25, 0x3e	; 62
    18f4:	08 96       	adiw	r24, 0x08	; 8
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	9e bf       	out	0x3e, r25	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	8d bf       	out	0x3d, r24	; 61
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	08 95       	ret

00001916 <Serial_Print_IMU>:
void Serial_Print_IMU()
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	67 97       	sbiw	r28, 0x17	; 23
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
	char Send[]=" ";
    192e:	80 e2       	ldi	r24, 0x20	; 32
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
	char a[]=" roll ";
    1936:	87 e0       	ldi	r24, 0x07	; 7
    1938:	e5 e4       	ldi	r30, 0x45	; 69
    193a:	f1 e0       	ldi	r31, 0x01	; 1
    193c:	de 01       	movw	r26, r28
    193e:	13 96       	adiw	r26, 0x03	; 3
    1940:	01 90       	ld	r0, Z+
    1942:	0d 92       	st	X+, r0
    1944:	8a 95       	dec	r24
    1946:	e1 f7       	brne	.-8      	; 0x1940 <Serial_Print_IMU+0x2a>
	USART_TransmitString(a,strlen(a));	Float_to_Str(Send,ZUMO.IMU.roll);	USART_TransmitString(Send,strlen(Send));
    1948:	ce 01       	movw	r24, r28
    194a:	03 96       	adiw	r24, 0x03	; 3
    194c:	fc 01       	movw	r30, r24
    194e:	01 90       	ld	r0, Z+
    1950:	00 20       	and	r0, r0
    1952:	e9 f7       	brne	.-6      	; 0x194e <Serial_Print_IMU+0x38>
    1954:	31 97       	sbiw	r30, 0x01	; 1
    1956:	bf 01       	movw	r22, r30
    1958:	68 1b       	sub	r22, r24
    195a:	79 0b       	sbc	r23, r25
    195c:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
    1960:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <ZUMO+0x49>
    1964:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <ZUMO+0x4a>
    1968:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <ZUMO+0x4b>
    196c:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <ZUMO+0x4c>
    1970:	8e 01       	movw	r16, r28
    1972:	0f 5f       	subi	r16, 0xFF	; 255
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	c8 01       	movw	r24, r16
    1978:	0e 94 46 0c 	call	0x188c	; 0x188c <Float_to_Str>
    197c:	f8 01       	movw	r30, r16
    197e:	01 90       	ld	r0, Z+
    1980:	00 20       	and	r0, r0
    1982:	e9 f7       	brne	.-6      	; 0x197e <Serial_Print_IMU+0x68>
    1984:	31 97       	sbiw	r30, 0x01	; 1
    1986:	bf 01       	movw	r22, r30
    1988:	60 1b       	sub	r22, r16
    198a:	71 0b       	sbc	r23, r17
    198c:	c8 01       	movw	r24, r16
    198e:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
	char b[]=" pitch ";
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	ec e4       	ldi	r30, 0x4C	; 76
    1996:	f1 e0       	ldi	r31, 0x01	; 1
    1998:	de 01       	movw	r26, r28
    199a:	1a 96       	adiw	r26, 0x0a	; 10
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	8a 95       	dec	r24
    19a2:	e1 f7       	brne	.-8      	; 0x199c <Serial_Print_IMU+0x86>
	USART_TransmitString(b,strlen(b));	Float_to_Str(Send,ZUMO.IMU.pitch); USART_TransmitString(Send,strlen(Send));
    19a4:	ce 01       	movw	r24, r28
    19a6:	0a 96       	adiw	r24, 0x0a	; 10
    19a8:	fc 01       	movw	r30, r24
    19aa:	01 90       	ld	r0, Z+
    19ac:	00 20       	and	r0, r0
    19ae:	e9 f7       	brne	.-6      	; 0x19aa <Serial_Print_IMU+0x94>
    19b0:	31 97       	sbiw	r30, 0x01	; 1
    19b2:	bf 01       	movw	r22, r30
    19b4:	68 1b       	sub	r22, r24
    19b6:	79 0b       	sbc	r23, r25
    19b8:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
    19bc:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <ZUMO+0x45>
    19c0:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <ZUMO+0x46>
    19c4:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <ZUMO+0x47>
    19c8:	70 91 e6 01 	lds	r23, 0x01E6	; 0x8001e6 <ZUMO+0x48>
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 46 0c 	call	0x188c	; 0x188c <Float_to_Str>
    19d2:	f8 01       	movw	r30, r16
    19d4:	01 90       	ld	r0, Z+
    19d6:	00 20       	and	r0, r0
    19d8:	e9 f7       	brne	.-6      	; 0x19d4 <Serial_Print_IMU+0xbe>
    19da:	31 97       	sbiw	r30, 0x01	; 1
    19dc:	bf 01       	movw	r22, r30
    19de:	60 1b       	sub	r22, r16
    19e0:	71 0b       	sbc	r23, r17
    19e2:	c8 01       	movw	r24, r16
    19e4:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
	char c[]=" yaw ";
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	e4 e5       	ldi	r30, 0x54	; 84
    19ec:	f1 e0       	ldi	r31, 0x01	; 1
    19ee:	de 01       	movw	r26, r28
    19f0:	52 96       	adiw	r26, 0x12	; 18
    19f2:	01 90       	ld	r0, Z+
    19f4:	0d 92       	st	X+, r0
    19f6:	8a 95       	dec	r24
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <Serial_Print_IMU+0xdc>
	USART_TransmitString(c,strlen(c)); 	Float_to_Str(Send,ZUMO.IMU.yaw); USART_TransmitString(Send,strlen(Send));
    19fa:	ce 01       	movw	r24, r28
    19fc:	42 96       	adiw	r24, 0x12	; 18
    19fe:	fc 01       	movw	r30, r24
    1a00:	01 90       	ld	r0, Z+
    1a02:	00 20       	and	r0, r0
    1a04:	e9 f7       	brne	.-6      	; 0x1a00 <Serial_Print_IMU+0xea>
    1a06:	31 97       	sbiw	r30, 0x01	; 1
    1a08:	bf 01       	movw	r22, r30
    1a0a:	68 1b       	sub	r22, r24
    1a0c:	79 0b       	sbc	r23, r25
    1a0e:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
    1a12:	40 91 df 01 	lds	r20, 0x01DF	; 0x8001df <ZUMO+0x41>
    1a16:	50 91 e0 01 	lds	r21, 0x01E0	; 0x8001e0 <ZUMO+0x42>
    1a1a:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <ZUMO+0x43>
    1a1e:	70 91 e2 01 	lds	r23, 0x01E2	; 0x8001e2 <ZUMO+0x44>
    1a22:	c8 01       	movw	r24, r16
    1a24:	0e 94 46 0c 	call	0x188c	; 0x188c <Float_to_Str>
    1a28:	f8 01       	movw	r30, r16
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	00 20       	and	r0, r0
    1a2e:	e9 f7       	brne	.-6      	; 0x1a2a <Serial_Print_IMU+0x114>
    1a30:	31 97       	sbiw	r30, 0x01	; 1
    1a32:	bf 01       	movw	r22, r30
    1a34:	60 1b       	sub	r22, r16
    1a36:	71 0b       	sbc	r23, r17
    1a38:	c8 01       	movw	r24, r16
    1a3a:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>

	sprintf(Send,"%s","\n\r");
    1a3e:	8a e0       	ldi	r24, 0x0A	; 10
    1a40:	9d e0       	ldi	r25, 0x0D	; 13
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	1b 82       	std	Y+3, r1	; 0x03
	USART_TransmitString(Send,strlen(Send));
    1a48:	f8 01       	movw	r30, r16
    1a4a:	01 90       	ld	r0, Z+
    1a4c:	00 20       	and	r0, r0
    1a4e:	e9 f7       	brne	.-6      	; 0x1a4a <Serial_Print_IMU+0x134>
    1a50:	31 97       	sbiw	r30, 0x01	; 1
    1a52:	bf 01       	movw	r22, r30
    1a54:	60 1b       	sub	r22, r16
    1a56:	71 0b       	sbc	r23, r17
    1a58:	c8 01       	movw	r24, r16
    1a5a:	0e 94 25 0c 	call	0x184a	; 0x184a <USART_TransmitString>
}
    1a5e:	67 96       	adiw	r28, 0x17	; 23
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <__subsf3>:
    1a74:	50 58       	subi	r21, 0x80	; 128

00001a76 <__addsf3>:
    1a76:	bb 27       	eor	r27, r27
    1a78:	aa 27       	eor	r26, r26
    1a7a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__addsf3x>
    1a7e:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_round>
    1a82:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_pscA>
    1a86:	38 f0       	brcs	.+14     	; 0x1a96 <__addsf3+0x20>
    1a88:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_pscB>
    1a8c:	20 f0       	brcs	.+8      	; 0x1a96 <__addsf3+0x20>
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <__addsf3+0x28>
    1a90:	9f 3f       	cpi	r25, 0xFF	; 255
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <__addsf3+0x24>
    1a94:	26 f4       	brtc	.+8      	; 0x1a9e <__addsf3+0x28>
    1a96:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_nan>
    1a9a:	0e f4       	brtc	.+2      	; 0x1a9e <__addsf3+0x28>
    1a9c:	e0 95       	com	r30
    1a9e:	e7 fb       	bst	r30, 7
    1aa0:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__fp_inf>

00001aa4 <__addsf3x>:
    1aa4:	e9 2f       	mov	r30, r25
    1aa6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_split3>
    1aaa:	58 f3       	brcs	.-42     	; 0x1a82 <__addsf3+0xc>
    1aac:	ba 17       	cp	r27, r26
    1aae:	62 07       	cpc	r22, r18
    1ab0:	73 07       	cpc	r23, r19
    1ab2:	84 07       	cpc	r24, r20
    1ab4:	95 07       	cpc	r25, r21
    1ab6:	20 f0       	brcs	.+8      	; 0x1ac0 <__addsf3x+0x1c>
    1ab8:	79 f4       	brne	.+30     	; 0x1ad8 <__addsf3x+0x34>
    1aba:	a6 f5       	brtc	.+104    	; 0x1b24 <__addsf3x+0x80>
    1abc:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_zero>
    1ac0:	0e f4       	brtc	.+2      	; 0x1ac4 <__addsf3x+0x20>
    1ac2:	e0 95       	com	r30
    1ac4:	0b 2e       	mov	r0, r27
    1ac6:	ba 2f       	mov	r27, r26
    1ac8:	a0 2d       	mov	r26, r0
    1aca:	0b 01       	movw	r0, r22
    1acc:	b9 01       	movw	r22, r18
    1ace:	90 01       	movw	r18, r0
    1ad0:	0c 01       	movw	r0, r24
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	a0 01       	movw	r20, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	ff 27       	eor	r31, r31
    1ada:	59 1b       	sub	r21, r25
    1adc:	99 f0       	breq	.+38     	; 0x1b04 <__addsf3x+0x60>
    1ade:	59 3f       	cpi	r21, 0xF9	; 249
    1ae0:	50 f4       	brcc	.+20     	; 0x1af6 <__addsf3x+0x52>
    1ae2:	50 3e       	cpi	r21, 0xE0	; 224
    1ae4:	68 f1       	brcs	.+90     	; 0x1b40 <__addsf3x+0x9c>
    1ae6:	1a 16       	cp	r1, r26
    1ae8:	f0 40       	sbci	r31, 0x00	; 0
    1aea:	a2 2f       	mov	r26, r18
    1aec:	23 2f       	mov	r18, r19
    1aee:	34 2f       	mov	r19, r20
    1af0:	44 27       	eor	r20, r20
    1af2:	58 5f       	subi	r21, 0xF8	; 248
    1af4:	f3 cf       	rjmp	.-26     	; 0x1adc <__addsf3x+0x38>
    1af6:	46 95       	lsr	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	a7 95       	ror	r26
    1afe:	f0 40       	sbci	r31, 0x00	; 0
    1b00:	53 95       	inc	r21
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__addsf3x+0x52>
    1b04:	7e f4       	brtc	.+30     	; 0x1b24 <__addsf3x+0x80>
    1b06:	1f 16       	cp	r1, r31
    1b08:	ba 0b       	sbc	r27, r26
    1b0a:	62 0b       	sbc	r22, r18
    1b0c:	73 0b       	sbc	r23, r19
    1b0e:	84 0b       	sbc	r24, r20
    1b10:	ba f0       	brmi	.+46     	; 0x1b40 <__addsf3x+0x9c>
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	a1 f0       	breq	.+40     	; 0x1b3e <__addsf3x+0x9a>
    1b16:	ff 0f       	add	r31, r31
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	c2 f7       	brpl	.-16     	; 0x1b12 <__addsf3x+0x6e>
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <__addsf3x+0x9c>
    1b24:	ba 0f       	add	r27, r26
    1b26:	62 1f       	adc	r22, r18
    1b28:	73 1f       	adc	r23, r19
    1b2a:	84 1f       	adc	r24, r20
    1b2c:	48 f4       	brcc	.+18     	; 0x1b40 <__addsf3x+0x9c>
    1b2e:	87 95       	ror	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f7 95       	ror	r31
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <__addsf3x+0x9a>
    1b3c:	b0 cf       	rjmp	.-160    	; 0x1a9e <__addsf3+0x28>
    1b3e:	93 95       	inc	r25
    1b40:	88 0f       	add	r24, r24
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <__addsf3x+0xa2>
    1b44:	99 27       	eor	r25, r25
    1b46:	ee 0f       	add	r30, r30
    1b48:	97 95       	ror	r25
    1b4a:	87 95       	ror	r24
    1b4c:	08 95       	ret
    1b4e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_pscA>
    1b52:	60 f0       	brcs	.+24     	; 0x1b6c <__addsf3x+0xc8>
    1b54:	80 e8       	ldi	r24, 0x80	; 128
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__addsf3x+0xb8>
    1b5a:	9e ef       	ldi	r25, 0xFE	; 254
    1b5c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_pscB>
    1b60:	28 f0       	brcs	.+10     	; 0x1b6c <__addsf3x+0xc8>
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	51 e0       	ldi	r21, 0x01	; 1
    1b66:	71 f4       	brne	.+28     	; 0x1b84 <atan2+0x10>
    1b68:	5e ef       	ldi	r21, 0xFE	; 254
    1b6a:	0c c0       	rjmp	.+24     	; 0x1b84 <atan2+0x10>
    1b6c:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_nan>
    1b70:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_zero>

00001b74 <atan2>:
    1b74:	e9 2f       	mov	r30, r25
    1b76:	e0 78       	andi	r30, 0x80	; 128
    1b78:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_split3>
    1b7c:	40 f3       	brcs	.-48     	; 0x1b4e <__addsf3x+0xaa>
    1b7e:	09 2e       	mov	r0, r25
    1b80:	05 2a       	or	r0, r21
    1b82:	b1 f3       	breq	.-20     	; 0x1b70 <__addsf3x+0xcc>
    1b84:	26 17       	cp	r18, r22
    1b86:	37 07       	cpc	r19, r23
    1b88:	48 07       	cpc	r20, r24
    1b8a:	59 07       	cpc	r21, r25
    1b8c:	38 f0       	brcs	.+14     	; 0x1b9c <atan2+0x28>
    1b8e:	0e 2e       	mov	r0, r30
    1b90:	07 f8       	bld	r0, 7
    1b92:	e0 25       	eor	r30, r0
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <atan2+0x3c>
    1b96:	e0 25       	eor	r30, r0
    1b98:	e0 64       	ori	r30, 0x40	; 64
    1b9a:	0a c0       	rjmp	.+20     	; 0x1bb0 <atan2+0x3c>
    1b9c:	ef 63       	ori	r30, 0x3F	; 63
    1b9e:	07 f8       	bld	r0, 7
    1ba0:	00 94       	com	r0
    1ba2:	07 fa       	bst	r0, 7
    1ba4:	db 01       	movw	r26, r22
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	9d 01       	movw	r18, r26
    1baa:	dc 01       	movw	r26, r24
    1bac:	ca 01       	movw	r24, r20
    1bae:	ad 01       	movw	r20, r26
    1bb0:	ef 93       	push	r30
    1bb2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__divsf3_pse>
    1bb6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__fp_round>
    1bba:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <atan>
    1bbe:	5f 91       	pop	r21
    1bc0:	55 23       	and	r21, r21
    1bc2:	39 f0       	breq	.+14     	; 0x1bd2 <atan2+0x5e>
    1bc4:	2b ed       	ldi	r18, 0xDB	; 219
    1bc6:	3f e0       	ldi	r19, 0x0F	; 15
    1bc8:	49 e4       	ldi	r20, 0x49	; 73
    1bca:	50 fd       	sbrc	r21, 0
    1bcc:	49 ec       	ldi	r20, 0xC9	; 201
    1bce:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__addsf3>
    1bd2:	08 95       	ret

00001bd4 <atan>:
    1bd4:	df 93       	push	r29
    1bd6:	dd 27       	eor	r29, r29
    1bd8:	b9 2f       	mov	r27, r25
    1bda:	bf 77       	andi	r27, 0x7F	; 127
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	16 16       	cp	r1, r22
    1be2:	17 06       	cpc	r1, r23
    1be4:	48 07       	cpc	r20, r24
    1be6:	5b 07       	cpc	r21, r27
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <atan+0x1c>
    1bea:	d9 2f       	mov	r29, r25
    1bec:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <inverse>
    1bf0:	9f 93       	push	r25
    1bf2:	8f 93       	push	r24
    1bf4:	7f 93       	push	r23
    1bf6:	6f 93       	push	r22
    1bf8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <square>
    1bfc:	e8 e6       	ldi	r30, 0x68	; 104
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__fp_powser>
    1c04:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__fp_round>
    1c08:	2f 91       	pop	r18
    1c0a:	3f 91       	pop	r19
    1c0c:	4f 91       	pop	r20
    1c0e:	5f 91       	pop	r21
    1c10:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3x>
    1c14:	dd 23       	and	r29, r29
    1c16:	51 f0       	breq	.+20     	; 0x1c2c <atan+0x58>
    1c18:	90 58       	subi	r25, 0x80	; 128
    1c1a:	a2 ea       	ldi	r26, 0xA2	; 162
    1c1c:	2a ed       	ldi	r18, 0xDA	; 218
    1c1e:	3f e0       	ldi	r19, 0x0F	; 15
    1c20:	49 ec       	ldi	r20, 0xC9	; 201
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	d0 78       	andi	r29, 0x80	; 128
    1c26:	5d 27       	eor	r21, r29
    1c28:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__addsf3x>
    1c2c:	df 91       	pop	r29
    1c2e:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_round>

00001c32 <__cmpsf2>:
    1c32:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fp_cmp>
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <__cmpsf2+0x8>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	08 95       	ret

00001c3c <__divsf3>:
    1c3c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__divsf3x>
    1c40:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_round>
    1c44:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_pscB>
    1c48:	58 f0       	brcs	.+22     	; 0x1c60 <__divsf3+0x24>
    1c4a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_pscA>
    1c4e:	40 f0       	brcs	.+16     	; 0x1c60 <__divsf3+0x24>
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <__divsf3+0x20>
    1c52:	5f 3f       	cpi	r21, 0xFF	; 255
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <__divsf3+0x24>
    1c56:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__fp_inf>
    1c5a:	51 11       	cpse	r21, r1
    1c5c:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>
    1c60:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_nan>

00001c64 <__divsf3x>:
    1c64:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_split3>
    1c68:	68 f3       	brcs	.-38     	; 0x1c44 <__divsf3+0x8>

00001c6a <__divsf3_pse>:
    1c6a:	99 23       	and	r25, r25
    1c6c:	b1 f3       	breq	.-20     	; 0x1c5a <__divsf3+0x1e>
    1c6e:	55 23       	and	r21, r21
    1c70:	91 f3       	breq	.-28     	; 0x1c56 <__divsf3+0x1a>
    1c72:	95 1b       	sub	r25, r21
    1c74:	55 0b       	sbc	r21, r21
    1c76:	bb 27       	eor	r27, r27
    1c78:	aa 27       	eor	r26, r26
    1c7a:	62 17       	cp	r22, r18
    1c7c:	73 07       	cpc	r23, r19
    1c7e:	84 07       	cpc	r24, r20
    1c80:	38 f0       	brcs	.+14     	; 0x1c90 <__divsf3_pse+0x26>
    1c82:	9f 5f       	subi	r25, 0xFF	; 255
    1c84:	5f 4f       	sbci	r21, 0xFF	; 255
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	44 1f       	adc	r20, r20
    1c8c:	aa 1f       	adc	r26, r26
    1c8e:	a9 f3       	breq	.-22     	; 0x1c7a <__divsf3_pse+0x10>
    1c90:	35 d0       	rcall	.+106    	; 0x1cfc <__divsf3_pse+0x92>
    1c92:	0e 2e       	mov	r0, r30
    1c94:	3a f0       	brmi	.+14     	; 0x1ca4 <__divsf3_pse+0x3a>
    1c96:	e0 e8       	ldi	r30, 0x80	; 128
    1c98:	32 d0       	rcall	.+100    	; 0x1cfe <__divsf3_pse+0x94>
    1c9a:	91 50       	subi	r25, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	e6 95       	lsr	r30
    1ca0:	00 1c       	adc	r0, r0
    1ca2:	ca f7       	brpl	.-14     	; 0x1c96 <__divsf3_pse+0x2c>
    1ca4:	2b d0       	rcall	.+86     	; 0x1cfc <__divsf3_pse+0x92>
    1ca6:	fe 2f       	mov	r31, r30
    1ca8:	29 d0       	rcall	.+82     	; 0x1cfc <__divsf3_pse+0x92>
    1caa:	66 0f       	add	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	26 17       	cp	r18, r22
    1cb4:	37 07       	cpc	r19, r23
    1cb6:	48 07       	cpc	r20, r24
    1cb8:	ab 07       	cpc	r26, r27
    1cba:	b0 e8       	ldi	r27, 0x80	; 128
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__divsf3_pse+0x56>
    1cbe:	bb 0b       	sbc	r27, r27
    1cc0:	80 2d       	mov	r24, r0
    1cc2:	bf 01       	movw	r22, r30
    1cc4:	ff 27       	eor	r31, r31
    1cc6:	93 58       	subi	r25, 0x83	; 131
    1cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cca:	3a f0       	brmi	.+14     	; 0x1cda <__divsf3_pse+0x70>
    1ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cce:	51 05       	cpc	r21, r1
    1cd0:	78 f0       	brcs	.+30     	; 0x1cf0 <__divsf3_pse+0x86>
    1cd2:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__fp_inf>
    1cd6:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	e4 f3       	brlt	.-8      	; 0x1cd6 <__divsf3_pse+0x6c>
    1cde:	98 3e       	cpi	r25, 0xE8	; 232
    1ce0:	d4 f3       	brlt	.-12     	; 0x1cd6 <__divsf3_pse+0x6c>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b7 95       	ror	r27
    1cea:	f7 95       	ror	r31
    1cec:	9f 5f       	subi	r25, 0xFF	; 255
    1cee:	c9 f7       	brne	.-14     	; 0x1ce2 <__divsf3_pse+0x78>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret
    1cfc:	e1 e0       	ldi	r30, 0x01	; 1
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	88 1f       	adc	r24, r24
    1d04:	bb 1f       	adc	r27, r27
    1d06:	62 17       	cp	r22, r18
    1d08:	73 07       	cpc	r23, r19
    1d0a:	84 07       	cpc	r24, r20
    1d0c:	ba 07       	cpc	r27, r26
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__divsf3_pse+0xae>
    1d10:	62 1b       	sub	r22, r18
    1d12:	73 0b       	sbc	r23, r19
    1d14:	84 0b       	sbc	r24, r20
    1d16:	ba 0b       	sbc	r27, r26
    1d18:	ee 1f       	adc	r30, r30
    1d1a:	88 f7       	brcc	.-30     	; 0x1cfe <__divsf3_pse+0x94>
    1d1c:	e0 95       	com	r30
    1d1e:	08 95       	ret

00001d20 <__fixsfsi>:
    1d20:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
    1d24:	68 94       	set
    1d26:	b1 11       	cpse	r27, r1
    1d28:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>
    1d2c:	08 95       	ret

00001d2e <__fixunssfsi>:
    1d2e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__fp_splitA>
    1d32:	88 f0       	brcs	.+34     	; 0x1d56 <__fixunssfsi+0x28>
    1d34:	9f 57       	subi	r25, 0x7F	; 127
    1d36:	98 f0       	brcs	.+38     	; 0x1d5e <__fixunssfsi+0x30>
    1d38:	b9 2f       	mov	r27, r25
    1d3a:	99 27       	eor	r25, r25
    1d3c:	b7 51       	subi	r27, 0x17	; 23
    1d3e:	b0 f0       	brcs	.+44     	; 0x1d6c <__fixunssfsi+0x3e>
    1d40:	e1 f0       	breq	.+56     	; 0x1d7a <__fixunssfsi+0x4c>
    1d42:	66 0f       	add	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	1a f0       	brmi	.+6      	; 0x1d52 <__fixunssfsi+0x24>
    1d4c:	ba 95       	dec	r27
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__fixunssfsi+0x14>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <__fixunssfsi+0x4c>
    1d52:	b1 30       	cpi	r27, 0x01	; 1
    1d54:	91 f0       	breq	.+36     	; 0x1d7a <__fixunssfsi+0x4c>
    1d56:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__fp_zero>
    1d5a:	b1 e0       	ldi	r27, 0x01	; 1
    1d5c:	08 95       	ret
    1d5e:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__fp_zero>
    1d62:	67 2f       	mov	r22, r23
    1d64:	78 2f       	mov	r23, r24
    1d66:	88 27       	eor	r24, r24
    1d68:	b8 5f       	subi	r27, 0xF8	; 248
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <__fixunssfsi+0x4c>
    1d6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1d6e:	cc f3       	brlt	.-14     	; 0x1d62 <__fixunssfsi+0x34>
    1d70:	86 95       	lsr	r24
    1d72:	77 95       	ror	r23
    1d74:	67 95       	ror	r22
    1d76:	b3 95       	inc	r27
    1d78:	d9 f7       	brne	.-10     	; 0x1d70 <__fixunssfsi+0x42>
    1d7a:	3e f4       	brtc	.+14     	; 0x1d8a <__fixunssfsi+0x5c>
    1d7c:	90 95       	com	r25
    1d7e:	80 95       	com	r24
    1d80:	70 95       	com	r23
    1d82:	61 95       	neg	r22
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	08 95       	ret

00001d8c <__floatunsisf>:
    1d8c:	e8 94       	clt
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <__floatsisf+0x12>

00001d90 <__floatsisf>:
    1d90:	97 fb       	bst	r25, 7
    1d92:	3e f4       	brtc	.+14     	; 0x1da2 <__floatsisf+0x12>
    1d94:	90 95       	com	r25
    1d96:	80 95       	com	r24
    1d98:	70 95       	com	r23
    1d9a:	61 95       	neg	r22
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	99 23       	and	r25, r25
    1da4:	a9 f0       	breq	.+42     	; 0x1dd0 <__floatsisf+0x40>
    1da6:	f9 2f       	mov	r31, r25
    1da8:	96 e9       	ldi	r25, 0x96	; 150
    1daa:	bb 27       	eor	r27, r27
    1dac:	93 95       	inc	r25
    1dae:	f6 95       	lsr	r31
    1db0:	87 95       	ror	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b7 95       	ror	r27
    1db8:	f1 11       	cpse	r31, r1
    1dba:	f8 cf       	rjmp	.-16     	; 0x1dac <__floatsisf+0x1c>
    1dbc:	fa f4       	brpl	.+62     	; 0x1dfc <__floatsisf+0x6c>
    1dbe:	bb 0f       	add	r27, r27
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__floatsisf+0x36>
    1dc2:	60 ff       	sbrs	r22, 0
    1dc4:	1b c0       	rjmp	.+54     	; 0x1dfc <__floatsisf+0x6c>
    1dc6:	6f 5f       	subi	r22, 0xFF	; 255
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dca:	8f 4f       	sbci	r24, 0xFF	; 255
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	16 c0       	rjmp	.+44     	; 0x1dfc <__floatsisf+0x6c>
    1dd0:	88 23       	and	r24, r24
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <__floatsisf+0x48>
    1dd4:	96 e9       	ldi	r25, 0x96	; 150
    1dd6:	11 c0       	rjmp	.+34     	; 0x1dfa <__floatsisf+0x6a>
    1dd8:	77 23       	and	r23, r23
    1dda:	21 f0       	breq	.+8      	; 0x1de4 <__floatsisf+0x54>
    1ddc:	9e e8       	ldi	r25, 0x8E	; 142
    1dde:	87 2f       	mov	r24, r23
    1de0:	76 2f       	mov	r23, r22
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <__floatsisf+0x5e>
    1de4:	66 23       	and	r22, r22
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <__floatsisf+0x74>
    1de8:	96 e8       	ldi	r25, 0x86	; 134
    1dea:	86 2f       	mov	r24, r22
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	2a f0       	brmi	.+10     	; 0x1dfc <__floatsisf+0x6c>
    1df2:	9a 95       	dec	r25
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	da f7       	brpl	.-10     	; 0x1df2 <__floatsisf+0x62>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	96 95       	lsr	r25
    1e00:	87 95       	ror	r24
    1e02:	97 f9       	bld	r25, 7
    1e04:	08 95       	ret

00001e06 <floor>:
    1e06:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_trunc>
    1e0a:	90 f0       	brcs	.+36     	; 0x1e30 <floor+0x2a>
    1e0c:	9f 37       	cpi	r25, 0x7F	; 127
    1e0e:	48 f4       	brcc	.+18     	; 0x1e22 <floor+0x1c>
    1e10:	91 11       	cpse	r25, r1
    1e12:	16 f0       	brts	.+4      	; 0x1e18 <floor+0x12>
    1e14:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	80 e8       	ldi	r24, 0x80	; 128
    1e1e:	9f eb       	ldi	r25, 0xBF	; 191
    1e20:	08 95       	ret
    1e22:	26 f4       	brtc	.+8      	; 0x1e2c <floor+0x26>
    1e24:	1b 16       	cp	r1, r27
    1e26:	61 1d       	adc	r22, r1
    1e28:	71 1d       	adc	r23, r1
    1e2a:	81 1d       	adc	r24, r1
    1e2c:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__fp_mintl>
    1e30:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__fp_mpack>

00001e34 <__fp_cmp>:
    1e34:	99 0f       	add	r25, r25
    1e36:	00 08       	sbc	r0, r0
    1e38:	55 0f       	add	r21, r21
    1e3a:	aa 0b       	sbc	r26, r26
    1e3c:	e0 e8       	ldi	r30, 0x80	; 128
    1e3e:	fe ef       	ldi	r31, 0xFE	; 254
    1e40:	16 16       	cp	r1, r22
    1e42:	17 06       	cpc	r1, r23
    1e44:	e8 07       	cpc	r30, r24
    1e46:	f9 07       	cpc	r31, r25
    1e48:	c0 f0       	brcs	.+48     	; 0x1e7a <__fp_cmp+0x46>
    1e4a:	12 16       	cp	r1, r18
    1e4c:	13 06       	cpc	r1, r19
    1e4e:	e4 07       	cpc	r30, r20
    1e50:	f5 07       	cpc	r31, r21
    1e52:	98 f0       	brcs	.+38     	; 0x1e7a <__fp_cmp+0x46>
    1e54:	62 1b       	sub	r22, r18
    1e56:	73 0b       	sbc	r23, r19
    1e58:	84 0b       	sbc	r24, r20
    1e5a:	95 0b       	sbc	r25, r21
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <__fp_cmp+0x38>
    1e5e:	0a 26       	eor	r0, r26
    1e60:	61 f0       	breq	.+24     	; 0x1e7a <__fp_cmp+0x46>
    1e62:	23 2b       	or	r18, r19
    1e64:	24 2b       	or	r18, r20
    1e66:	25 2b       	or	r18, r21
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <__fp_cmp+0x3e>
    1e6a:	08 95       	ret
    1e6c:	0a 26       	eor	r0, r26
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__fp_cmp+0x3e>
    1e70:	a1 40       	sbci	r26, 0x01	; 1
    1e72:	a6 95       	lsr	r26
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	81 1d       	adc	r24, r1
    1e78:	81 1d       	adc	r24, r1
    1e7a:	08 95       	ret

00001e7c <__fp_inf>:
    1e7c:	97 f9       	bld	r25, 7
    1e7e:	9f 67       	ori	r25, 0x7F	; 127
    1e80:	80 e8       	ldi	r24, 0x80	; 128
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	08 95       	ret

00001e88 <__fp_mintl>:
    1e88:	88 23       	and	r24, r24
    1e8a:	71 f4       	brne	.+28     	; 0x1ea8 <__fp_mintl+0x20>
    1e8c:	77 23       	and	r23, r23
    1e8e:	21 f0       	breq	.+8      	; 0x1e98 <__fp_mintl+0x10>
    1e90:	98 50       	subi	r25, 0x08	; 8
    1e92:	87 2b       	or	r24, r23
    1e94:	76 2f       	mov	r23, r22
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <__fp_mintl+0x1e>
    1e98:	66 23       	and	r22, r22
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <__fp_mintl+0x18>
    1e9c:	99 27       	eor	r25, r25
    1e9e:	0d c0       	rjmp	.+26     	; 0x1eba <__fp_mintl+0x32>
    1ea0:	90 51       	subi	r25, 0x10	; 16
    1ea2:	86 2b       	or	r24, r22
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	2a f0       	brmi	.+10     	; 0x1eb4 <__fp_mintl+0x2c>
    1eaa:	9a 95       	dec	r25
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	da f7       	brpl	.-10     	; 0x1eaa <__fp_mintl+0x22>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	96 95       	lsr	r25
    1eb8:	87 95       	ror	r24
    1eba:	97 f9       	bld	r25, 7
    1ebc:	08 95       	ret

00001ebe <__fp_mpack>:
    1ebe:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec0:	31 f0       	breq	.+12     	; 0x1ece <__fp_mpack_finite+0xc>

00001ec2 <__fp_mpack_finite>:
    1ec2:	91 50       	subi	r25, 0x01	; 1
    1ec4:	20 f4       	brcc	.+8      	; 0x1ece <__fp_mpack_finite+0xc>
    1ec6:	87 95       	ror	r24
    1ec8:	77 95       	ror	r23
    1eca:	67 95       	ror	r22
    1ecc:	b7 95       	ror	r27
    1ece:	88 0f       	add	r24, r24
    1ed0:	91 1d       	adc	r25, r1
    1ed2:	96 95       	lsr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	97 f9       	bld	r25, 7
    1ed8:	08 95       	ret

00001eda <__fp_nan>:
    1eda:	9f ef       	ldi	r25, 0xFF	; 255
    1edc:	80 ec       	ldi	r24, 0xC0	; 192
    1ede:	08 95       	ret

00001ee0 <__fp_powser>:
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	1f 93       	push	r17
    1ee6:	0f 93       	push	r16
    1ee8:	ff 92       	push	r15
    1eea:	ef 92       	push	r14
    1eec:	df 92       	push	r13
    1eee:	7b 01       	movw	r14, r22
    1ef0:	8c 01       	movw	r16, r24
    1ef2:	68 94       	set
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <__fp_powser+0x22>
    1ef6:	da 2e       	mov	r13, r26
    1ef8:	ef 01       	movw	r28, r30
    1efa:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3x>
    1efe:	fe 01       	movw	r30, r28
    1f00:	e8 94       	clt
    1f02:	a5 91       	lpm	r26, Z+
    1f04:	25 91       	lpm	r18, Z+
    1f06:	35 91       	lpm	r19, Z+
    1f08:	45 91       	lpm	r20, Z+
    1f0a:	55 91       	lpm	r21, Z+
    1f0c:	a6 f3       	brts	.-24     	; 0x1ef6 <__fp_powser+0x16>
    1f0e:	ef 01       	movw	r28, r30
    1f10:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__addsf3x>
    1f14:	fe 01       	movw	r30, r28
    1f16:	97 01       	movw	r18, r14
    1f18:	a8 01       	movw	r20, r16
    1f1a:	da 94       	dec	r13
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <__fp_powser+0x18>
    1f1e:	df 90       	pop	r13
    1f20:	ef 90       	pop	r14
    1f22:	ff 90       	pop	r15
    1f24:	0f 91       	pop	r16
    1f26:	1f 91       	pop	r17
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <__fp_pscA>:
    1f2e:	00 24       	eor	r0, r0
    1f30:	0a 94       	dec	r0
    1f32:	16 16       	cp	r1, r22
    1f34:	17 06       	cpc	r1, r23
    1f36:	18 06       	cpc	r1, r24
    1f38:	09 06       	cpc	r0, r25
    1f3a:	08 95       	ret

00001f3c <__fp_pscB>:
    1f3c:	00 24       	eor	r0, r0
    1f3e:	0a 94       	dec	r0
    1f40:	12 16       	cp	r1, r18
    1f42:	13 06       	cpc	r1, r19
    1f44:	14 06       	cpc	r1, r20
    1f46:	05 06       	cpc	r0, r21
    1f48:	08 95       	ret

00001f4a <__fp_round>:
    1f4a:	09 2e       	mov	r0, r25
    1f4c:	03 94       	inc	r0
    1f4e:	00 0c       	add	r0, r0
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <__fp_round+0xc>
    1f52:	88 23       	and	r24, r24
    1f54:	52 f0       	brmi	.+20     	; 0x1f6a <__fp_round+0x20>
    1f56:	bb 0f       	add	r27, r27
    1f58:	40 f4       	brcc	.+16     	; 0x1f6a <__fp_round+0x20>
    1f5a:	bf 2b       	or	r27, r31
    1f5c:	11 f4       	brne	.+4      	; 0x1f62 <__fp_round+0x18>
    1f5e:	60 ff       	sbrs	r22, 0
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <__fp_round+0x20>
    1f62:	6f 5f       	subi	r22, 0xFF	; 255
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	8f 4f       	sbci	r24, 0xFF	; 255
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	08 95       	ret

00001f6c <__fp_split3>:
    1f6c:	57 fd       	sbrc	r21, 7
    1f6e:	90 58       	subi	r25, 0x80	; 128
    1f70:	44 0f       	add	r20, r20
    1f72:	55 1f       	adc	r21, r21
    1f74:	59 f0       	breq	.+22     	; 0x1f8c <__fp_splitA+0x10>
    1f76:	5f 3f       	cpi	r21, 0xFF	; 255
    1f78:	71 f0       	breq	.+28     	; 0x1f96 <__fp_splitA+0x1a>
    1f7a:	47 95       	ror	r20

00001f7c <__fp_splitA>:
    1f7c:	88 0f       	add	r24, r24
    1f7e:	97 fb       	bst	r25, 7
    1f80:	99 1f       	adc	r25, r25
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <__fp_splitA+0x20>
    1f84:	9f 3f       	cpi	r25, 0xFF	; 255
    1f86:	79 f0       	breq	.+30     	; 0x1fa6 <__fp_splitA+0x2a>
    1f88:	87 95       	ror	r24
    1f8a:	08 95       	ret
    1f8c:	12 16       	cp	r1, r18
    1f8e:	13 06       	cpc	r1, r19
    1f90:	14 06       	cpc	r1, r20
    1f92:	55 1f       	adc	r21, r21
    1f94:	f2 cf       	rjmp	.-28     	; 0x1f7a <__fp_split3+0xe>
    1f96:	46 95       	lsr	r20
    1f98:	f1 df       	rcall	.-30     	; 0x1f7c <__fp_splitA>
    1f9a:	08 c0       	rjmp	.+16     	; 0x1fac <__fp_splitA+0x30>
    1f9c:	16 16       	cp	r1, r22
    1f9e:	17 06       	cpc	r1, r23
    1fa0:	18 06       	cpc	r1, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	f1 cf       	rjmp	.-30     	; 0x1f88 <__fp_splitA+0xc>
    1fa6:	86 95       	lsr	r24
    1fa8:	71 05       	cpc	r23, r1
    1faa:	61 05       	cpc	r22, r1
    1fac:	08 94       	sec
    1fae:	08 95       	ret

00001fb0 <__fp_trunc>:
    1fb0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__fp_splitA>
    1fb4:	a0 f0       	brcs	.+40     	; 0x1fde <__fp_trunc+0x2e>
    1fb6:	be e7       	ldi	r27, 0x7E	; 126
    1fb8:	b9 17       	cp	r27, r25
    1fba:	88 f4       	brcc	.+34     	; 0x1fde <__fp_trunc+0x2e>
    1fbc:	bb 27       	eor	r27, r27
    1fbe:	9f 38       	cpi	r25, 0x8F	; 143
    1fc0:	60 f4       	brcc	.+24     	; 0x1fda <__fp_trunc+0x2a>
    1fc2:	16 16       	cp	r1, r22
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	67 2f       	mov	r22, r23
    1fc8:	78 2f       	mov	r23, r24
    1fca:	88 27       	eor	r24, r24
    1fcc:	98 5f       	subi	r25, 0xF8	; 248
    1fce:	f7 cf       	rjmp	.-18     	; 0x1fbe <__fp_trunc+0xe>
    1fd0:	86 95       	lsr	r24
    1fd2:	77 95       	ror	r23
    1fd4:	67 95       	ror	r22
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	93 95       	inc	r25
    1fda:	96 39       	cpi	r25, 0x96	; 150
    1fdc:	c8 f3       	brcs	.-14     	; 0x1fd0 <__fp_trunc+0x20>
    1fde:	08 95       	ret

00001fe0 <__fp_zero>:
    1fe0:	e8 94       	clt

00001fe2 <__fp_szero>:
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	66 27       	eor	r22, r22
    1fe6:	77 27       	eor	r23, r23
    1fe8:	cb 01       	movw	r24, r22
    1fea:	97 f9       	bld	r25, 7
    1fec:	08 95       	ret

00001fee <__gesf2>:
    1fee:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__fp_cmp>
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <__gesf2+0x8>
    1ff4:	8f ef       	ldi	r24, 0xFF	; 255
    1ff6:	08 95       	ret

00001ff8 <inverse>:
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	80 e8       	ldi	r24, 0x80	; 128
    2002:	9f e3       	ldi	r25, 0x3F	; 63
    2004:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__divsf3>

00002008 <__mulsf3>:
    2008:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3x>
    200c:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_round>
    2010:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_pscA>
    2014:	38 f0       	brcs	.+14     	; 0x2024 <__mulsf3+0x1c>
    2016:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__fp_pscB>
    201a:	20 f0       	brcs	.+8      	; 0x2024 <__mulsf3+0x1c>
    201c:	95 23       	and	r25, r21
    201e:	11 f0       	breq	.+4      	; 0x2024 <__mulsf3+0x1c>
    2020:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__fp_inf>
    2024:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__fp_nan>
    2028:	11 24       	eor	r1, r1
    202a:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>

0000202e <__mulsf3x>:
    202e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_split3>
    2032:	70 f3       	brcs	.-36     	; 0x2010 <__mulsf3+0x8>

00002034 <__mulsf3_pse>:
    2034:	95 9f       	mul	r25, r21
    2036:	c1 f3       	breq	.-16     	; 0x2028 <__mulsf3+0x20>
    2038:	95 0f       	add	r25, r21
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	55 1f       	adc	r21, r21
    203e:	62 9f       	mul	r22, r18
    2040:	f0 01       	movw	r30, r0
    2042:	72 9f       	mul	r23, r18
    2044:	bb 27       	eor	r27, r27
    2046:	f0 0d       	add	r31, r0
    2048:	b1 1d       	adc	r27, r1
    204a:	63 9f       	mul	r22, r19
    204c:	aa 27       	eor	r26, r26
    204e:	f0 0d       	add	r31, r0
    2050:	b1 1d       	adc	r27, r1
    2052:	aa 1f       	adc	r26, r26
    2054:	64 9f       	mul	r22, r20
    2056:	66 27       	eor	r22, r22
    2058:	b0 0d       	add	r27, r0
    205a:	a1 1d       	adc	r26, r1
    205c:	66 1f       	adc	r22, r22
    205e:	82 9f       	mul	r24, r18
    2060:	22 27       	eor	r18, r18
    2062:	b0 0d       	add	r27, r0
    2064:	a1 1d       	adc	r26, r1
    2066:	62 1f       	adc	r22, r18
    2068:	73 9f       	mul	r23, r19
    206a:	b0 0d       	add	r27, r0
    206c:	a1 1d       	adc	r26, r1
    206e:	62 1f       	adc	r22, r18
    2070:	83 9f       	mul	r24, r19
    2072:	a0 0d       	add	r26, r0
    2074:	61 1d       	adc	r22, r1
    2076:	22 1f       	adc	r18, r18
    2078:	74 9f       	mul	r23, r20
    207a:	33 27       	eor	r19, r19
    207c:	a0 0d       	add	r26, r0
    207e:	61 1d       	adc	r22, r1
    2080:	23 1f       	adc	r18, r19
    2082:	84 9f       	mul	r24, r20
    2084:	60 0d       	add	r22, r0
    2086:	21 1d       	adc	r18, r1
    2088:	82 2f       	mov	r24, r18
    208a:	76 2f       	mov	r23, r22
    208c:	6a 2f       	mov	r22, r26
    208e:	11 24       	eor	r1, r1
    2090:	9f 57       	subi	r25, 0x7F	; 127
    2092:	50 40       	sbci	r21, 0x00	; 0
    2094:	9a f0       	brmi	.+38     	; 0x20bc <__mulsf3_pse+0x88>
    2096:	f1 f0       	breq	.+60     	; 0x20d4 <__mulsf3_pse+0xa0>
    2098:	88 23       	and	r24, r24
    209a:	4a f0       	brmi	.+18     	; 0x20ae <__mulsf3_pse+0x7a>
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	bb 1f       	adc	r27, r27
    20a2:	66 1f       	adc	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	88 1f       	adc	r24, r24
    20a8:	91 50       	subi	r25, 0x01	; 1
    20aa:	50 40       	sbci	r21, 0x00	; 0
    20ac:	a9 f7       	brne	.-22     	; 0x2098 <__mulsf3_pse+0x64>
    20ae:	9e 3f       	cpi	r25, 0xFE	; 254
    20b0:	51 05       	cpc	r21, r1
    20b2:	80 f0       	brcs	.+32     	; 0x20d4 <__mulsf3_pse+0xa0>
    20b4:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__fp_inf>
    20b8:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__fp_szero>
    20bc:	5f 3f       	cpi	r21, 0xFF	; 255
    20be:	e4 f3       	brlt	.-8      	; 0x20b8 <__mulsf3_pse+0x84>
    20c0:	98 3e       	cpi	r25, 0xE8	; 232
    20c2:	d4 f3       	brlt	.-12     	; 0x20b8 <__mulsf3_pse+0x84>
    20c4:	86 95       	lsr	r24
    20c6:	77 95       	ror	r23
    20c8:	67 95       	ror	r22
    20ca:	b7 95       	ror	r27
    20cc:	f7 95       	ror	r31
    20ce:	e7 95       	ror	r30
    20d0:	9f 5f       	subi	r25, 0xFF	; 255
    20d2:	c1 f7       	brne	.-16     	; 0x20c4 <__mulsf3_pse+0x90>
    20d4:	fe 2b       	or	r31, r30
    20d6:	88 0f       	add	r24, r24
    20d8:	91 1d       	adc	r25, r1
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <square>:
    20e2:	9b 01       	movw	r18, r22
    20e4:	ac 01       	movw	r20, r24
    20e6:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__mulsf3>

000020ea <__udivmodsi4>:
    20ea:	a1 e2       	ldi	r26, 0x21	; 33
    20ec:	1a 2e       	mov	r1, r26
    20ee:	aa 1b       	sub	r26, r26
    20f0:	bb 1b       	sub	r27, r27
    20f2:	fd 01       	movw	r30, r26
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <__udivmodsi4_ep>

000020f6 <__udivmodsi4_loop>:
    20f6:	aa 1f       	adc	r26, r26
    20f8:	bb 1f       	adc	r27, r27
    20fa:	ee 1f       	adc	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	a2 17       	cp	r26, r18
    2100:	b3 07       	cpc	r27, r19
    2102:	e4 07       	cpc	r30, r20
    2104:	f5 07       	cpc	r31, r21
    2106:	20 f0       	brcs	.+8      	; 0x2110 <__udivmodsi4_ep>
    2108:	a2 1b       	sub	r26, r18
    210a:	b3 0b       	sbc	r27, r19
    210c:	e4 0b       	sbc	r30, r20
    210e:	f5 0b       	sbc	r31, r21

00002110 <__udivmodsi4_ep>:
    2110:	66 1f       	adc	r22, r22
    2112:	77 1f       	adc	r23, r23
    2114:	88 1f       	adc	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	1a 94       	dec	r1
    211a:	69 f7       	brne	.-38     	; 0x20f6 <__udivmodsi4_loop>
    211c:	60 95       	com	r22
    211e:	70 95       	com	r23
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	9b 01       	movw	r18, r22
    2126:	ac 01       	movw	r20, r24
    2128:	bd 01       	movw	r22, r26
    212a:	cf 01       	movw	r24, r30
    212c:	08 95       	ret

0000212e <__umulhisi3>:
    212e:	a2 9f       	mul	r26, r18
    2130:	b0 01       	movw	r22, r0
    2132:	b3 9f       	mul	r27, r19
    2134:	c0 01       	movw	r24, r0
    2136:	a3 9f       	mul	r26, r19
    2138:	70 0d       	add	r23, r0
    213a:	81 1d       	adc	r24, r1
    213c:	11 24       	eor	r1, r1
    213e:	91 1d       	adc	r25, r1
    2140:	b2 9f       	mul	r27, r18
    2142:	70 0d       	add	r23, r0
    2144:	81 1d       	adc	r24, r1
    2146:	11 24       	eor	r1, r1
    2148:	91 1d       	adc	r25, r1
    214a:	08 95       	ret

0000214c <__muluhisi3>:
    214c:	0e 94 97 10 	call	0x212e	; 0x212e <__umulhisi3>
    2150:	a5 9f       	mul	r26, r21
    2152:	90 0d       	add	r25, r0
    2154:	b4 9f       	mul	r27, r20
    2156:	90 0d       	add	r25, r0
    2158:	a4 9f       	mul	r26, r20
    215a:	80 0d       	add	r24, r0
    215c:	91 1d       	adc	r25, r1
    215e:	11 24       	eor	r1, r1
    2160:	08 95       	ret

00002162 <sprintf>:
    2162:	ae e0       	ldi	r26, 0x0E	; 14
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 eb       	ldi	r30, 0xB7	; 183
    2168:	f0 e1       	ldi	r31, 0x10	; 16
    216a:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x1c>
    216e:	0d 89       	ldd	r16, Y+21	; 0x15
    2170:	1e 89       	ldd	r17, Y+22	; 0x16
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	8c 83       	std	Y+4, r24	; 0x04
    2176:	1a 83       	std	Y+2, r17	; 0x02
    2178:	09 83       	std	Y+1, r16	; 0x01
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	9f e7       	ldi	r25, 0x7F	; 127
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	ae 01       	movw	r20, r28
    2184:	47 5e       	subi	r20, 0xE7	; 231
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	6f 89       	ldd	r22, Y+23	; 0x17
    218a:	78 8d       	ldd	r23, Y+24	; 0x18
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vfprintf>
    2194:	ef 81       	ldd	r30, Y+7	; 0x07
    2196:	f8 85       	ldd	r31, Y+8	; 0x08
    2198:	e0 0f       	add	r30, r16
    219a:	f1 1f       	adc	r31, r17
    219c:	10 82       	st	Z, r1
    219e:	2e 96       	adiw	r28, 0x0e	; 14
    21a0:	e4 e0       	ldi	r30, 0x04	; 4
    21a2:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x1c>

000021a6 <vfprintf>:
    21a6:	ab e0       	ldi	r26, 0x0B	; 11
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e9 ed       	ldi	r30, 0xD9	; 217
    21ac:	f0 e1       	ldi	r31, 0x10	; 16
    21ae:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
    21b2:	6c 01       	movw	r12, r24
    21b4:	7b 01       	movw	r14, r22
    21b6:	8a 01       	movw	r16, r20
    21b8:	fc 01       	movw	r30, r24
    21ba:	17 82       	std	Z+7, r1	; 0x07
    21bc:	16 82       	std	Z+6, r1	; 0x06
    21be:	83 81       	ldd	r24, Z+3	; 0x03
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	cc c1       	rjmp	.+920    	; 0x255c <vfprintf+0x3b6>
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	3c 01       	movw	r6, r24
    21ca:	f6 01       	movw	r30, r12
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	f7 01       	movw	r30, r14
    21d0:	93 fd       	sbrc	r25, 3
    21d2:	85 91       	lpm	r24, Z+
    21d4:	93 ff       	sbrs	r25, 3
    21d6:	81 91       	ld	r24, Z+
    21d8:	7f 01       	movw	r14, r30
    21da:	88 23       	and	r24, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <vfprintf+0x3a>
    21de:	ba c1       	rjmp	.+884    	; 0x2554 <vfprintf+0x3ae>
    21e0:	85 32       	cpi	r24, 0x25	; 37
    21e2:	39 f4       	brne	.+14     	; 0x21f2 <vfprintf+0x4c>
    21e4:	93 fd       	sbrc	r25, 3
    21e6:	85 91       	lpm	r24, Z+
    21e8:	93 ff       	sbrs	r25, 3
    21ea:	81 91       	ld	r24, Z+
    21ec:	7f 01       	movw	r14, r30
    21ee:	85 32       	cpi	r24, 0x25	; 37
    21f0:	29 f4       	brne	.+10     	; 0x21fc <vfprintf+0x56>
    21f2:	b6 01       	movw	r22, r12
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    21fa:	e7 cf       	rjmp	.-50     	; 0x21ca <vfprintf+0x24>
    21fc:	91 2c       	mov	r9, r1
    21fe:	21 2c       	mov	r2, r1
    2200:	31 2c       	mov	r3, r1
    2202:	ff e1       	ldi	r31, 0x1F	; 31
    2204:	f3 15       	cp	r31, r3
    2206:	d8 f0       	brcs	.+54     	; 0x223e <vfprintf+0x98>
    2208:	8b 32       	cpi	r24, 0x2B	; 43
    220a:	79 f0       	breq	.+30     	; 0x222a <vfprintf+0x84>
    220c:	38 f4       	brcc	.+14     	; 0x221c <vfprintf+0x76>
    220e:	80 32       	cpi	r24, 0x20	; 32
    2210:	79 f0       	breq	.+30     	; 0x2230 <vfprintf+0x8a>
    2212:	83 32       	cpi	r24, 0x23	; 35
    2214:	a1 f4       	brne	.+40     	; 0x223e <vfprintf+0x98>
    2216:	23 2d       	mov	r18, r3
    2218:	20 61       	ori	r18, 0x10	; 16
    221a:	1d c0       	rjmp	.+58     	; 0x2256 <vfprintf+0xb0>
    221c:	8d 32       	cpi	r24, 0x2D	; 45
    221e:	61 f0       	breq	.+24     	; 0x2238 <vfprintf+0x92>
    2220:	80 33       	cpi	r24, 0x30	; 48
    2222:	69 f4       	brne	.+26     	; 0x223e <vfprintf+0x98>
    2224:	23 2d       	mov	r18, r3
    2226:	21 60       	ori	r18, 0x01	; 1
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <vfprintf+0xb0>
    222a:	83 2d       	mov	r24, r3
    222c:	82 60       	ori	r24, 0x02	; 2
    222e:	38 2e       	mov	r3, r24
    2230:	e3 2d       	mov	r30, r3
    2232:	e4 60       	ori	r30, 0x04	; 4
    2234:	3e 2e       	mov	r3, r30
    2236:	2a c0       	rjmp	.+84     	; 0x228c <vfprintf+0xe6>
    2238:	f3 2d       	mov	r31, r3
    223a:	f8 60       	ori	r31, 0x08	; 8
    223c:	1d c0       	rjmp	.+58     	; 0x2278 <vfprintf+0xd2>
    223e:	37 fc       	sbrc	r3, 7
    2240:	2d c0       	rjmp	.+90     	; 0x229c <vfprintf+0xf6>
    2242:	20 ed       	ldi	r18, 0xD0	; 208
    2244:	28 0f       	add	r18, r24
    2246:	2a 30       	cpi	r18, 0x0A	; 10
    2248:	40 f0       	brcs	.+16     	; 0x225a <vfprintf+0xb4>
    224a:	8e 32       	cpi	r24, 0x2E	; 46
    224c:	b9 f4       	brne	.+46     	; 0x227c <vfprintf+0xd6>
    224e:	36 fc       	sbrc	r3, 6
    2250:	81 c1       	rjmp	.+770    	; 0x2554 <vfprintf+0x3ae>
    2252:	23 2d       	mov	r18, r3
    2254:	20 64       	ori	r18, 0x40	; 64
    2256:	32 2e       	mov	r3, r18
    2258:	19 c0       	rjmp	.+50     	; 0x228c <vfprintf+0xe6>
    225a:	36 fe       	sbrs	r3, 6
    225c:	06 c0       	rjmp	.+12     	; 0x226a <vfprintf+0xc4>
    225e:	8a e0       	ldi	r24, 0x0A	; 10
    2260:	98 9e       	mul	r9, r24
    2262:	20 0d       	add	r18, r0
    2264:	11 24       	eor	r1, r1
    2266:	92 2e       	mov	r9, r18
    2268:	11 c0       	rjmp	.+34     	; 0x228c <vfprintf+0xe6>
    226a:	ea e0       	ldi	r30, 0x0A	; 10
    226c:	2e 9e       	mul	r2, r30
    226e:	20 0d       	add	r18, r0
    2270:	11 24       	eor	r1, r1
    2272:	22 2e       	mov	r2, r18
    2274:	f3 2d       	mov	r31, r3
    2276:	f0 62       	ori	r31, 0x20	; 32
    2278:	3f 2e       	mov	r3, r31
    227a:	08 c0       	rjmp	.+16     	; 0x228c <vfprintf+0xe6>
    227c:	8c 36       	cpi	r24, 0x6C	; 108
    227e:	21 f4       	brne	.+8      	; 0x2288 <vfprintf+0xe2>
    2280:	83 2d       	mov	r24, r3
    2282:	80 68       	ori	r24, 0x80	; 128
    2284:	38 2e       	mov	r3, r24
    2286:	02 c0       	rjmp	.+4      	; 0x228c <vfprintf+0xe6>
    2288:	88 36       	cpi	r24, 0x68	; 104
    228a:	41 f4       	brne	.+16     	; 0x229c <vfprintf+0xf6>
    228c:	f7 01       	movw	r30, r14
    228e:	93 fd       	sbrc	r25, 3
    2290:	85 91       	lpm	r24, Z+
    2292:	93 ff       	sbrs	r25, 3
    2294:	81 91       	ld	r24, Z+
    2296:	7f 01       	movw	r14, r30
    2298:	81 11       	cpse	r24, r1
    229a:	b3 cf       	rjmp	.-154    	; 0x2202 <vfprintf+0x5c>
    229c:	98 2f       	mov	r25, r24
    229e:	9f 7d       	andi	r25, 0xDF	; 223
    22a0:	95 54       	subi	r25, 0x45	; 69
    22a2:	93 30       	cpi	r25, 0x03	; 3
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <vfprintf+0x10a>
    22a6:	0c 5f       	subi	r16, 0xFC	; 252
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	9f e3       	ldi	r25, 0x3F	; 63
    22ac:	99 83       	std	Y+1, r25	; 0x01
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <vfprintf+0x124>
    22b0:	83 36       	cpi	r24, 0x63	; 99
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <vfprintf+0x11a>
    22b4:	83 37       	cpi	r24, 0x73	; 115
    22b6:	71 f0       	breq	.+28     	; 0x22d4 <vfprintf+0x12e>
    22b8:	83 35       	cpi	r24, 0x53	; 83
    22ba:	09 f0       	breq	.+2      	; 0x22be <vfprintf+0x118>
    22bc:	59 c0       	rjmp	.+178    	; 0x2370 <vfprintf+0x1ca>
    22be:	21 c0       	rjmp	.+66     	; 0x2302 <vfprintf+0x15c>
    22c0:	f8 01       	movw	r30, r16
    22c2:	80 81       	ld	r24, Z
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	0e 5f       	subi	r16, 0xFE	; 254
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	88 24       	eor	r8, r8
    22cc:	83 94       	inc	r8
    22ce:	91 2c       	mov	r9, r1
    22d0:	53 01       	movw	r10, r6
    22d2:	13 c0       	rjmp	.+38     	; 0x22fa <vfprintf+0x154>
    22d4:	28 01       	movw	r4, r16
    22d6:	f2 e0       	ldi	r31, 0x02	; 2
    22d8:	4f 0e       	add	r4, r31
    22da:	51 1c       	adc	r5, r1
    22dc:	f8 01       	movw	r30, r16
    22de:	a0 80       	ld	r10, Z
    22e0:	b1 80       	ldd	r11, Z+1	; 0x01
    22e2:	36 fe       	sbrs	r3, 6
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x146>
    22e6:	69 2d       	mov	r22, r9
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <vfprintf+0x14a>
    22ec:	6f ef       	ldi	r22, 0xFF	; 255
    22ee:	7f ef       	ldi	r23, 0xFF	; 255
    22f0:	c5 01       	movw	r24, r10
    22f2:	0e 94 bf 12 	call	0x257e	; 0x257e <strnlen>
    22f6:	4c 01       	movw	r8, r24
    22f8:	82 01       	movw	r16, r4
    22fa:	f3 2d       	mov	r31, r3
    22fc:	ff 77       	andi	r31, 0x7F	; 127
    22fe:	3f 2e       	mov	r3, r31
    2300:	16 c0       	rjmp	.+44     	; 0x232e <vfprintf+0x188>
    2302:	28 01       	movw	r4, r16
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	42 0e       	add	r4, r18
    2308:	51 1c       	adc	r5, r1
    230a:	f8 01       	movw	r30, r16
    230c:	a0 80       	ld	r10, Z
    230e:	b1 80       	ldd	r11, Z+1	; 0x01
    2310:	36 fe       	sbrs	r3, 6
    2312:	03 c0       	rjmp	.+6      	; 0x231a <vfprintf+0x174>
    2314:	69 2d       	mov	r22, r9
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <vfprintf+0x178>
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	7f ef       	ldi	r23, 0xFF	; 255
    231e:	c5 01       	movw	r24, r10
    2320:	0e 94 b4 12 	call	0x2568	; 0x2568 <strnlen_P>
    2324:	4c 01       	movw	r8, r24
    2326:	f3 2d       	mov	r31, r3
    2328:	f0 68       	ori	r31, 0x80	; 128
    232a:	3f 2e       	mov	r3, r31
    232c:	82 01       	movw	r16, r4
    232e:	33 fc       	sbrc	r3, 3
    2330:	1b c0       	rjmp	.+54     	; 0x2368 <vfprintf+0x1c2>
    2332:	82 2d       	mov	r24, r2
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	88 16       	cp	r8, r24
    2338:	99 06       	cpc	r9, r25
    233a:	b0 f4       	brcc	.+44     	; 0x2368 <vfprintf+0x1c2>
    233c:	b6 01       	movw	r22, r12
    233e:	80 e2       	ldi	r24, 0x20	; 32
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    2346:	2a 94       	dec	r2
    2348:	f4 cf       	rjmp	.-24     	; 0x2332 <vfprintf+0x18c>
    234a:	f5 01       	movw	r30, r10
    234c:	37 fc       	sbrc	r3, 7
    234e:	85 91       	lpm	r24, Z+
    2350:	37 fe       	sbrs	r3, 7
    2352:	81 91       	ld	r24, Z+
    2354:	5f 01       	movw	r10, r30
    2356:	b6 01       	movw	r22, r12
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    235e:	21 10       	cpse	r2, r1
    2360:	2a 94       	dec	r2
    2362:	21 e0       	ldi	r18, 0x01	; 1
    2364:	82 1a       	sub	r8, r18
    2366:	91 08       	sbc	r9, r1
    2368:	81 14       	cp	r8, r1
    236a:	91 04       	cpc	r9, r1
    236c:	71 f7       	brne	.-36     	; 0x234a <vfprintf+0x1a4>
    236e:	e8 c0       	rjmp	.+464    	; 0x2540 <vfprintf+0x39a>
    2370:	84 36       	cpi	r24, 0x64	; 100
    2372:	11 f0       	breq	.+4      	; 0x2378 <vfprintf+0x1d2>
    2374:	89 36       	cpi	r24, 0x69	; 105
    2376:	41 f5       	brne	.+80     	; 0x23c8 <vfprintf+0x222>
    2378:	f8 01       	movw	r30, r16
    237a:	37 fe       	sbrs	r3, 7
    237c:	07 c0       	rjmp	.+14     	; 0x238c <vfprintf+0x1e6>
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	0c 5f       	subi	r16, 0xFC	; 252
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	08 c0       	rjmp	.+16     	; 0x239c <vfprintf+0x1f6>
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	07 2e       	mov	r0, r23
    2392:	00 0c       	add	r0, r0
    2394:	88 0b       	sbc	r24, r24
    2396:	99 0b       	sbc	r25, r25
    2398:	0e 5f       	subi	r16, 0xFE	; 254
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	f3 2d       	mov	r31, r3
    239e:	ff 76       	andi	r31, 0x6F	; 111
    23a0:	3f 2e       	mov	r3, r31
    23a2:	97 ff       	sbrs	r25, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <vfprintf+0x212>
    23a6:	90 95       	com	r25
    23a8:	80 95       	com	r24
    23aa:	70 95       	com	r23
    23ac:	61 95       	neg	r22
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	8f 4f       	sbci	r24, 0xFF	; 255
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	f0 68       	ori	r31, 0x80	; 128
    23b6:	3f 2e       	mov	r3, r31
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	a3 01       	movw	r20, r6
    23be:	0e 94 06 13 	call	0x260c	; 0x260c <__ultoa_invert>
    23c2:	88 2e       	mov	r8, r24
    23c4:	86 18       	sub	r8, r6
    23c6:	45 c0       	rjmp	.+138    	; 0x2452 <vfprintf+0x2ac>
    23c8:	85 37       	cpi	r24, 0x75	; 117
    23ca:	31 f4       	brne	.+12     	; 0x23d8 <vfprintf+0x232>
    23cc:	23 2d       	mov	r18, r3
    23ce:	2f 7e       	andi	r18, 0xEF	; 239
    23d0:	b2 2e       	mov	r11, r18
    23d2:	2a e0       	ldi	r18, 0x0A	; 10
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	25 c0       	rjmp	.+74     	; 0x2422 <vfprintf+0x27c>
    23d8:	93 2d       	mov	r25, r3
    23da:	99 7f       	andi	r25, 0xF9	; 249
    23dc:	b9 2e       	mov	r11, r25
    23de:	8f 36       	cpi	r24, 0x6F	; 111
    23e0:	c1 f0       	breq	.+48     	; 0x2412 <vfprintf+0x26c>
    23e2:	18 f4       	brcc	.+6      	; 0x23ea <vfprintf+0x244>
    23e4:	88 35       	cpi	r24, 0x58	; 88
    23e6:	79 f0       	breq	.+30     	; 0x2406 <vfprintf+0x260>
    23e8:	b5 c0       	rjmp	.+362    	; 0x2554 <vfprintf+0x3ae>
    23ea:	80 37       	cpi	r24, 0x70	; 112
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <vfprintf+0x24e>
    23ee:	88 37       	cpi	r24, 0x78	; 120
    23f0:	21 f0       	breq	.+8      	; 0x23fa <vfprintf+0x254>
    23f2:	b0 c0       	rjmp	.+352    	; 0x2554 <vfprintf+0x3ae>
    23f4:	e9 2f       	mov	r30, r25
    23f6:	e0 61       	ori	r30, 0x10	; 16
    23f8:	be 2e       	mov	r11, r30
    23fa:	b4 fe       	sbrs	r11, 4
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <vfprintf+0x272>
    23fe:	fb 2d       	mov	r31, r11
    2400:	f4 60       	ori	r31, 0x04	; 4
    2402:	bf 2e       	mov	r11, r31
    2404:	09 c0       	rjmp	.+18     	; 0x2418 <vfprintf+0x272>
    2406:	34 fe       	sbrs	r3, 4
    2408:	0a c0       	rjmp	.+20     	; 0x241e <vfprintf+0x278>
    240a:	29 2f       	mov	r18, r25
    240c:	26 60       	ori	r18, 0x06	; 6
    240e:	b2 2e       	mov	r11, r18
    2410:	06 c0       	rjmp	.+12     	; 0x241e <vfprintf+0x278>
    2412:	28 e0       	ldi	r18, 0x08	; 8
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <vfprintf+0x27c>
    2418:	20 e1       	ldi	r18, 0x10	; 16
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0x27c>
    241e:	20 e1       	ldi	r18, 0x10	; 16
    2420:	32 e0       	ldi	r19, 0x02	; 2
    2422:	f8 01       	movw	r30, r16
    2424:	b7 fe       	sbrs	r11, 7
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <vfprintf+0x290>
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	0c 5f       	subi	r16, 0xFC	; 252
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <vfprintf+0x29c>
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 5f       	subi	r16, 0xFE	; 254
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	a3 01       	movw	r20, r6
    2444:	0e 94 06 13 	call	0x260c	; 0x260c <__ultoa_invert>
    2448:	88 2e       	mov	r8, r24
    244a:	86 18       	sub	r8, r6
    244c:	fb 2d       	mov	r31, r11
    244e:	ff 77       	andi	r31, 0x7F	; 127
    2450:	3f 2e       	mov	r3, r31
    2452:	36 fe       	sbrs	r3, 6
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <vfprintf+0x2ca>
    2456:	23 2d       	mov	r18, r3
    2458:	2e 7f       	andi	r18, 0xFE	; 254
    245a:	a2 2e       	mov	r10, r18
    245c:	89 14       	cp	r8, r9
    245e:	58 f4       	brcc	.+22     	; 0x2476 <vfprintf+0x2d0>
    2460:	34 fe       	sbrs	r3, 4
    2462:	0b c0       	rjmp	.+22     	; 0x247a <vfprintf+0x2d4>
    2464:	32 fc       	sbrc	r3, 2
    2466:	09 c0       	rjmp	.+18     	; 0x247a <vfprintf+0x2d4>
    2468:	83 2d       	mov	r24, r3
    246a:	8e 7e       	andi	r24, 0xEE	; 238
    246c:	a8 2e       	mov	r10, r24
    246e:	05 c0       	rjmp	.+10     	; 0x247a <vfprintf+0x2d4>
    2470:	b8 2c       	mov	r11, r8
    2472:	a3 2c       	mov	r10, r3
    2474:	03 c0       	rjmp	.+6      	; 0x247c <vfprintf+0x2d6>
    2476:	b8 2c       	mov	r11, r8
    2478:	01 c0       	rjmp	.+2      	; 0x247c <vfprintf+0x2d6>
    247a:	b9 2c       	mov	r11, r9
    247c:	a4 fe       	sbrs	r10, 4
    247e:	0f c0       	rjmp	.+30     	; 0x249e <vfprintf+0x2f8>
    2480:	fe 01       	movw	r30, r28
    2482:	e8 0d       	add	r30, r8
    2484:	f1 1d       	adc	r31, r1
    2486:	80 81       	ld	r24, Z
    2488:	80 33       	cpi	r24, 0x30	; 48
    248a:	21 f4       	brne	.+8      	; 0x2494 <vfprintf+0x2ee>
    248c:	9a 2d       	mov	r25, r10
    248e:	99 7e       	andi	r25, 0xE9	; 233
    2490:	a9 2e       	mov	r10, r25
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <vfprintf+0x300>
    2494:	a2 fe       	sbrs	r10, 2
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <vfprintf+0x2fe>
    2498:	b3 94       	inc	r11
    249a:	b3 94       	inc	r11
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <vfprintf+0x300>
    249e:	8a 2d       	mov	r24, r10
    24a0:	86 78       	andi	r24, 0x86	; 134
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <vfprintf+0x300>
    24a4:	b3 94       	inc	r11
    24a6:	a3 fc       	sbrc	r10, 3
    24a8:	11 c0       	rjmp	.+34     	; 0x24cc <vfprintf+0x326>
    24aa:	a0 fe       	sbrs	r10, 0
    24ac:	06 c0       	rjmp	.+12     	; 0x24ba <vfprintf+0x314>
    24ae:	b2 14       	cp	r11, r2
    24b0:	88 f4       	brcc	.+34     	; 0x24d4 <vfprintf+0x32e>
    24b2:	28 0c       	add	r2, r8
    24b4:	92 2c       	mov	r9, r2
    24b6:	9b 18       	sub	r9, r11
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <vfprintf+0x330>
    24ba:	b2 14       	cp	r11, r2
    24bc:	60 f4       	brcc	.+24     	; 0x24d6 <vfprintf+0x330>
    24be:	b6 01       	movw	r22, r12
    24c0:	80 e2       	ldi	r24, 0x20	; 32
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    24c8:	b3 94       	inc	r11
    24ca:	f7 cf       	rjmp	.-18     	; 0x24ba <vfprintf+0x314>
    24cc:	b2 14       	cp	r11, r2
    24ce:	18 f4       	brcc	.+6      	; 0x24d6 <vfprintf+0x330>
    24d0:	2b 18       	sub	r2, r11
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x332>
    24d4:	98 2c       	mov	r9, r8
    24d6:	21 2c       	mov	r2, r1
    24d8:	a4 fe       	sbrs	r10, 4
    24da:	10 c0       	rjmp	.+32     	; 0x24fc <vfprintf+0x356>
    24dc:	b6 01       	movw	r22, r12
    24de:	80 e3       	ldi	r24, 0x30	; 48
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    24e6:	a2 fe       	sbrs	r10, 2
    24e8:	17 c0       	rjmp	.+46     	; 0x2518 <vfprintf+0x372>
    24ea:	a1 fc       	sbrc	r10, 1
    24ec:	03 c0       	rjmp	.+6      	; 0x24f4 <vfprintf+0x34e>
    24ee:	88 e7       	ldi	r24, 0x78	; 120
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x352>
    24f4:	88 e5       	ldi	r24, 0x58	; 88
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	b6 01       	movw	r22, r12
    24fa:	0c c0       	rjmp	.+24     	; 0x2514 <vfprintf+0x36e>
    24fc:	8a 2d       	mov	r24, r10
    24fe:	86 78       	andi	r24, 0x86	; 134
    2500:	59 f0       	breq	.+22     	; 0x2518 <vfprintf+0x372>
    2502:	a1 fe       	sbrs	r10, 1
    2504:	02 c0       	rjmp	.+4      	; 0x250a <vfprintf+0x364>
    2506:	8b e2       	ldi	r24, 0x2B	; 43
    2508:	01 c0       	rjmp	.+2      	; 0x250c <vfprintf+0x366>
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	a7 fc       	sbrc	r10, 7
    250e:	8d e2       	ldi	r24, 0x2D	; 45
    2510:	b6 01       	movw	r22, r12
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    2518:	89 14       	cp	r8, r9
    251a:	38 f4       	brcc	.+14     	; 0x252a <vfprintf+0x384>
    251c:	b6 01       	movw	r22, r12
    251e:	80 e3       	ldi	r24, 0x30	; 48
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    2526:	9a 94       	dec	r9
    2528:	f7 cf       	rjmp	.-18     	; 0x2518 <vfprintf+0x372>
    252a:	8a 94       	dec	r8
    252c:	f3 01       	movw	r30, r6
    252e:	e8 0d       	add	r30, r8
    2530:	f1 1d       	adc	r31, r1
    2532:	80 81       	ld	r24, Z
    2534:	b6 01       	movw	r22, r12
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    253c:	81 10       	cpse	r8, r1
    253e:	f5 cf       	rjmp	.-22     	; 0x252a <vfprintf+0x384>
    2540:	22 20       	and	r2, r2
    2542:	09 f4       	brne	.+2      	; 0x2546 <vfprintf+0x3a0>
    2544:	42 ce       	rjmp	.-892    	; 0x21ca <vfprintf+0x24>
    2546:	b6 01       	movw	r22, r12
    2548:	80 e2       	ldi	r24, 0x20	; 32
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 ca 12 	call	0x2594	; 0x2594 <fputc>
    2550:	2a 94       	dec	r2
    2552:	f6 cf       	rjmp	.-20     	; 0x2540 <vfprintf+0x39a>
    2554:	f6 01       	movw	r30, r12
    2556:	86 81       	ldd	r24, Z+6	; 0x06
    2558:	97 81       	ldd	r25, Z+7	; 0x07
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0x3ba>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	9f ef       	ldi	r25, 0xFF	; 255
    2560:	2b 96       	adiw	r28, 0x0b	; 11
    2562:	e2 e1       	ldi	r30, 0x12	; 18
    2564:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00002568 <strnlen_P>:
    2568:	fc 01       	movw	r30, r24
    256a:	05 90       	lpm	r0, Z+
    256c:	61 50       	subi	r22, 0x01	; 1
    256e:	70 40       	sbci	r23, 0x00	; 0
    2570:	01 10       	cpse	r0, r1
    2572:	d8 f7       	brcc	.-10     	; 0x256a <strnlen_P+0x2>
    2574:	80 95       	com	r24
    2576:	90 95       	com	r25
    2578:	8e 0f       	add	r24, r30
    257a:	9f 1f       	adc	r25, r31
    257c:	08 95       	ret

0000257e <strnlen>:
    257e:	fc 01       	movw	r30, r24
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	70 40       	sbci	r23, 0x00	; 0
    2584:	01 90       	ld	r0, Z+
    2586:	01 10       	cpse	r0, r1
    2588:	d8 f7       	brcc	.-10     	; 0x2580 <strnlen+0x2>
    258a:	80 95       	com	r24
    258c:	90 95       	com	r25
    258e:	8e 0f       	add	r24, r30
    2590:	9f 1f       	adc	r25, r31
    2592:	08 95       	ret

00002594 <fputc>:
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	fb 01       	movw	r30, r22
    259e:	23 81       	ldd	r18, Z+3	; 0x03
    25a0:	21 fd       	sbrc	r18, 1
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <fputc+0x16>
    25a4:	8f ef       	ldi	r24, 0xFF	; 255
    25a6:	9f ef       	ldi	r25, 0xFF	; 255
    25a8:	2c c0       	rjmp	.+88     	; 0x2602 <fputc+0x6e>
    25aa:	22 ff       	sbrs	r18, 2
    25ac:	16 c0       	rjmp	.+44     	; 0x25da <fputc+0x46>
    25ae:	46 81       	ldd	r20, Z+6	; 0x06
    25b0:	57 81       	ldd	r21, Z+7	; 0x07
    25b2:	24 81       	ldd	r18, Z+4	; 0x04
    25b4:	35 81       	ldd	r19, Z+5	; 0x05
    25b6:	42 17       	cp	r20, r18
    25b8:	53 07       	cpc	r21, r19
    25ba:	44 f4       	brge	.+16     	; 0x25cc <fputc+0x38>
    25bc:	a0 81       	ld	r26, Z
    25be:	b1 81       	ldd	r27, Z+1	; 0x01
    25c0:	9d 01       	movw	r18, r26
    25c2:	2f 5f       	subi	r18, 0xFF	; 255
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	31 83       	std	Z+1, r19	; 0x01
    25c8:	20 83       	st	Z, r18
    25ca:	8c 93       	st	X, r24
    25cc:	26 81       	ldd	r18, Z+6	; 0x06
    25ce:	37 81       	ldd	r19, Z+7	; 0x07
    25d0:	2f 5f       	subi	r18, 0xFF	; 255
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	37 83       	std	Z+7, r19	; 0x07
    25d6:	26 83       	std	Z+6, r18	; 0x06
    25d8:	14 c0       	rjmp	.+40     	; 0x2602 <fputc+0x6e>
    25da:	8b 01       	movw	r16, r22
    25dc:	ec 01       	movw	r28, r24
    25de:	fb 01       	movw	r30, r22
    25e0:	00 84       	ldd	r0, Z+8	; 0x08
    25e2:	f1 85       	ldd	r31, Z+9	; 0x09
    25e4:	e0 2d       	mov	r30, r0
    25e6:	09 95       	icall
    25e8:	89 2b       	or	r24, r25
    25ea:	e1 f6       	brne	.-72     	; 0x25a4 <fputc+0x10>
    25ec:	d8 01       	movw	r26, r16
    25ee:	16 96       	adiw	r26, 0x06	; 6
    25f0:	8d 91       	ld	r24, X+
    25f2:	9c 91       	ld	r25, X
    25f4:	17 97       	sbiw	r26, 0x07	; 7
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	17 96       	adiw	r26, 0x07	; 7
    25fa:	9c 93       	st	X, r25
    25fc:	8e 93       	st	-X, r24
    25fe:	16 97       	sbiw	r26, 0x06	; 6
    2600:	ce 01       	movw	r24, r28
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <__ultoa_invert>:
    260c:	fa 01       	movw	r30, r20
    260e:	aa 27       	eor	r26, r26
    2610:	28 30       	cpi	r18, 0x08	; 8
    2612:	51 f1       	breq	.+84     	; 0x2668 <__ultoa_invert+0x5c>
    2614:	20 31       	cpi	r18, 0x10	; 16
    2616:	81 f1       	breq	.+96     	; 0x2678 <__ultoa_invert+0x6c>
    2618:	e8 94       	clt
    261a:	6f 93       	push	r22
    261c:	6e 7f       	andi	r22, 0xFE	; 254
    261e:	6e 5f       	subi	r22, 0xFE	; 254
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	8f 4f       	sbci	r24, 0xFF	; 255
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	af 4f       	sbci	r26, 0xFF	; 255
    2628:	b1 e0       	ldi	r27, 0x01	; 1
    262a:	3e d0       	rcall	.+124    	; 0x26a8 <__ultoa_invert+0x9c>
    262c:	b4 e0       	ldi	r27, 0x04	; 4
    262e:	3c d0       	rcall	.+120    	; 0x26a8 <__ultoa_invert+0x9c>
    2630:	67 0f       	add	r22, r23
    2632:	78 1f       	adc	r23, r24
    2634:	89 1f       	adc	r24, r25
    2636:	9a 1f       	adc	r25, r26
    2638:	a1 1d       	adc	r26, r1
    263a:	68 0f       	add	r22, r24
    263c:	79 1f       	adc	r23, r25
    263e:	8a 1f       	adc	r24, r26
    2640:	91 1d       	adc	r25, r1
    2642:	a1 1d       	adc	r26, r1
    2644:	6a 0f       	add	r22, r26
    2646:	71 1d       	adc	r23, r1
    2648:	81 1d       	adc	r24, r1
    264a:	91 1d       	adc	r25, r1
    264c:	a1 1d       	adc	r26, r1
    264e:	20 d0       	rcall	.+64     	; 0x2690 <__ultoa_invert+0x84>
    2650:	09 f4       	brne	.+2      	; 0x2654 <__ultoa_invert+0x48>
    2652:	68 94       	set
    2654:	3f 91       	pop	r19
    2656:	2a e0       	ldi	r18, 0x0A	; 10
    2658:	26 9f       	mul	r18, r22
    265a:	11 24       	eor	r1, r1
    265c:	30 19       	sub	r19, r0
    265e:	30 5d       	subi	r19, 0xD0	; 208
    2660:	31 93       	st	Z+, r19
    2662:	de f6       	brtc	.-74     	; 0x261a <__ultoa_invert+0xe>
    2664:	cf 01       	movw	r24, r30
    2666:	08 95       	ret
    2668:	46 2f       	mov	r20, r22
    266a:	47 70       	andi	r20, 0x07	; 7
    266c:	40 5d       	subi	r20, 0xD0	; 208
    266e:	41 93       	st	Z+, r20
    2670:	b3 e0       	ldi	r27, 0x03	; 3
    2672:	0f d0       	rcall	.+30     	; 0x2692 <__ultoa_invert+0x86>
    2674:	c9 f7       	brne	.-14     	; 0x2668 <__ultoa_invert+0x5c>
    2676:	f6 cf       	rjmp	.-20     	; 0x2664 <__ultoa_invert+0x58>
    2678:	46 2f       	mov	r20, r22
    267a:	4f 70       	andi	r20, 0x0F	; 15
    267c:	40 5d       	subi	r20, 0xD0	; 208
    267e:	4a 33       	cpi	r20, 0x3A	; 58
    2680:	18 f0       	brcs	.+6      	; 0x2688 <__ultoa_invert+0x7c>
    2682:	49 5d       	subi	r20, 0xD9	; 217
    2684:	31 fd       	sbrc	r19, 1
    2686:	40 52       	subi	r20, 0x20	; 32
    2688:	41 93       	st	Z+, r20
    268a:	02 d0       	rcall	.+4      	; 0x2690 <__ultoa_invert+0x84>
    268c:	a9 f7       	brne	.-22     	; 0x2678 <__ultoa_invert+0x6c>
    268e:	ea cf       	rjmp	.-44     	; 0x2664 <__ultoa_invert+0x58>
    2690:	b4 e0       	ldi	r27, 0x04	; 4
    2692:	a6 95       	lsr	r26
    2694:	97 95       	ror	r25
    2696:	87 95       	ror	r24
    2698:	77 95       	ror	r23
    269a:	67 95       	ror	r22
    269c:	ba 95       	dec	r27
    269e:	c9 f7       	brne	.-14     	; 0x2692 <__ultoa_invert+0x86>
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	61 05       	cpc	r22, r1
    26a4:	71 05       	cpc	r23, r1
    26a6:	08 95       	ret
    26a8:	9b 01       	movw	r18, r22
    26aa:	ac 01       	movw	r20, r24
    26ac:	0a 2e       	mov	r0, r26
    26ae:	06 94       	lsr	r0
    26b0:	57 95       	ror	r21
    26b2:	47 95       	ror	r20
    26b4:	37 95       	ror	r19
    26b6:	27 95       	ror	r18
    26b8:	ba 95       	dec	r27
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <__ultoa_invert+0xa2>
    26bc:	62 0f       	add	r22, r18
    26be:	73 1f       	adc	r23, r19
    26c0:	84 1f       	adc	r24, r20
    26c2:	95 1f       	adc	r25, r21
    26c4:	a0 1d       	adc	r26, r0
    26c6:	08 95       	ret

000026c8 <__prologue_saves__>:
    26c8:	2f 92       	push	r2
    26ca:	3f 92       	push	r3
    26cc:	4f 92       	push	r4
    26ce:	5f 92       	push	r5
    26d0:	6f 92       	push	r6
    26d2:	7f 92       	push	r7
    26d4:	8f 92       	push	r8
    26d6:	9f 92       	push	r9
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	ca 1b       	sub	r28, r26
    26f2:	db 0b       	sbc	r29, r27
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	09 94       	ijmp

00002700 <__epilogue_restores__>:
    2700:	2a 88       	ldd	r2, Y+18	; 0x12
    2702:	39 88       	ldd	r3, Y+17	; 0x11
    2704:	48 88       	ldd	r4, Y+16	; 0x10
    2706:	5f 84       	ldd	r5, Y+15	; 0x0f
    2708:	6e 84       	ldd	r6, Y+14	; 0x0e
    270a:	7d 84       	ldd	r7, Y+13	; 0x0d
    270c:	8c 84       	ldd	r8, Y+12	; 0x0c
    270e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2710:	aa 84       	ldd	r10, Y+10	; 0x0a
    2712:	b9 84       	ldd	r11, Y+9	; 0x09
    2714:	c8 84       	ldd	r12, Y+8	; 0x08
    2716:	df 80       	ldd	r13, Y+7	; 0x07
    2718:	ee 80       	ldd	r14, Y+6	; 0x06
    271a:	fd 80       	ldd	r15, Y+5	; 0x05
    271c:	0c 81       	ldd	r16, Y+4	; 0x04
    271e:	1b 81       	ldd	r17, Y+3	; 0x03
    2720:	aa 81       	ldd	r26, Y+2	; 0x02
    2722:	b9 81       	ldd	r27, Y+1	; 0x01
    2724:	ce 0f       	add	r28, r30
    2726:	d1 1d       	adc	r29, r1
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	ed 01       	movw	r28, r26
    2734:	08 95       	ret

00002736 <_exit>:
    2736:	f8 94       	cli

00002738 <__stop_program>:
    2738:	ff cf       	rjmp	.-2      	; 0x2738 <__stop_program>
