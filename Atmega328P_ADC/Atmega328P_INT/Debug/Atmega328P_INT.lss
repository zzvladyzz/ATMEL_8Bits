
Atmega328P_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000045  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main()
{
	cli();
  80:	f8 94       	cli
	DDRB=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
	
	ADMUX|= 0b01100001;
  86:	ec e7       	ldi	r30, 0x7C	; 124
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 66       	ori	r24, 0x61	; 97
  8e:	80 83       	st	Z, r24
	ADCSRA|=0b00000110;
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 83       	st	Z, r24
	sei();
  9a:	78 94       	sei
			while(!(ADCSRA&(1<<ADIF)));// siempre que se lee una bandera de interrupcion
			// esta debemos apagarla automaticamete debido a que esta se apaga cuando entra al ISR
			// pero al no tener esta funcion se queda asi
			ADCSRA&=~(1<<ADIF);// reiniciamos la bandera
			ADCSRA&=~(1<<ADEN);
			PORTB=ADCH;
  9c:	a9 e7       	ldi	r26, 0x79	; 121
  9e:	b0 e0       	ldi	r27, 0x00	; 0
	sei();
	
	while(1)
	{
		//TODO ESTO ES PARA AHORRAR ENERGIA
			ADCSRA|=(1<<ADEN);
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x28>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
			_delay_us(10);
			ADCSRA|=(1<<ADSC);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
			while(!(ADCSRA&(1<<ADIF)));// siempre que se lee una bandera de interrupcion
  b4:	80 81       	ld	r24, Z
  b6:	84 ff       	sbrs	r24, 4
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x34>
			// esta debemos apagarla automaticamete debido a que esta se apaga cuando entra al ISR
			// pero al no tener esta funcion se queda asi
			ADCSRA&=~(1<<ADIF);// reiniciamos la bandera
  ba:	80 81       	ld	r24, Z
  bc:	8f 7e       	andi	r24, 0xEF	; 239
  be:	80 83       	st	Z, r24
			ADCSRA&=~(1<<ADEN);
  c0:	80 81       	ld	r24, Z
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	80 83       	st	Z, r24
			PORTB=ADCH;
  c6:	8c 91       	ld	r24, X
  c8:	85 b9       	out	0x05, r24	; 5
	}
  ca:	ea cf       	rjmp	.-44     	; 0xa0 <main+0x20>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
