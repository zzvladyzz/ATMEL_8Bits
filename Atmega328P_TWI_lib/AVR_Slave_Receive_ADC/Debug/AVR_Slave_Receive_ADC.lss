
AVR_Slave_Receive_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b2  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000829  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c5  00000000  00000000  00002319  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000026de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
ISR(INT0_vect);

int main(void)
{
	
	cli();
  a6:	f8 94       	cli
	DDRD=0x00;		//	Input
  a8:	1a b8       	out	0x0a, r1	; 10
	DDRB=0xff;		//	Output
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	PORTD=0xff;		//	Pull-up
  ae:	8b b9       	out	0x0b, r24	; 11
	EICRA|=(1<<ISC01);
  b0:	e9 e6       	ldi	r30, 0x69	; 105
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);
  ba:	e8 9a       	sbi	0x1d, 0	; 29
	TWI_Config(PIND&0x03,0,0,1);
  bc:	89 b1       	in	r24, 0x09	; 9
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	83 70       	andi	r24, 0x03	; 3
  c6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <TWI_Config>
	sei();
  ca:	78 94       	sei
	while (1)
	{
		PORTB=*TWI_Out;
  cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <TWI_Out>
  d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <TWI_Out+0x1>
  d4:	80 81       	ld	r24, Z
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	f9 cf       	rjmp	.-14     	; 0xcc <main+0x26>

000000da <__vector_1>:
	}
	return 0;
}
ISR(INT0_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	TWAR=((PIND & 0x03)<<1) | 0;
  e6:	89 b1       	in	r24, 0x09	; 9
  e8:	83 70       	andi	r24, 0x03	; 3
  ea:	88 0f       	add	r24, r24
  ec:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
}
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <__vector_24>:


ISR(TWI_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	uint8_t TWI_Status_INT;
	uint8_t TWI_Data_Receive=TWI_Size;
	TWI_Status_INT=TWSR&0xF8;
 112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (TWI_Status_INT==0x60 || TWI_Status_INT==0x68 ||TWI_Status_INT==0x70 ||TWI_Status_INT==0x78)
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	90 36       	cpi	r25, 0x60	; 96
 11c:	11 f0       	breq	.+4      	; 0x122 <__vector_24+0x26>
 11e:	90 37       	cpi	r25, 0x70	; 112
 120:	31 f4       	brne	.+12     	; 0x12e <__vector_24+0x32>
	{
		TWCR=(1<<TWEA)|(1<<TWIE)|(1<<TWINT)|(1<<TWEN);
 122:	85 ec       	ldi	r24, 0xC5	; 197
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		TWI_Loop=0;
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 12c:	32 c0       	rjmp	.+100    	; 0x192 <__vector_24+0x96>
	}
	else if (TWI_Status_INT==0x80 || TWI_Status_INT==0x90)
 12e:	98 2f       	mov	r25, r24
 130:	98 7e       	andi	r25, 0xE8	; 232
 132:	90 38       	cpi	r25, 0x80	; 128
 134:	e1 f4       	brne	.+56     	; 0x16e <__vector_24+0x72>
	{
		
		if ((TWI_Data_Receive-TWI_Loop)==0)
 136:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	31 f4       	brne	.+12     	; 0x14a <__vector_24+0x4e>
		{
			TWI_Loop=0;
 13e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			TWCR=(0<<TWEA)|(1<<TWIE)|(1<<TWINT)|(1<<TWEN);
 142:	85 e8       	ldi	r24, 0x85	; 133
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 148:	0d c0       	rjmp	.+26     	; 0x164 <__vector_24+0x68>
		}
		else if ((TWI_Data_Receive-TWI_Loop)>0)
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	28 1b       	sub	r18, r24
 150:	31 09       	sbc	r19, r1
 152:	12 16       	cp	r1, r18
 154:	13 06       	cpc	r1, r19
 156:	34 f4       	brge	.+12     	; 0x164 <__vector_24+0x68>
		{
			TWI_Loop++;
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			TWCR=(1<<TWEA)|(1<<TWIE)|(1<<TWINT)|(1<<TWEN);
 15e:	85 ec       	ldi	r24, 0xC5	; 197
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		}
		TWI_Ref=TWDR;
 164:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 168:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_Ref>
 16c:	12 c0       	rjmp	.+36     	; 0x192 <__vector_24+0x96>

	}
	else if (TWI_Status_INT==0x88 || TWI_Status_INT==0x98)
 16e:	98 38       	cpi	r25, 0x88	; 136
 170:	41 f4       	brne	.+16     	; 0x182 <__vector_24+0x86>
	{
		TWCR=(1<<TWEA)|(1<<TWIE)|(1<<TWINT)|(1<<TWEN);
 172:	85 ec       	ldi	r24, 0xC5	; 197
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		TWI_Ref=TWDR;
 178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 17c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_Ref>
 180:	08 c0       	rjmp	.+16     	; 0x192 <__vector_24+0x96>

	}
	else if (TWI_Status_INT==0xA0)
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	80 3a       	cpi	r24, 0xA0	; 160
 186:	29 f4       	brne	.+10     	; 0x192 <__vector_24+0x96>
	{
		TWCR|=(1<<TWINT);
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
	}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <TWI_Config>:
/*			S_M=1	Maestro				*/
/*			GCall=1	Habilita la llamada general pero se coloca casi siempre en 0					*/
/*			IntSlave=1	Habilita la interrupcion cuando es configurado en modo esclavo				*/
void	TWI_Config(uint8_t SlaveAddress,uint8_t S_M,uint8_t GCall,uint8_t IntSlave)
{
	TWI_Status_Master=0;
 1a8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <TWI_Status_Master>
	TWI_Status_Slave=0;
 1ac:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TWI_Status_Slave>
	TWI_Control_Slave=0;
 1b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TWI_Control_Slave>
	if (S_M==0)
 1b4:	61 11       	cpse	r22, r1
 1b6:	16 c0       	rjmp	.+44     	; 0x1e4 <TWI_Config+0x3c>
	{
		TWI_Master_OR_Slave=0;
 1b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <TWI_Master_OR_Slave>
		if (IntSlave==0)							/*		Esclavo sin habilitacion de la interrupcion		*/
 1bc:	21 11       	cpse	r18, r1
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <TWI_Config+0x28>
		{
			TWAR=(SlaveAddress<<1) | GCall;
 1c0:	88 0f       	add	r24, r24
 1c2:	48 2b       	or	r20, r24
 1c4:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
			TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
 1c8:	84 ec       	ldi	r24, 0xC4	; 196
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ce:	08 95       	ret
		}
		else if (IntSlave==1)						/*		Esclavo conn habilitacion de la interrupcion		*/
 1d0:	21 30       	cpi	r18, 0x01	; 1
 1d2:	a1 f4       	brne	.+40     	; 0x1fc <TWI_Config+0x54>
		{
			TWAR=(SlaveAddress<<1) | GCall;
 1d4:	88 0f       	add	r24, r24
 1d6:	48 2b       	or	r20, r24
 1d8:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
			TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE)|(1<<TWINT);			/*		Envio de ACK si se registra una comunicacion		*/
 1dc:	85 ec       	ldi	r24, 0xC5	; 197
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1e2:	08 95       	ret
		}
	}
	else if(S_M==1)									/*		Maestro sin habilitacion de la interrupcion		*/
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	51 f4       	brne	.+20     	; 0x1fc <TWI_Config+0x54>
	{												/*		La interrupcion no se habilito para este caso debido a que las aplicaciones no lo requeriran		*/
		TWI_Master_OR_Slave=1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <TWI_Master_OR_Slave>
		TWBR=BITRATE;
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
		switch(PrescalerValue)
		{
			case 1:
					TWSR|=0x00;
 1f4:	e9 eb       	ldi	r30, 0xB9	; 185
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
