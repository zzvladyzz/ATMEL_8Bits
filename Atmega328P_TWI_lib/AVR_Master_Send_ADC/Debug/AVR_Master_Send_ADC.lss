
AVR_Master_Send_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8a  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000804  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bf  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cd  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define		Nack	0
#define		Address 0x00

int main(void)
{
	cli();
  90:	f8 94       	cli
	DDRB=0x00;		//	Input
  92:	14 b8       	out	0x04, r1	; 4
	DDRD=0x00;		//	Input
  94:	1a b8       	out	0x0a, r1	; 10
	PORTB=0xff;		//	Pull-up
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	85 b9       	out	0x05, r24	; 5
	PORTD=0x37;		//	Pull-up	
  9a:	87 e3       	ldi	r24, 0x37	; 55
  9c:	8b b9       	out	0x0b, r24	; 11

	EICRA|=(1<<ISC01);
  9e:	e9 e6       	ldi	r30, 0x69	; 105
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);
  a8:	e8 9a       	sbi	0x1d, 0	; 29
	ADC_Init();
  aa:	0e 94 94 00 	call	0x128	; 0x128 <ADC_Init>
	TWI_Config(Address,1,0,0);
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 aa 00 	call	0x154	; 0x154 <TWI_Config>
	sei();
  ba:	78 94       	sei
    while (1) 
    {		
		asm("nop");
  bc:	00 00       	nop
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x2c>

000000c0 <__vector_1>:
    }
	return 0;
}

ISR(INT0_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	cf 93       	push	r28
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	cli();
  e4:	f8 94       	cli
	uint8_t Direction=PIND&0x03;
  e6:	c9 b1       	in	r28, 0x09	; 9
	//uint8_t DataPort=PINB&0xff;
	TWI_Start();
  e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWI_Start>
	TWI_Adrress(Direction,W);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c 2f       	mov	r24, r28
  f0:	83 70       	andi	r24, 0x03	; 3
  f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <TWI_Adrress>
	TWI_TransmitData(ADC_ReadValue());
  f6:	0e 94 9f 00 	call	0x13e	; 0x13e <ADC_ReadValue>
  fa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <TWI_TransmitData>
	TWI_Stop();	
  fe:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <TWI_Stop>
	sei();
 102:	78 94       	sei
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	cf 91       	pop	r28
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <ADC_Init>:
#include "../header/ADC_328P.h"


void ADC_Init()
{
	ADMUX|=(1<<REFS0)|(1<<ADLAR)|(1<<MUX1);
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 66       	ori	r24, 0x62	; 98
 130:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	86 68       	ori	r24, 0x86	; 134
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <ADC_ReadValue>:
}

uint8_t ADC_ReadValue()
{
	ADCSRA|=(1<<ADSC);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
	while(!(ADCSRA&(1<<ADIF)));
 148:	80 81       	ld	r24, Z
 14a:	84 ff       	sbrs	r24, 4
 14c:	fd cf       	rjmp	.-6      	; 0x148 <ADC_ReadValue+0xa>
	//ADCSRA&=~(1<<ADIF);
	return ADCH;
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 152:	08 95       	ret

00000154 <TWI_Config>:
		if(Condition==0x10)
		{
			TWI_Status_Master	=	10;				//  1 si el REPEATSTART fue exitoso
			return ;
		}
		TWI_Status_Master	=	0;					//  0 si el REPEATSTART fallo
 154:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <TWI_Status_Slave>
 15c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 160:	61 11       	cpse	r22, r1
 162:	16 c0       	rjmp	.+44     	; 0x190 <TWI_Config+0x3c>
 164:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TWI_Master_OR_Slave>
 168:	21 11       	cpse	r18, r1
 16a:	08 c0       	rjmp	.+16     	; 0x17c <TWI_Config+0x28>
 16c:	88 0f       	add	r24, r24
 16e:	48 2b       	or	r20, r24
 170:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
 174:	84 ec       	ldi	r24, 0xC4	; 196
 176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 17a:	08 95       	ret
 17c:	21 30       	cpi	r18, 0x01	; 1
 17e:	a1 f4       	brne	.+40     	; 0x1a8 <TWI_Config+0x54>
 180:	88 0f       	add	r24, r24
 182:	48 2b       	or	r20, r24
 184:	40 93 ba 00 	sts	0x00BA, r20	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
 188:	85 ec       	ldi	r24, 0xC5	; 197
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 18e:	08 95       	ret
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	51 f4       	brne	.+20     	; 0x1a8 <TWI_Config+0x54>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_Master_OR_Slave>
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1a0:	e9 eb       	ldi	r30, 0xB9	; 185
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 83       	st	Z, r24
 1a8:	08 95       	ret

000001aa <TWI_Start>:
 1aa:	84 ea       	ldi	r24, 0xA4	; 164
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <TWI_Start+0xa>
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	19 f4       	brne	.+6      	; 0x1ca <TWI_Start+0x20>
 1c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
 1c8:	08 95       	ret
 1ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
 1ce:	08 95       	ret

000001d0 <TWI_Stop>:
	}
}
/*		Detener la comunicacion		*/
void	TWI_Stop()
{
	if (TWI_Status_Master== 20 || TWI_Status_Master== 28 || TWI_Status_Master== 30 || TWI_Status_Master== 48 || TWI_Status_Master== 58)
 1d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <TWI_Status_Master>
 1d4:	98 2f       	mov	r25, r24
 1d6:	97 7f       	andi	r25, 0xF7	; 247
 1d8:	94 31       	cpi	r25, 0x14	; 20
 1da:	31 f0       	breq	.+12     	; 0x1e8 <TWI_Stop+0x18>
 1dc:	8e 31       	cpi	r24, 0x1E	; 30
 1de:	21 f0       	breq	.+8      	; 0x1e8 <TWI_Stop+0x18>
 1e0:	80 33       	cpi	r24, 0x30	; 48
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <TWI_Stop+0x18>
 1e4:	8a 33       	cpi	r24, 0x3A	; 58
 1e6:	51 f4       	brne	.+20     	; 0x1fc <TWI_Stop+0x2c>
	{
		TWI_Status_Master=0;
 1e8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
		TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 1ec:	84 e9       	ldi	r24, 0x94	; 148
 1ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(TWCR&(1<<TWSTO));
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	84 fd       	sbrc	r24, 4
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <TWI_Stop+0x26>
 1fc:	08 95       	ret

000001fe <TWI_Adrress>:
	}
}
/*		Comunicarse con un esclavo		*/
void	TWI_Adrress(uint8_t Data_Adrress, uint8_t W_R)
{
	if (TWI_Status_Master	==	8 || TWI_Status_Master== 10)
 1fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TWI_Status_Master>
 202:	9d 7f       	andi	r25, 0xFD	; 253
 204:	98 30       	cpi	r25, 0x08	; 8
 206:	a9 f5       	brne	.+106    	; 0x272 <TWI_Adrress+0x74>
	{
		uint8_t Status;
		TWDR=(Data_Adrress<<1)|(W_R);
 208:	88 0f       	add	r24, r24
 20a:	86 2b       	or	r24, r22
 20c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR=(1<<TWINT)|(1<<TWEN);
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <TWI_Adrress+0x1c>
		Status=TWSR&0xF8;
 220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 224:	88 7f       	andi	r24, 0xF8	; 248
		if (W_R==0)
 226:	61 11       	cpse	r22, r1
 228:	14 c0       	rjmp	.+40     	; 0x252 <TWI_Adrress+0x54>
		{
			switch (Status)
 22a:	80 32       	cpi	r24, 0x20	; 32
 22c:	41 f0       	breq	.+16     	; 0x23e <TWI_Adrress+0x40>
 22e:	88 33       	cpi	r24, 0x38	; 56
 230:	51 f0       	breq	.+20     	; 0x246 <TWI_Adrress+0x48>
 232:	88 31       	cpi	r24, 0x18	; 24
 234:	59 f4       	brne	.+22     	; 0x24c <TWI_Adrress+0x4e>
			{
				case 0x18:				// Send SLA+W and Receiver ACK		w=0
						TWI_Status_Master = 18;	// 18 to indicate ACK received
 236:	82 e1       	ldi	r24, 0x12	; 18
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
						return ;
 23c:	08 95       	ret
					break;
				case 0x20:				// Send SLA+W and Receiver NACK		w=0
						TWI_Status_Master = 20;	// 20 to indicate NACK received
 23e:	84 e1       	ldi	r24, 0x14	; 20
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
						return ;
 244:	08 95       	ret
					break;
				case 0x38:
						TWI_Status_Master = 0;	// 0 to indicate W=Arbitration lost in SLA+W or data bytes
 246:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
						return ;
 24a:	08 95       	ret
					break;
				default :
						TWI_Status_Master = 0;	// 0 to indicate SLA+W/R failed
 24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
						return ;
 250:	08 95       	ret
					break;
			}	
		} 
		else if(W_R==1)
 252:	61 30       	cpi	r22, 0x01	; 1
 254:	71 f4       	brne	.+28     	; 0x272 <TWI_Adrress+0x74>
		{
			switch (Status)
 256:	80 34       	cpi	r24, 0x40	; 64
 258:	29 f0       	breq	.+10     	; 0x264 <TWI_Adrress+0x66>
 25a:	88 34       	cpi	r24, 0x48	; 72
 25c:	39 f0       	breq	.+14     	; 0x26c <TWI_Adrress+0x6e>
				case 0x48:				// Send SLA+R and Receiver NACK		r=1
						TWI_Status_Master = 48;	// Return 48 to indicate NACK received
						return ;
					break;
				case 0x38:
						TWI_Status_Master = 0;	// Return 0 to indicate R=Arbitration lost in SLA+R or NOT ACK bit
 25e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
 262:	08 95       	ret
		else if(W_R==1)
		{
			switch (Status)
			{
				case 0x40:				// Send SLA+R and Receiver ACK		r=1
						TWI_Status_Master = 40;	// Return 40 to indicate ACK received
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
						return ;
 26a:	08 95       	ret
					break;
				case 0x48:				// Send SLA+R and Receiver NACK		r=1
						TWI_Status_Master = 48;	// Return 48 to indicate NACK received
 26c:	80 e3       	ldi	r24, 0x30	; 48
 26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
 272:	08 95       	ret

00000274 <TWI_Listen>:
return 0;
}
/*		Verificar si existe una llamada desde un maestro		*/
void	TWI_Listen()
{
	while(TWI_Control_Slave==0)
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 278:	81 11       	cpse	r24, r1
 27a:	1e c0       	rjmp	.+60     	; 0x2b8 <TWI_Listen+0x44>
	{
		TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
 27c:	84 ec       	ldi	r24, 0xC4	; 196
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 282:	ec eb       	ldi	r30, 0xBC	; 188
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 23       	and	r24, r24
 28a:	ec f7       	brge	.-6      	; 0x286 <TWI_Listen+0x12>
		TWI_Status_Slave=TWSR&0xF8;
 28c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 290:	98 2f       	mov	r25, r24
 292:	98 7f       	andi	r25, 0xF8	; 248
 294:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <TWI_Status_Slave>
		if (TWI_Status_Slave==0x60 || TWI_Status_Slave==0x68 ||TWI_Status_Slave==0x70 ||TWI_Status_Slave==0x78)
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	80 36       	cpi	r24, 0x60	; 96
 29c:	11 f0       	breq	.+4      	; 0x2a2 <TWI_Listen+0x2e>
 29e:	80 37       	cpi	r24, 0x70	; 112
 2a0:	21 f4       	brne	.+8      	; 0x2aa <TWI_Listen+0x36>
		{
			TWI_Control_Slave=1;		/*		Se recibio SLA+W y se devolvio ACK		*/
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			return ;
 2a8:	08 95       	ret
		}
		if (TWI_Status_Slave==0xA8 || TWI_Status_Slave==0xB0 )
 2aa:	98 3a       	cpi	r25, 0xA8	; 168
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <TWI_Listen+0x3e>
 2ae:	90 3b       	cpi	r25, 0xB0	; 176
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <TWI_Listen+0x44>
		{
			TWI_Control_Slave=2;		/*		Se recibio SLA+R y se devolvio NACK		*/
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2b8:	08 95       	ret

000002ba <TWI_TransmitData>:
		}
	}
}
/*		Enviar datos siendo MT o ST		*/
void	TWI_TransmitData(uint8_t Data)		
{
 2ba:	cf 93       	push	r28
	if (TWI_Master_OR_Slave==1)
 2bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <TWI_Master_OR_Slave>
 2c0:	91 30       	cpi	r25, 0x01	; 1
 2c2:	11 f5       	brne	.+68     	; 0x308 <TWI_TransmitData+0x4e>
	{
		if (TWI_Status_Master == 18 || TWI_Status_Master == 28)
 2c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TWI_Status_Master>
 2c8:	92 31       	cpi	r25, 0x12	; 18
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <TWI_TransmitData+0x16>
 2cc:	9c 31       	cpi	r25, 0x1C	; 28
 2ce:	f1 f5       	brne	.+124    	; 0x34c <TWI_TransmitData+0x92>
		{
			uint8_t Status;
			TWDR=Data;
 2d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			TWCR=(1<<TWINT)|(1<<TWEN);
 2d4:	84 e8       	ldi	r24, 0x84	; 132
 2d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
 2da:	ec eb       	ldi	r30, 0xBC	; 188
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	ec f7       	brge	.-6      	; 0x2de <TWI_TransmitData+0x24>
			Status=TWSR&0xF8;
 2e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 2e8:	88 7f       	andi	r24, 0xF8	; 248
			if (Status==0x28)			// Send Data and Receiver ACK and can i keep sending data
 2ea:	88 32       	cpi	r24, 0x28	; 40
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <TWI_TransmitData+0x3c>
			{
				TWI_Status_Master	=	28;		// 2 to indicate ACK received
 2ee:	8c e1       	ldi	r24, 0x1C	; 28
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
				return ;
 2f4:	2b c0       	rjmp	.+86     	; 0x34c <TWI_TransmitData+0x92>
			}
			else if (Status==0x30)			// Send Data and Receiver NACK 
 2f6:	80 33       	cpi	r24, 0x30	; 48
 2f8:	21 f4       	brne	.+8      	; 0x302 <TWI_TransmitData+0x48>
			{
				TWI_Status_Master	=	30;		// 30 to indicate NACK received
 2fa:	8e e1       	ldi	r24, 0x1E	; 30
 2fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <TWI_Status_Master>
				return ;
 300:	25 c0       	rjmp	.+74     	; 0x34c <TWI_TransmitData+0x92>
				TWI_Status_Master	=	0;		// 0 to indicate why other master continue
				return ;
			}
			else
			{
				TWI_Status_Master	=	0;
 302:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TWI_Status_Master>
 306:	22 c0       	rjmp	.+68     	; 0x34c <TWI_TransmitData+0x92>
				return;	
			}
		}
	}
	else if (TWI_Master_OR_Slave==0)
 308:	91 11       	cpse	r25, r1
 30a:	20 c0       	rjmp	.+64     	; 0x34c <TWI_TransmitData+0x92>
 30c:	c8 2f       	mov	r28, r24
	{
		TWI_Listen();
 30e:	0e 94 3a 01 	call	0x274	; 0x274 <TWI_Listen>
		if (TWI_Control_Slave==2)
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	c9 f4       	brne	.+50     	; 0x34c <TWI_TransmitData+0x92>
		{
			TWDR=Data;
 31a:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 31e:	84 ec       	ldi	r24, 0xC4	; 196
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while(!(TWCR&(1<<TWINT)));
 324:	ec eb       	ldi	r30, 0xBC	; 188
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <TWI_TransmitData+0x6e>
			TWI_Status_Slave=TWSR&0xF8;
 32e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 332:	88 7f       	andi	r24, 0xF8	; 248
 334:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TWI_Status_Slave>
			if (TWI_Status_Slave==0xB8 )
 338:	88 3b       	cpi	r24, 0xB8	; 184
 33a:	21 f4       	brne	.+8      	; 0x344 <TWI_TransmitData+0x8a>
			{
				TWI_Control_Slave=2;
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				return ;
 342:	04 c0       	rjmp	.+8      	; 0x34c <TWI_TransmitData+0x92>
			}
			else if (TWI_Status_Slave==0xC0)
 344:	80 3c       	cpi	r24, 0xC0	; 192
 346:	11 f4       	brne	.+4      	; 0x34c <TWI_TransmitData+0x92>
			{
				TWI_Control_Slave=0;
 348:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			return ;
		}
		return ;
	}
}
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
