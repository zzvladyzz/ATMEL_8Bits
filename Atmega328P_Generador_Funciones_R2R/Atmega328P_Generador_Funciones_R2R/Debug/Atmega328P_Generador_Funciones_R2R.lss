
Atmega328P_Generador_Funciones_R2R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000600  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800700  00800700  00000866  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000849  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000716  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000128  00000000  00000000  0000212d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "headers/R2R.h"
uint8_t grafica=0;
uint8_t selector=0;
int main(void)
{
	_Init_T();
  a6:	0e 94 9f 00 	call	0x13e	; 0x13e <_Init_T>
	while (1) 
    {
		OCR1A=10;
  aa:	e8 e8       	ldi	r30, 0x88	; 136
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	91 83       	std	Z+1, r25	; 0x01
  b4:	80 83       	st	Z, r24
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <__vector_1>:
    }
}
ISR(INT0_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	selector++;
  c4:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <__data_end>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
	if(selector>3)
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	18 f4       	brcc	.+6      	; 0xd4 <__vector_1+0x1c>
		OCR1A=10;
    }
}
ISR(INT0_vect)
{
	selector++;
  ce:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <__data_end>
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__vector_1+0x20>
	if(selector>3)
	{
		selector=0;
  d4:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__data_end>
	}
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	R2R(grafica,selector);
 106:	60 91 00 07 	lds	r22, 0x0700	; 0x800700 <__data_end>
 10a:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <grafica>
 10e:	0e 94 c7 00 	call	0x18e	; 0x18e <R2R>
	grafica++;
 112:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <grafica>
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <grafica>
	if (grafica>255)
	{
		grafica=0;
	}
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_Init_T>:
	64,64,65,65,65,66,67,68,69,71,72,73
};

void _Init_T()
{
		cli();
 13e:	f8 94       	cli
		// GPIO
		DDRB=0xFF;				//  Output
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 b9       	out	0x04, r24	; 4
		DDRD|=(1<<DDD2);		//	Input
 144:	52 9a       	sbi	0x0a, 2	; 10
		PORTD|=(1<<PORTD2);		//	Pull-up
 146:	5a 9a       	sbi	0x0b, 2	; 11
		//Interrupt
		EICRA|=(1<<ISC01);
 148:	e9 e6       	ldi	r30, 0x69	; 105
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
		EIMSK|=(1<<INT0);
 152:	e8 9a       	sbi	0x1d, 0	; 29
		//TC1_Control_Register_A
		TCCR1A&=~(1<<WGM10);	// Mode_CTC
 154:	e0 e8       	ldi	r30, 0x80	; 128
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	80 83       	st	Z, r24
		TCCR1A&=~(1<<WGM11);
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	80 83       	st	Z, r24
		//TC1_Control_Register_B
		TCCR1B|=(1<<WGM12);
 164:	e1 e8       	ldi	r30, 0x81	; 129
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 83       	st	Z, r24
		TCCR1B&=~(1<<CS12);		// Preescaler_64
 16e:	80 81       	ld	r24, Z
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	80 83       	st	Z, r24
		TCCR1B&=~ (1<<CS11);
 174:	80 81       	ld	r24, Z
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	80 83       	st	Z, r24
		TCCR1B|=(1<<CS10);
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
		// Timer/Counter_1_Interrupt_Mask_Register
		TIMSK1|=(1<<OCIE1A);
 180:	ef e6       	ldi	r30, 0x6F	; 111
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
		sei();
 18a:	78 94       	sei
 18c:	08 95       	ret

0000018e <R2R>:
}
void R2R(uint8_t signal,uint8_t select)
{
	PORTB=R2RLookup_Sine[signal];
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	fa 4f       	sbci	r31, 0xFA	; 250
 196:	20 81       	ld	r18, Z
 198:	25 b9       	out	0x05, r18	; 5
	PORTB=R2RLookup_Square[signal];
 19a:	fc 01       	movw	r30, r24
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	fb 4f       	sbci	r31, 0xFB	; 251
 1a0:	20 81       	ld	r18, Z
 1a2:	25 b9       	out	0x05, r18	; 5
	PORTB=R2RLookup_Sawtooth[signal];
 1a4:	fc 01       	movw	r30, r24
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	fc 4f       	sbci	r31, 0xFC	; 252
 1aa:	20 81       	ld	r18, Z
 1ac:	25 b9       	out	0x05, r18	; 5
	PORTB=R2RLookup_RevSawtooth[signal];
 1ae:	fc 01       	movw	r30, r24
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	fd 4f       	sbci	r31, 0xFD	; 253
 1b4:	20 81       	ld	r18, Z
 1b6:	25 b9       	out	0x05, r18	; 5
	PORTB=R2RLookup_Triangle[signal];
 1b8:	fc 01       	movw	r30, r24
 1ba:	e0 50       	subi	r30, 0x00	; 0
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	20 81       	ld	r18, Z
 1c0:	25 b9       	out	0x05, r18	; 5
	PORTB=R2RLookup_ECG[signal];	
 1c2:	fc 01       	movw	r30, r24
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	80 81       	ld	r24, Z
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
